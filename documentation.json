{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-5f810a33c3acf6572641386a93d51cf8ea451dbe55e1fd2eedcc35a802260e6a0523f4a284e96143d57558cdca0d68e1de8f0acd2a56b450cab7594cc8b0b25a",
            "file": "src/app/posts/store/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap } from \"@ngrx/store\";\r\nimport * as fromPosts from './posts.reducer'; \r\nimport * as fromComments from './comments.reducer'; \r\nimport { StateList } from \"src/app/services/base/reducer.list\";\r\n\r\nexport const postsStateFeatureKey = 'postsState';\r\n\r\nexport interface AppState {\r\n  posts: StateList;\r\n  comments: fromComments.StateComments;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<AppState> = {\r\n  posts: fromPosts.reducer,\r\n  comments: fromComments.reducer\r\n};",
            "properties": [
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromComments.StateComments",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "posts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateList",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSelect",
            "id": "interface-DataSelect-2601ffb4bafc3e0e3490ebb0a6cb6b40fa13ffbf6507202a2a1cdd2194295fb07bb4659ada18c1e48fea6a7154937f1f12e642f56d305fa88443ed3ace4bb532",
            "file": "src/app/demo-lib/app.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectorRef, Component } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { delay, map, tap } from 'rxjs/operators';\r\nimport { ValidatorsApp } from './validatosapp';\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n@Component({\r\n  selector: 'app-demo',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponentDemo {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n      this.dataSelect$= this.subject.pipe(\r\n        tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(2000)\r\n      ) as Observable<Item[]>;\r\n         \r\n    }\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSelect",
            "id": "interface-DataSelect-6e64c162dc631155f9af0f92087e35a165d79b797adbc2f897c2b3d698e9af0286aa4f7175dc922bff286527163745bc404b450c70633b2fd88b4914d49c9246-1",
            "file": "src/stories/library/formfields.normal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable, tap, map, delay } from 'rxjs';\r\nimport { ValidatorsApp } from 'src/app/demo-lib/validatosapp';\r\n\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'form-normal',\r\n  template: ` \r\n  <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\" >\r\n      <div class=\"flex flex-row\">\r\n      <app-number-field [name]=\"'number field'\" [label]=\"'Number field'\" [value]=\"10\" class=\"w-6\"></app-number-field>\r\n      <app-number-field [name]=\"'number field_other'\" [label]=\"'Number field'\" [value]=\"50\" class=\"w-6\"></app-number-field>\r\n       <app-text-field [name]=\"'text-group-other'\" [label]=\"'text test other'\" class=\"w-6\"></app-text-field>\r\n       <app-email-field [name]=\"'email'\" [label]=\"'Email *'\"></app-email-field>\r\n            \r\n      </div>\r\n    </ng-container>\r\n  </app-form>\r\n  `  \r\n})\r\nexport default class FormFieldsNormalComponent {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$!: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n  @Output()\r\n  onAccept = new EventEmitter();\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n   \r\n         \r\n    }\r\n \r\n  \r\n    \r\n   accept(data:any){\r\n      console.log('passsssssssssss accept',data)\r\n      this.onAccept.emit(data)\r\n    }\r\n\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DataSelect-1"
        },
        {
            "name": "DataSelect",
            "id": "interface-DataSelect-a38959a01cb1b18eecec604b1f1eafe7db5ceadeb92ff2c2beffb26429fd00a15e7922ab33f6bc3fbe19230230e42c723b3a6a63c0001a8f7162322a57caeb62-2",
            "file": "src/stories/library/formfields.selects.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable, tap, map, delay } from 'rxjs';\r\nimport { ValidatorsApp } from 'src/app/demo-lib/validatosapp';\r\n\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` \r\n  <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\" >\r\n      <div class=\"flex flex-row\">\r\n     \r\n              <app-text-field [name]=\"'text-group-other-3'\" [label]=\"'text test other 3'\" class=\"w-6\" MatField></app-text-field>\r\n               <app-select-field\r\n                [name]=\"'myselect'\"\r\n                [label]=\"'My select *'\"\r\n                [listItems]=\"[\r\n                  { value: '1', desc: 'desc 1' },\r\n                  { value: '2', desc: 'desc 2' },\r\n                  { value: '3', desc: 'desc 3' }\r\n                ]\"\r\n                (onChange)=\"updateData($event)\"\r\n                [validations]=\"validations\"\r\n                MatField\r\n                class=\"w-6\"\r\n              ></app-select-field>\r\n              <app-select-field\r\n                [name]=\"'myselect2'\"\r\n                [label]=\"'My select 2 *'\"\r\n                [listItems]=\"dataSelect$ | async\"\r\n                [value]=\"'22'\"\r\n                (onChange)=\"valueSelect = $event\"\r\n                MatField\r\n                class=\"w-6\"\r\n              ></app-select-field> \r\n      </div>\r\n    </ng-container>\r\n  </app-form>\r\n  `  \r\n})\r\nexport default class FormFieldsSelectsComponent {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n  @Output()\r\n  onAccept = new EventEmitter();\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n      this.dataSelect$= this.subject.pipe(\r\n        tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(2000)\r\n      ) as Observable<Item[]>;\r\n         \r\n    }\r\n \r\n  \r\n    \r\n   accept(data:any){\r\n      console.log('passsssssssssss accept',data)\r\n      this.onAccept.emit(data)\r\n    }\r\n\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "DataSelect-2"
        },
        {
            "name": "DataSelect",
            "id": "interface-DataSelect-5f49f50d55269731d3370955c012988130999261159fbe47b519902ef0edb4e25d87bb1d141081a34bc15dc67340049726128ba06c1f281d320798f9afdee746-3",
            "file": "projects/my-lib-display/src/lib/fields/components/data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DataSelect{\r\n    key: string;\r\n    value:string,\r\n    desc: string;\r\n  }\r\n  \r\n  \r\n  export function createData():DataSelect[]{\r\n    return [\r\n      {key: '1', value: '11', desc:'desc data 11' },\r\n      {key: '1', value: '12', desc:'desc data 12' },\r\n      {key: '1', value: '13', desc:'desc data 13' },\r\n      {key: '2', value: '21', desc:'desc data 21' },\r\n      {key: '2', value: '22', desc:'desc data 22' },\r\n      {key: '2', value: '23', desc:'desc data 23' },\r\n      {key: '3', value: '31', desc:'desc data 31' },\r\n      {key: '3', value: '32', desc:'desc data 32' },\r\n      {key: '3', value: '33', desc:'desc data 33' },\r\n      \r\n    ];\r\n  }",
            "properties": [
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "DataSelect-3"
        },
        {
            "name": "Entity",
            "id": "interface-Entity-a5f4fadcae8916fa34d7a3d9d71413cd37361790df4768545401722e38c9210859f7050ec6b2f213c1b146f72013b38028cd10159ebae8eab42db451d0000a5f",
            "file": "src/app/services/models/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Entity{\r\n   id?:string|number;\r\n }",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterComment",
            "id": "interface-FilterComment-c8d4ea440e362e75e54979ea0825577c25b787b167e1301f7f7e6884b095dc422f9ad3f566ce33ac9a406677a6eb93f87f02189d2005c7612a55e2285c68af06",
            "file": "src/app/posts/models/comment.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { z } from \"zod\";\r\n\r\nexport const CommentXsd= z.object({\r\n  id: (z.number().gt(0)),\r\n  comment: z.string(),\r\n  author: z.string()\r\n})\r\n\r\nexport const CommentRespBodyXsd= z.array(CommentXsd);\r\n\r\nexport const CommentRespXsd= z.object({\r\n  body:   CommentRespBodyXsd\r\n}\r\n);\r\n\r\n\r\nexport type Comment = z.infer<typeof CommentXsd>;\r\n// export interface Comment {\r\n//   id: number;\r\n//   comment: string;\r\n//   author: string;\r\n// }\r\n\r\nexport interface FilterComment {\r\n  author: string;\r\n  comment: string;\r\n  id:string;\r\n}\r\n\r\nexport type IResponseComments = { link: string; data: Comment[] };\r\n\r\n\r\n// export interface StateUiComments{\r\n//   filter?: FilterComment;\r\n//   order?: SortInfo;\r\n//   expandFilter?: boolean;\r\n// }\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterListInfo",
            "id": "interface-FilterListInfo-d517c79591a8e1c7dde12b503b9a6ba100519ec45c895a7a8e5bad9b4f292175c78a4b7e0b003446cfb4e2fe9e01e7e806c5a07112ca64c68343f307e621c547",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {z} from 'zod';\r\n\r\n\r\nconst xsdSortInfo = z.object({ direction: z.union([z.literal('asc'),z.literal('desc')])  , active: z.string() });\r\n\r\nconst xsdPageRequest = z.object({\r\n  requestLink: z.string().optional(),\r\n  pageIndex: z.number().optional(), pageSize: z.number().optional() });\r\n\r\nexport const xsdLoadInfoSuccess = z.object({\r\n  data: z.array(\r\n    z.any()\r\n  ),\r\n  link: z.string(),\r\n  filter: (z.any()),\r\n  sortInfo: xsdSortInfo.optional(),\r\n  pageRequest: xsdPageRequest,\r\n  type: z.string().optional(),\r\n});\r\n\r\n\r\nexport interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string|null|undefined;\r\n    linkPrev: string|null|undefined ;\r\n    linkLast: string|null|undefined;\r\n    linkFisrt: string|null|undefined;\r\n  };\r\n}\r\n\r\nexport type SortInfo= z.infer<typeof xsdSortInfo>;\r\n\r\nexport type PageRequest= z.infer<typeof xsdPageRequest>;\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n\r\nexport type IResponseData<T=any> = { link: string | undefined | null; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "F",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortInfo",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PageInfo",
                    "optional": true,
                    "description": "",
                    "line": 59
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterPost",
            "id": "interface-FilterPost-251b27bfa908f8291729b81d43c30b9e7c6b79760d916b7fce638a4df4926220ddeb0004d6d15ee52ce365a027e141349581e8239ae851279f0110bfb64ddcfb",
            "file": "src/app/posts/models/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { z } from \"zod\";\r\n\r\nexport const PostXsd= z.object({\r\n  id: (z.number().gt(0)),\r\n  title: z.string(),\r\n  author: z.string()\r\n})\r\n\r\n\r\nexport const PostRespXsd= z.object({\r\n  body:   z.array(PostXsd)\r\n}\r\n);\r\n\r\n\r\nexport type Post = z.infer<typeof PostXsd>;\r\n\r\n\r\nexport interface FilterPost {\r\n  author: string;\r\n  title: string;\r\n}\r\n\r\nexport type IResponsePosts = { link: string; data: Post[] };\r\n\r\n\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBaseMIxings",
            "id": "interface-IBaseMIxings-9d0f28c65d4d3649ab00bf4f43b33a660f445cec509be3f19aa86587d736b0dedb9b592c2da4f1620ffe9c58100d5632655ea7e89ccaaa95953b047f8dd87447",
            "file": "projects/my-lib-display/src/lib/shared/modelMixing.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, OnInit, OnDestroy, Injector } from \"@angular/core\";\r\n\r\nexport interface IInit {\r\n    init(...args: any[]): void;\r\n  }\r\n  export interface IBaseMIxings extends AfterViewInit, OnInit, OnDestroy, IInit {\r\n    injector: Injector;\r\n  }\r\n  \r\n  \r\n export  type Constructor<T = IBaseMIxings> = new (...args: any[]) => T;\r\n  \r\n",
            "properties": [
                {
                    "name": "injector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Injector",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AfterViewInit"
        },
        {
            "name": "IConsole",
            "id": "interface-IConsole-ad1b414a0627c83ae3eb9546c97c9fef29e1b83e06689225d1076cadbd32deeda6aafeb61762b885822883f3f403a2f474412a9d5df018ad2cd8736d3172e065",
            "file": "src/app/services/utils/logger.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Level, Log, Logger } from 'ng2-logger/browser';\r\n\r\nexport let mapNames: Map<string, number> = new Map();\r\nexport let mapNamesLevels: Map<string, Level[]> = new Map();\r\n\r\nconst nameLogPrototype='nameLog';\r\n\r\n\r\n/**\r\n * \r\n * Log App and consoleApp  \r\n */\r\n\r\n export interface IConsole {\r\n  log(msg: string, ...params:any[]):void;\r\n  debug(msg: string, ...params:any[]):void;\r\n  error(msg: string, ...params:any[]):void;\r\n  info(msg: string, ...params:any[]):void;\r\n  warn(msg: string, ...params:any[]):void;\r\n}\r\n\r\n\r\nexport function logApp(typeLog:'data'| 'info' | 'warn' | 'error' ,msg: string,params:any[],source?:any){\r\n  \r\n  let nameLogger;\r\n\r\n//console.log('source protype',source?.constructor,source?.constructor.);\r\n\r\n  if(typeof source ==='string'){\r\n    // from string drecttly\r\n    nameLogger=source;\r\n  }else if(source?.constructor?.prototype && source?.constructor?.prototype[nameLogPrototype]){\r\n    // from prototype class and from decorator\r\n    nameLogger= source?.constructor?.prototype[nameLogPrototype]\r\n  }else{ \r\n    // from name class , but in uglifi not work good\r\n    nameLogger=source?.constructor?.name;\r\n  }\r\n\r\n  const l= Log.create(nameLogger);\r\n\r\n  params?.length>0?((l as any)[typeLog])(msg,...params):((l as any)[typeLog])(msg);\r\n}\r\n\r\n\r\nexport const consoleAppx:IConsole={\r\n log:(msg: string,...params:any[])=>  logApp('data',msg,params),\r\n debug:(msg: string,...params:any[])=>  logApp('info',msg,params),\r\n warn:(msg: string,...params:any[])=>  logApp('warn',msg,params),\r\n info:(msg: string,...params:any[])=>  logApp('info',msg,params),\r\n error:(msg: string,...params:any[])=>  logApp('error',msg,params)\r\n}; \r\n\r\nexport function consoleApp(source?:any): IConsole{\r\n // return console;\r\n  return {\r\n    log:(msg: string,...params:any[])=>  logApp('data',msg,params,source),\r\n    debug:(msg: string,...params:any[])=>  logApp('info',msg,params,source),\r\n    warn:(msg: string,...params:any[])=>  logApp('warn',msg,params,source),\r\n    info:(msg: string,...params:any[])=>  logApp('info',msg,params,source),\r\n    error:(msg: string,...params:any[])=>  {\r\n      //logApp('error',msg,params,source)\r\n      console.error(msg, params);\r\n    }\r\n   }\r\n}\r\n\r\n\r\nexport function NameLog(nameLog:string) {\r\n  return function(constructor: any) {\r\n   // console.log('namelog')\r\n      //const orig = constructor.prototype.ngOnDestroy\r\n     // constructor.nameLog=nameLog;\r\n       if(constructor.prototype)constructor.prototype[nameLogPrototype]=nameLog;\r\n      // if(constructor.prototype){\r\n      //   constructor.prototype.testFn=function(this:any){consoleApp('TESTFN').log('data name log',this[nameLogPrototype],this.httpClient,this.injector)}\r\n      // }\r\n      // constructor.prototype.ngOnDestroy = function() {\r\n      //     for(const prop in this) {\r\n      //         const property = this[prop]\r\n      //         if(typeof property.unsubscribe === \"function\" && !obs$.includes(property))\r\n      //             obs$.push(property)\r\n      //     }\r\n      //     for(const ob$ of obs$) {\r\n      //           ob$.unsubscribe()\r\n      //     }\r\n      //     orig.apply()\r\n      // }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n *   End consoleApp\r\n */\r\n\r\n\r\n\r\n\r\nexport function getLogger(name: string): IConsole {\r\n  return new ConsoleApp(name);\r\n}\r\n\r\nexport function updateLevelLog() {\r\n // if (environment.production) {\r\n    //  Log.setProductionMode();\r\n    //Log.onlyLevel(Level.ERROR, Level.INFO, Level.WARN);\r\n        \r\n // }\r\n}\r\n\r\nexport declare type NameLevels={\r\n  name:string;\r\n  levels:Level[];\r\n};\r\nexport function setNamesLevels(names:NameLevels[]){\r\n   names?.forEach(n=> mapNamesLevels.set(n.name,n.levels));  \r\n}\r\nexport function getNameLevels(name:string):Level[]|undefined{\r\n  return mapNamesLevels.get(Array.from(mapNamesLevels!.keys()).find(k=> name.startsWith(k)) as any);\r\n  \r\n}\r\nexport function refreshNamesLevels(){\r\n  if(localStorage.getItem('namesLevels')){\r\n    setNamesLevels(JSON.parse(localStorage.getItem('namesLevels') as any))\r\n  }\r\n}\r\nexport function getNameLog(name: string): string {\r\n  if (mapNames.get(name) !== undefined) {\r\n    let id = mapNames.get(name) as any;\r\n    mapNames.set(name, ++id );\r\n  } else {\r\n    mapNames.set(name, 0);\r\n  }\r\n  return `${name}_${mapNames.get(name)}`;\r\n}\r\n\r\nexport class ConsoleApp implements IConsole{\r\n  logN2: Logger;\r\n\r\n  constructor(name?: string) {\r\n    let nameLog: string;\r\n    if (name) {\r\n      nameLog = getNameLog(name);\r\n    } else {\r\n      nameLog = getNameLog(this.constructor.name);\r\n    }\r\n\r\n    if(getNameLevels(nameLog)){\r\n      this.logN2 = Log.create(nameLog,...getNameLevels(nameLog) as any);  \r\n    }else{\r\n      this.logN2 = Log.create(nameLog);\r\n    }\r\n  }\r\n\r\n  log(msg: string, ...params: any[]) {\r\n    this.logN2.d(msg, ...params);\r\n  }\r\n  debug(msg: string, ...params: any[]) {\r\n    this.logN2.d(msg, ...params);\r\n  }\r\n  error(msg: string, ...params: any[]) {\r\n    this.logN2.error(msg, ...params);\r\n  }\r\n  info(msg: string, ...params: any[]) {\r\n    this.logN2.i(msg, ...params);\r\n  }\r\n  warn(msg: string, ...params: any[]) {\r\n    this.logN2.w(msg, ...params);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "description": "<p>Log App and consoleApp</p>\n",
            "rawdescription": "\n\n\nLog App and consoleApp\n",
            "methods": [
                {
                    "name": "debug",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IDialog",
            "id": "interface-IDialog-7b8daeebf0eef31ad21315db26784751d3c687e40fe718833b929e9f93e1de3aa63c1c8ad908041419d06f1e893dca9056873655bf51446bda0034b053b0fcc7",
            "file": "projects/my-lib-display/src/lib/material/dialog/dialog/modelDialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IWithForm, IWithFormButtons } from \"../../form/mixinsForm\";\r\nimport { AbstractDialogComponent } from \"../dialog.module\";\r\n\r\n\r\nexport interface IDialog extends AbstractDialogComponent,Partial<IWithForm>, Partial<IWithFormButtons>{\r\n\r\n    \r\n}",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "AbstractDialogComponent"
        },
        {
            "name": "IInit",
            "id": "interface-IInit-9d0f28c65d4d3649ab00bf4f43b33a660f445cec509be3f19aa86587d736b0dedb9b592c2da4f1620ffe9c58100d5632655ea7e89ccaaa95953b047f8dd87447",
            "file": "projects/my-lib-display/src/lib/shared/modelMixing.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, OnInit, OnDestroy, Injector } from \"@angular/core\";\r\n\r\nexport interface IInit {\r\n    init(...args: any[]): void;\r\n  }\r\n  export interface IBaseMIxings extends AfterViewInit, OnInit, OnDestroy, IInit {\r\n    injector: Injector;\r\n  }\r\n  \r\n  \r\n export  type Constructor<T = IBaseMIxings> = new (...args: any[]) => T;\r\n  \r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ISelectorsList",
            "id": "interface-ISelectorsList-d517c79591a8e1c7dde12b503b9a6ba100519ec45c895a7a8e5bad9b4f292175c78a4b7e0b003446cfb4e2fe9e01e7e806c5a07112ca64c68343f307e621c547",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {z} from 'zod';\r\n\r\n\r\nconst xsdSortInfo = z.object({ direction: z.union([z.literal('asc'),z.literal('desc')])  , active: z.string() });\r\n\r\nconst xsdPageRequest = z.object({\r\n  requestLink: z.string().optional(),\r\n  pageIndex: z.number().optional(), pageSize: z.number().optional() });\r\n\r\nexport const xsdLoadInfoSuccess = z.object({\r\n  data: z.array(\r\n    z.any()\r\n  ),\r\n  link: z.string(),\r\n  filter: (z.any()),\r\n  sortInfo: xsdSortInfo.optional(),\r\n  pageRequest: xsdPageRequest,\r\n  type: z.string().optional(),\r\n});\r\n\r\n\r\nexport interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string|null|undefined;\r\n    linkPrev: string|null|undefined ;\r\n    linkLast: string|null|undefined;\r\n    linkFisrt: string|null|undefined;\r\n  };\r\n}\r\n\r\nexport type SortInfo= z.infer<typeof xsdSortInfo>;\r\n\r\nexport type PageRequest= z.infer<typeof xsdPageRequest>;\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n\r\nexport type IResponseData<T=any> = { link: string | undefined | null; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "selectFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "selectFilterListInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "selectFilterListRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "selectLinksStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "selectListData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "selectLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "selectSort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITest",
            "id": "interface-ITest-a1e66e926ad97eb67703c9b5c99c324005b9a9b81f6ba3507d07ae3d64758c8d7c24220f32cb60bf7d43fdf83d0d5befbd5036c8495f82a86c6eb58ac70ce630",
            "file": "src/app/shared/base/mixings-comp.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Directive, EventEmitter, Injector, Input, OnDestroy, OnInit, Output, QueryList, TemplateRef, ViewChild } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { Constructor, FormComponent, FormField, IInit, IWithForm, IWithFormButtons } from \"my-lib-display\";\r\nimport { map, Subject, tap } from \"rxjs\";\r\nimport { consoleApp } from \"src/app/services/utils/logger\";\r\nimport { rxDestroy } from \"src/app/services/utils/opersrx\";\r\nimport { MyService } from \"src/app/users/my.service\";\r\n\r\n\r\n  \r\nexport  interface ITest{\r\n    test:()=>void\r\n  }\r\n  \r\n  \r\n  export function withDestroy<TBase extends Constructor>(Base: TBase) {\r\n    return class extends Base implements OnDestroy, IInit {\r\n      destroy$ = new Subject();\r\n      override init(...args: any[]): void {\r\n        super.init(...args);\r\n        const inj: Injector = this.injector;\r\n        consoleApp(this).log('inject withDestoy=', inj, inj?.get(MyService))\r\n      }\r\n  \r\n  \r\n      override ngOnDestroy(): void {\r\n        this.destroy$.next(true);\r\n        super.ngOnDestroy();\r\n      }\r\n  \r\n    };\r\n  }\r\n\r\n\r\n\r\n\r\n\r\nexport function withForm<TBase extends Constructor>(Base: TBase) {\r\n    @Directive()\r\n    class Temporary extends Base implements AfterViewInit,IWithForm {\r\n      _dataFormInput!: any;\r\n      \r\n      @Input() \r\n      set dataFormInput(data:any){\r\n        this._dataFormInput=data;\r\n      }\r\n    \r\n      get dataFormInput(){\r\n        return this._dataFormInput;\r\n      }\r\n\r\n       formGroup!: FormGroup;\r\n  \r\n       @ViewChild(FormComponent) private  formComponent!:FormComponent;\r\n\r\n      //private detect!: ChangeDetectorRef;\r\n      subjectFields$= new Subject<FormField[]>();\r\n\r\n      override init(...args: any[]) {\r\n        super.init(...args);\r\n        const inj: Injector = this.injector;\r\n        //this.detect = inj.get(ChangeDetectorRef)\r\n        \r\n      }\r\n      override ngAfterViewInit(): void {\r\n       \r\n        if(!this.formComponent)  throw new Error('Form Component is undefined');\r\n        this.formGroup= this.formComponent.group;\r\n        consoleApp(this).log('form controls', this.formComponent.fields.length, Object.keys(this.formComponent.group.controls).length) ;\r\n        //(this.formComponent.group.controls['lastgroup'] as FormGroup)?.controls['text-group-last-2'].setValue('My val from comments')\r\n        // this.formComponent.detect.detectChanges();\r\n     \r\n         this.formComponent.fields.changes.pipe(\r\n           tap((val) => this.updateFields(val)),\r\n           map((fields: QueryList<FormField>)=> fields.map(f=> f)), \r\n           rxDestroy(this as any,true)\r\n         ) .subscribe(this.subjectFields$)           \r\n        super.ngAfterViewInit();\r\n      }\r\n  \r\n      updateFields(fields: QueryList<FormField>){\r\n        fields.forEach(field=>{\r\n          //consoleApp(this).log('field Comment Filter=',field.name,field.control,field);\r\n          // if(field.name==='text-group-last-cent'){\r\n          //   field.control.setValue('change from list comments  XXX')\r\n          // }          \r\n        })\r\n      }      \r\n\r\n    };\r\n    return Temporary;\r\n  }\r\n\r\n\r\n\r\n\r\n  export function withFormButtons<TBase extends Constructor>(Base: TBase) {\r\n    @Directive()\r\n    class Temporary extends Base implements AfterViewInit,IWithFormButtons {\r\n        \r\n        @Output() onAccept= new EventEmitter();\r\n        \r\n        @ViewChild('buttons')\r\n        templateButtons!: TemplateRef<any>;\r\n      \r\n    \r\n      override init(...args: any[]) {\r\n        super.init(...args);\r\n        const inj: Injector = this.injector;\r\n        //this.detect = inj.get(ChangeDetectorRef)\r\n        \r\n      }\r\n      override ngAfterViewInit(): void {\r\n        !this.templateButtons && consoleApp(this).warn('template buttons is undefined',this);           \r\n\r\n        super.ngAfterViewInit();\r\n      }\r\n  \r\n     \r\n\r\n    };\r\n    return Temporary;\r\n  }\r\n  \r\n \r\n  ",
            "properties": [
                {
                    "name": "test",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IWithForm",
            "id": "interface-IWithForm-4c18deb68cfa14be9c488dddca1ee9a13297f9b58462420ebb881ddf4cb8b5e09d8c8bb636852d964462f600f95627587df581a76c8c4fc1e8aaed617c9b7854",
            "file": "projects/my-lib-display/src/lib/material/form/mixinsForm.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter, TemplateRef } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { Subject } from \"rxjs\";\r\nimport { FormField } from \"../../fields/form-field.directive\";\r\nimport { FormComponent } from \"./form.module\";\r\n\r\n\r\n  export interface IWithForm{\r\n    subjectFields$:Subject<FormField[]>;\r\n    formGroup:FormGroup;\r\n    dataFormInput: any;\r\n  } \r\n\r\n\r\n  export interface IWithFormButtons{\r\n   \r\n    onAccept:EventEmitter<any>;\r\n  \r\n    templateButtons: TemplateRef<any>;\r\n\r\n  } ",
            "properties": [
                {
                    "name": "dataFormInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "subjectFields$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<FormField[]>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IWithFormButtons",
            "id": "interface-IWithFormButtons-4c18deb68cfa14be9c488dddca1ee9a13297f9b58462420ebb881ddf4cb8b5e09d8c8bb636852d964462f600f95627587df581a76c8c4fc1e8aaed617c9b7854",
            "file": "projects/my-lib-display/src/lib/material/form/mixinsForm.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter, TemplateRef } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { Subject } from \"rxjs\";\r\nimport { FormField } from \"../../fields/form-field.directive\";\r\nimport { FormComponent } from \"./form.module\";\r\n\r\n\r\n  export interface IWithForm{\r\n    subjectFields$:Subject<FormField[]>;\r\n    formGroup:FormGroup;\r\n    dataFormInput: any;\r\n  } \r\n\r\n\r\n  export interface IWithFormButtons{\r\n   \r\n    onAccept:EventEmitter<any>;\r\n  \r\n    templateButtons: TemplateRef<any>;\r\n\r\n  } ",
            "properties": [
                {
                    "name": "onAccept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "templateButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoadInfo",
            "id": "interface-LoadInfo-d517c79591a8e1c7dde12b503b9a6ba100519ec45c895a7a8e5bad9b4f292175c78a4b7e0b003446cfb4e2fe9e01e7e806c5a07112ca64c68343f307e621c547",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {z} from 'zod';\r\n\r\n\r\nconst xsdSortInfo = z.object({ direction: z.union([z.literal('asc'),z.literal('desc')])  , active: z.string() });\r\n\r\nconst xsdPageRequest = z.object({\r\n  requestLink: z.string().optional(),\r\n  pageIndex: z.number().optional(), pageSize: z.number().optional() });\r\n\r\nexport const xsdLoadInfoSuccess = z.object({\r\n  data: z.array(\r\n    z.any()\r\n  ),\r\n  link: z.string(),\r\n  filter: (z.any()),\r\n  sortInfo: xsdSortInfo.optional(),\r\n  pageRequest: xsdPageRequest,\r\n  type: z.string().optional(),\r\n});\r\n\r\n\r\nexport interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string|null|undefined;\r\n    linkPrev: string|null|undefined ;\r\n    linkLast: string|null|undefined;\r\n    linkFisrt: string|null|undefined;\r\n  };\r\n}\r\n\r\nexport type SortInfo= z.infer<typeof xsdSortInfo>;\r\n\r\nexport type PageRequest= z.infer<typeof xsdPageRequest>;\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n\r\nexport type IResponseData<T=any> = { link: string | undefined | null; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "pageRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PageRequest",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "sortInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortInfo",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoadInfoSuccces",
            "id": "interface-LoadInfoSuccces-d517c79591a8e1c7dde12b503b9a6ba100519ec45c895a7a8e5bad9b4f292175c78a4b7e0b003446cfb4e2fe9e01e7e806c5a07112ca64c68343f307e621c547",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {z} from 'zod';\r\n\r\n\r\nconst xsdSortInfo = z.object({ direction: z.union([z.literal('asc'),z.literal('desc')])  , active: z.string() });\r\n\r\nconst xsdPageRequest = z.object({\r\n  requestLink: z.string().optional(),\r\n  pageIndex: z.number().optional(), pageSize: z.number().optional() });\r\n\r\nexport const xsdLoadInfoSuccess = z.object({\r\n  data: z.array(\r\n    z.any()\r\n  ),\r\n  link: z.string(),\r\n  filter: (z.any()),\r\n  sortInfo: xsdSortInfo.optional(),\r\n  pageRequest: xsdPageRequest,\r\n  type: z.string().optional(),\r\n});\r\n\r\n\r\nexport interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string|null|undefined;\r\n    linkPrev: string|null|undefined ;\r\n    linkLast: string|null|undefined;\r\n    linkFisrt: string|null|undefined;\r\n  };\r\n}\r\n\r\nexport type SortInfo= z.infer<typeof xsdSortInfo>;\r\n\r\nexport type PageRequest= z.infer<typeof xsdPageRequest>;\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n\r\nexport type IResponseData<T=any> = { link: string | undefined | null; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "LoadInfo"
        },
        {
            "name": "PageInfo",
            "id": "interface-PageInfo-d517c79591a8e1c7dde12b503b9a6ba100519ec45c895a7a8e5bad9b4f292175c78a4b7e0b003446cfb4e2fe9e01e7e806c5a07112ca64c68343f307e621c547",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {z} from 'zod';\r\n\r\n\r\nconst xsdSortInfo = z.object({ direction: z.union([z.literal('asc'),z.literal('desc')])  , active: z.string() });\r\n\r\nconst xsdPageRequest = z.object({\r\n  requestLink: z.string().optional(),\r\n  pageIndex: z.number().optional(), pageSize: z.number().optional() });\r\n\r\nexport const xsdLoadInfoSuccess = z.object({\r\n  data: z.array(\r\n    z.any()\r\n  ),\r\n  link: z.string(),\r\n  filter: (z.any()),\r\n  sortInfo: xsdSortInfo.optional(),\r\n  pageRequest: xsdPageRequest,\r\n  type: z.string().optional(),\r\n});\r\n\r\n\r\nexport interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string|null|undefined;\r\n    linkPrev: string|null|undefined ;\r\n    linkLast: string|null|undefined;\r\n    linkFisrt: string|null|undefined;\r\n  };\r\n}\r\n\r\nexport type SortInfo= z.infer<typeof xsdSortInfo>;\r\n\r\nexport type PageRequest= z.infer<typeof xsdPageRequest>;\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n\r\nexport type IResponseData<T=any> = { link: string | undefined | null; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The current total number of items being paged</p>\n",
                    "line": 34,
                    "rawdescription": "\nThe current total number of items being paged"
                },
                {
                    "name": "pageIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The current page index.</p>\n",
                    "line": 25,
                    "rawdescription": "\nThe current page index."
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The current page size</p>\n",
                    "line": 32,
                    "rawdescription": "\nThe current page size"
                },
                {
                    "name": "previousPageIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Index of the page that was selected previously.</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nIndex of the page that was selected previously.\n",
                    "jsdoctags": [
                        {
                            "pos": 684,
                            "end": 748,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 685,
                                "end": 700,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "breaking-change"
                            },
                            "comment": "<p>8.0.0 To be made into a required property.</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PageInfo",
            "id": "interface-PageInfo-d517c79591a8e1c7dde12b503b9a6ba100519ec45c895a7a8e5bad9b4f292175c78a4b7e0b003446cfb4e2fe9e01e7e806c5a07112ca64c68343f307e621c547-1",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {z} from 'zod';\r\n\r\n\r\nconst xsdSortInfo = z.object({ direction: z.union([z.literal('asc'),z.literal('desc')])  , active: z.string() });\r\n\r\nconst xsdPageRequest = z.object({\r\n  requestLink: z.string().optional(),\r\n  pageIndex: z.number().optional(), pageSize: z.number().optional() });\r\n\r\nexport const xsdLoadInfoSuccess = z.object({\r\n  data: z.array(\r\n    z.any()\r\n  ),\r\n  link: z.string(),\r\n  filter: (z.any()),\r\n  sortInfo: xsdSortInfo.optional(),\r\n  pageRequest: xsdPageRequest,\r\n  type: z.string().optional(),\r\n});\r\n\r\n\r\nexport interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string|null|undefined;\r\n    linkPrev: string|null|undefined ;\r\n    linkLast: string|null|undefined;\r\n    linkFisrt: string|null|undefined;\r\n  };\r\n}\r\n\r\nexport type SortInfo= z.infer<typeof xsdSortInfo>;\r\n\r\nexport type PageRequest= z.infer<typeof xsdPageRequest>;\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n\r\nexport type IResponseData<T=any> = { link: string | undefined | null; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "linkInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "requestLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PageInfo-1"
        },
        {
            "name": "PeriodicElement",
            "id": "interface-PeriodicElement-2601ffb4bafc3e0e3490ebb0a6cb6b40fa13ffbf6507202a2a1cdd2194295fb07bb4659ada18c1e48fea6a7154937f1f12e642f56d305fa88443ed3ace4bb532",
            "file": "src/app/demo-lib/app.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectorRef, Component } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { delay, map, tap } from 'rxjs/operators';\r\nimport { ValidatorsApp } from './validatosapp';\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n@Component({\r\n  selector: 'app-demo',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponentDemo {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n      this.dataSelect$= this.subject.pipe(\r\n        tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(2000)\r\n      ) as Observable<Item[]>;\r\n         \r\n    }\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PeriodicElement",
            "id": "interface-PeriodicElement-6e64c162dc631155f9af0f92087e35a165d79b797adbc2f897c2b3d698e9af0286aa4f7175dc922bff286527163745bc404b450c70633b2fd88b4914d49c9246-1",
            "file": "src/stories/library/formfields.normal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable, tap, map, delay } from 'rxjs';\r\nimport { ValidatorsApp } from 'src/app/demo-lib/validatosapp';\r\n\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'form-normal',\r\n  template: ` \r\n  <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\" >\r\n      <div class=\"flex flex-row\">\r\n      <app-number-field [name]=\"'number field'\" [label]=\"'Number field'\" [value]=\"10\" class=\"w-6\"></app-number-field>\r\n      <app-number-field [name]=\"'number field_other'\" [label]=\"'Number field'\" [value]=\"50\" class=\"w-6\"></app-number-field>\r\n       <app-text-field [name]=\"'text-group-other'\" [label]=\"'text test other'\" class=\"w-6\"></app-text-field>\r\n       <app-email-field [name]=\"'email'\" [label]=\"'Email *'\"></app-email-field>\r\n            \r\n      </div>\r\n    </ng-container>\r\n  </app-form>\r\n  `  \r\n})\r\nexport default class FormFieldsNormalComponent {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$!: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n  @Output()\r\n  onAccept = new EventEmitter();\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n   \r\n         \r\n    }\r\n \r\n  \r\n    \r\n   accept(data:any){\r\n      console.log('passsssssssssss accept',data)\r\n      this.onAccept.emit(data)\r\n    }\r\n\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PeriodicElement-1"
        },
        {
            "name": "PeriodicElement",
            "id": "interface-PeriodicElement-a38959a01cb1b18eecec604b1f1eafe7db5ceadeb92ff2c2beffb26429fd00a15e7922ab33f6bc3fbe19230230e42c723b3a6a63c0001a8f7162322a57caeb62-2",
            "file": "src/stories/library/formfields.selects.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable, tap, map, delay } from 'rxjs';\r\nimport { ValidatorsApp } from 'src/app/demo-lib/validatosapp';\r\n\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` \r\n  <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\" >\r\n      <div class=\"flex flex-row\">\r\n     \r\n              <app-text-field [name]=\"'text-group-other-3'\" [label]=\"'text test other 3'\" class=\"w-6\" MatField></app-text-field>\r\n               <app-select-field\r\n                [name]=\"'myselect'\"\r\n                [label]=\"'My select *'\"\r\n                [listItems]=\"[\r\n                  { value: '1', desc: 'desc 1' },\r\n                  { value: '2', desc: 'desc 2' },\r\n                  { value: '3', desc: 'desc 3' }\r\n                ]\"\r\n                (onChange)=\"updateData($event)\"\r\n                [validations]=\"validations\"\r\n                MatField\r\n                class=\"w-6\"\r\n              ></app-select-field>\r\n              <app-select-field\r\n                [name]=\"'myselect2'\"\r\n                [label]=\"'My select 2 *'\"\r\n                [listItems]=\"dataSelect$ | async\"\r\n                [value]=\"'22'\"\r\n                (onChange)=\"valueSelect = $event\"\r\n                MatField\r\n                class=\"w-6\"\r\n              ></app-select-field> \r\n      </div>\r\n    </ng-container>\r\n  </app-form>\r\n  `  \r\n})\r\nexport default class FormFieldsSelectsComponent {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n  @Output()\r\n  onAccept = new EventEmitter();\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n      this.dataSelect$= this.subject.pipe(\r\n        tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(2000)\r\n      ) as Observable<Item[]>;\r\n         \r\n    }\r\n \r\n  \r\n    \r\n   accept(data:any){\r\n      console.log('passsssssssssss accept',data)\r\n      this.onAccept.emit(data)\r\n    }\r\n\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "PeriodicElement-2"
        },
        {
            "name": "State",
            "id": "interface-State-449ec4e5d49e213649c795a1ba3accbd502ffa7e48a7dcf6ce7e9fb2830ab3449fb4f51eb48f79b263d8155a10bc8d64a46b95ed70eb6c73732d88d9569c9236",
            "file": "src/app/store/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  ActionReducerMap, MetaReducer\r\n} from '@ngrx/store';\r\nimport { environment } from '../../../environments/environment';\r\nimport * as fromLoading from './loading.reducer';\r\nimport * as fromError from './error.reducer';\r\n\r\nexport interface State {\r\n  loading:fromLoading.State,\r\n  error: fromError.StateError\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  loading: fromLoading.reducer,\r\n  error: fromError.reducer\r\n};\r\n\r\n\r\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromError.StateError",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromLoading.State",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-f2e82edbe3654fbc165ff0805c4c9ad40bd48331db9a1b35d512dc4bfc5a2057dbdcd1d9da7b7c1cfc560524fe95ace391f3de8a56ee83573115ca082f326c50-1",
            "file": "src/app/store/reducers/loading.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\r\nimport * as LoadingActions from '../actions/loading.actions';\r\n\r\nexport const loadingFeatureKey = 'loading';\r\n\r\nexport type LoadingInfo={\r\n  actionSource: string, idGroupLoading: string,   idLoading?: string\r\n} ;\r\n\r\nexport interface State {\r\n  stack: LoadingInfo[]\r\n}\r\n\r\nexport const initialState: State = {\r\n  stack:[]\r\n};\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n  on(LoadingActions.showLoading, (state, action:any) => {\r\n    const inf= state.stack.find(l=> l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading )\r\n    if(!inf){\r\n      return  {stack: [...state.stack,{idLoading:action.idLoading, idGroupLoading: action.idGroupLoading, actionSource: action.actionSource} ]}\r\n    }\r\n    return {...state};\r\n  }),\r\n  on(LoadingActions.hideLoading, (state, action) => {\r\n      return  {stack: state.stack.filter(l=> !(l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading))}\r\n     }),\r\n\r\n);\r\n",
            "properties": [
                {
                    "name": "stack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoadingInfo[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "StateComments",
            "id": "interface-StateComments-a73779b2753b4ad0b0f5f507e1d153c0ee05104bd31340328e3d7503f9e42dc0715101dcfaaadef1c24121e476975e73e479264e470908c48fbc1dddf41f2016",
            "file": "src/app/posts/store/reducers/comments.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { on } from '@ngrx/store';\r\nimport { createReducerList, StateList } from 'src/app/services/base/reducer.list';\r\nimport { Comment } from '../../models/comment';\r\nimport * as CommentsActions from '../actions/comments.actions';\r\n\r\nexport const postsFeatureKey = 'posts';\r\n\r\n\r\nexport interface StateComments extends StateList<Comment>{\r\n  extra:object;\r\n}\r\n\r\n\r\nexport const initialState: StateComments = {\r\n  extra:{\r\n    data:'Hola'\r\n  },\r\n  data: [],\r\n  loading:false,\r\n  filterListInfo: {\r\n    page: {\r\n      pageSize: 4,\r\n      pageIndex: 1\r\n    }\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nexport const reducer = createReducerList(initialState,CommentsActions.loadComments,CommentsActions.loadCommentssSuccess,CommentsActions.loadCommentssFailure,\r\n  on(CommentsActions.extraComments, (state:any, action) => ({...state,extra:action.data}))  \r\n  );\r\n  \r\n\r\n\r\n// createReducer(\r\n//   initialState,\r\n\r\n//   on(CommentsActions.loadComments, state => ({...state,loading:true})),\r\n//   on(CommentsActions.loadCommentssSuccess, (state, action) => ({...state,comments:[... action.data],filterListInfo:getFilterListInfo(action),loading:false})),\r\n//   on(CommentsActions.loadCommentssFailure, (state, action) => state),\r\n\r\n// );\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "extra",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "StateList"
        },
        {
            "name": "StateError",
            "id": "interface-StateError-e58091a18b39048ea1e48fe5a8e085a0496b1ae8d10223eb8c6bb79ea72408041a0225d9e48d5517fa11f6afd2ecb7e381bc551d583d3aa069150adf87cc2d17",
            "file": "src/app/store/reducers/error.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { state } from '@angular/animations';\r\nimport { Action, createReducer, on } from '@ngrx/store';\r\nimport * as ErrorActions from '../actions/error.actions';\r\n\r\nexport const errorFeatureKey = 'error';\r\n\r\nexport interface StateError {\r\n  error?: any;\r\n}\r\n\r\nexport const initialState: StateError = {\r\n  \r\n};\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n  on(ErrorActions.errorGeneral, (state, {error}) => ({...state,error })),\r\n);\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StateList",
            "id": "interface-StateList-603a506165bf5a182112a3ac20fecd5e4a9069d1a4fc8dc057bab3d9be8cb59b12cce108fb153f2cd58f3e58d6833063271dc312f71b3fabc0f7fbf48f2be440",
            "file": "src/app/services/base/reducer.list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from \"@ngrx/store\";\r\nimport { FilterListInfo, LoadInfoSuccces } from \"../models/filter.model\";\r\n\r\n\r\n\r\nexport interface StateList<T =any> {\r\n    data: T[];\r\n    loading:boolean;\r\n    filterListInfo:FilterListInfo;\r\n  }\r\n\r\n\r\nfunction getFilterListInfo(action: LoadInfoSuccces): FilterListInfo {\r\n    return {\r\n      filter: action.filter,\r\n      order: action.sortInfo,\r\n      page: {\r\n        pageIndex: action.pageRequest.pageIndex, \r\n        pageSize: action.pageRequest.pageSize,\r\n        requestLink: action.pageRequest.requestLink,\r\n        linkInfo: {\r\n          linkFisrt: getUrlLink(action.link, 'first'),\r\n          linkNext: getUrlLink(action.link, 'next'),\r\n          linkLast: getUrlLink(action.link, 'last'),\r\n          linkPrev: getUrlLink(action.link, 'prev'),\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   *\r\n   * @param link Helper to get partial url\r\n   * @param arg1\r\n   */\r\n   function getUrlLink(link: string |undefined|null, key: string): string |undefined|null{\r\n    let url;\r\n    if (!link) {\r\n      return null;\r\n    }\r\n    link.split(',').forEach((cad) => {\r\n      if (cad.split(';')[1].includes(`rel=\"${key}\"`)) {\r\n        url = cad.split(';')[0].replace('<', '').replace('>', '').trim();\r\n      }\r\n    });\r\n    return url;\r\n  }\r\n  \r\n\r\n\r\nexport function createReducerList<T extends StateList>(initS:T,loadAction:any,loadSuccess:any,loadFailure:any,...ons:any[]){\r\n    return createReducer(\r\n      initS,  \r\n      on(loadAction, state => ({...state,loading:true})),\r\n      on(loadSuccess, (state, action:LoadInfoSuccces) => ({...state,data:[... action.data],filterListInfo:getFilterListInfo(action),loading:false})),\r\n      on(loadFailure, (state, action) => state),\r\n      ...ons\r\n    );\r\n  }\r\n\r\n\r\n  ",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "filterListInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterListInfo",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AbstractListNgRxService",
            "id": "injectable-AbstractListNgRxService-8f388dbf49a5b3b0363c8c32e5d57444c4d6a2bf6179ab9f219d3bdc92986cf79361abe2fb70dd632111b2735406d1723ca1a7e79758d48936d0bd6b79eaba54",
            "file": "src/app/services/base/abstractNgRx.service.ts",
            "properties": [
                {
                    "name": "actions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "createEffectFilter",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "createEffectLoad",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "createEffectLoadInit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "createEffectPagination",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "createEffectSort",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getLink",
                    "args": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined | null",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Actions, concatLatestFrom, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { TypeEventPagination } from \"my-lib-display\";\r\nimport { catchError, concatMap, map, Observable, of } from \"rxjs\";\r\nimport { FilterListInfo, IResponseData, ISelectorsList, LoadInfo, LoadInfoSuccces, PageInfo, SortInfo, xsdLoadInfoSuccess } from \"../models/filter.model\";\r\nimport { rxZod } from '../utils/zodrx';\r\n\r\n\r\n@Injectable()\r\nexport  class AbstractListNgRxService  implements OnDestroy {\r\n  protected store!: Store;\r\n  protected actions$!: Actions;\r\n\r\n  createEffectLoad = (actionLoad: any, actionLoadSuccess: any, actionLoadFailiure: any, fn: (loadInfo: LoadInfo) => Observable<IResponseData>) => createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(actionLoad),\r\n      concatMap((action: LoadInfo) =>\r\n        /** An EMPTY observable only emits completion. Replace with your own observable API request */\r\n        //this.postsService.getPosts(action.filterPost,action.sortInfo,action.pageRequest)\r\n        fn(action)\r\n          .pipe(\r\n            map((data: IResponseData)=>({ data: data.data, link: data.link, filter: action.filter, sortInfo: action.sortInfo, pageRequest: action.pageRequest } as LoadInfoSuccces)),\r\n            rxZod(xsdLoadInfoSuccess),\r\n            map((loadInfoSucces:LoadInfoSuccces) => actionLoadSuccess(loadInfoSucces)),\r\n            catchError(error => of(actionLoadFailiure({ error })))\r\n            )\r\n      )\r\n    );\r\n  });\r\n\r\n  createEffectLoadInit = (actionLoadInit: any[], actionLoad: any, selectorsList :ISelectorsList) => createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(...actionLoadInit),\r\n      concatMap((action) =>\r\n        /** An EMPTY observable only emits completion. Replace with your own observable API request */\r\n        of(action).pipe(\r\n          concatLatestFrom(action => this.store.select(selectorsList.selectFilterListRequest)),\r\n          map(([action, filterList]: [any, any]) => actionLoad({\r\n            ...filterList\r\n          } as LoadInfo)),\r\n        ))\r\n    );\r\n  });\r\n\r\n  createEffectFilter = (actionFilter: any, actionLoad: any, selectorsList :ISelectorsList) => createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(actionFilter),\r\n      concatMap((action:{filter:any}) =>\r\n        /** An EMPTY observable only emits completion. Replace with your own observable API request */\r\n        of(action).pipe(\r\n          concatLatestFrom(action => this.store.select(selectorsList.selectFilterListRequest)),\r\n          map(([action, filterList]) => actionLoad({\r\n            ...filterList as any,\r\n            filter: action.filter,\r\n          } as LoadInfo)),\r\n        ))\r\n    );\r\n  });\r\n\r\n  createEffectPagination = (actionPagination: any, actionLoad: any, selectorsList :ISelectorsList) => createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(actionPagination as any),\r\n      concatMap((action: {typeEventPagination:TypeEventPagination}) =>\r\n        /** An EMPTY observable only emits completion. Replace with your own observable API request */\r\n        of(action).pipe(\r\n          concatLatestFrom(() => this.store.select(selectorsList.selectFilterListInfo )) as any,\r\n          map(([action, filterList]:[action:{typeEventPagination:TypeEventPagination},filterList:FilterListInfo]) => actionLoad({\r\n            filter: filterList.filter,\r\n            sortInfo: filterList.order,\r\n            pageRequest: {\r\n              requestLink: this.getLink(action.typeEventPagination, filterList.page),\r\n              pageSize: filterList?.page?.pageSize,\r\n              pageIndex: filterList?.page?.pageIndex\r\n            }\r\n          } as LoadInfo)),\r\n        ))\r\n    );\r\n  });\r\n\r\n  createEffectSort = (actionSort: any , actionLoad: any, selectorsList :ISelectorsList) => createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(actionSort as any),\r\n      concatMap((action: {sortInfo:SortInfo}) =>\r\n        /** An EMPTY observable only emits completion. Replace with your own observable API request */\r\n        of(action).pipe(\r\n          concatLatestFrom(action => this.store.select(selectorsList.selectFilterListRequest)),\r\n          map(([action, filterList] ) => actionLoad({\r\n            ...filterList as any,\r\n            sortInfo: action.sortInfo\r\n          } as LoadInfo)),\r\n        ))\r\n    );\r\n  });\r\n\r\n\r\n\r\n\r\n  protected getLink(event: TypeEventPagination, pageInfo?: PageInfo ): string | undefined | null{\r\n    switch (event) {\r\n      case 'first':\r\n        return pageInfo?.linkInfo?.linkFisrt;\r\n      case 'last':\r\n        return pageInfo?.linkInfo?.linkLast;\r\n      case 'prev':\r\n        return pageInfo?.linkInfo?.linkPrev;\r\n      case 'next':\r\n        return pageInfo?.linkInfo?.linkNext;\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //constructor(protected name: string) { super(name) } \r\n\r\n\r\n\r\n  ngOnDestroy(): void {\r\n   // this.console.debug('Destroy service')\r\n  }\r\n\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "AbstractLoadingEffects",
            "id": "injectable-AbstractLoadingEffects-3c079ee0fad1706438b7a2ff5403a74b4306fef5ad3a42dbe1d95f3a4c349fcf5e2436fa973472f34652d8bd28aed88d5daa27a91d7421614efbcd9374fa445b",
            "file": "src/app/services/base/abstractNgRx.loading.ts",
            "properties": [
                {
                    "name": "createEffectLoadingHide",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "createEffectLoadingShow",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { Action } from '@ngrx/store';\r\nimport { catchError, concatMap, filter, map, of } from \"rxjs\";\r\nimport * as LoadingActions from '../../store/actions/loading.actions';\r\n\r\n\r\nexport type ActionsLoading=  {actionType:string,fnLoadingInfo:(action:any)=> ActionLoadingInfo}[]\r\n\r\nexport type ActionLoadingInfo={\r\n  type: 'show' | 'hide';\r\n  idGroupLoading?: string;\r\n  idLoading?: string; \r\n} \r\n\r\nfunction getActions(actionsLoading:ActionsLoading){\r\n   return actionsLoading.map(ac=> ac.actionType);\r\n}\r\n\r\nfunction getLoadingInfo(action:Action,actionsLoading:ActionsLoading):ActionLoadingInfo{\r\n  return (actionsLoading.find(ac=> ac.actionType===action.type) as {actionType:string,fnLoadingInfo:(action:any)=> ActionLoadingInfo}).fnLoadingInfo(action);\r\n}\r\n\r\n@Injectable()\r\nexport  class AbstractLoadingEffects {\r\n\r\n\r\n  createEffectLoadingShow = (actionsLoading:ActionsLoading) => createEffect(() => {\r\n    return this.actions$.pipe( \r\n      ofType(...getActions(actionsLoading)),\r\n      concatMap((action) =>\r\n        of(getLoadingInfo(action,actionsLoading)).pipe(\r\n          filter(loadingInfo=>loadingInfo.type==='show'),\r\n          map(loadingInfo => LoadingActions.showLoading({actionSource:action.type,idGroupLoading:loadingInfo.idGroupLoading,idLoading:loadingInfo.idLoading })),\r\n          catchError(error => of(LoadingActions.loadLoadingsFailure({ error }))))\r\n      )\r\n    );\r\n  });\r\n\r\n\r\n  createEffectLoadingHide = (actionsLoading:ActionsLoading) => createEffect(() => {\r\n    return this.actions$.pipe( \r\n      ofType(...getActions(actionsLoading)),\r\n      concatMap((action) =>\r\n        of(getLoadingInfo(action,actionsLoading)).pipe(\r\n          filter(loadingInfo=>loadingInfo.type==='hide'),\r\n          map(loadingInfo => LoadingActions.hideLoading({actionHide:action.type,idGroupLoading:loadingInfo.idGroupLoading,idLoading:loadingInfo.idLoading })),\r\n          catchError(error => of(LoadingActions.loadLoadingsFailure({ error }))))\r\n      )\r\n    );\r\n  });\r\n\r\n  \r\n\r\n  constructor(private actions$: Actions) {}\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AbstractService",
            "id": "injectable-AbstractService-d76ffeebc12e645ebab40c55a23bdcef9caf0e6d9ca694be82aea8064317dd6ec0829d5b029ffc2f64a704ff918210b83534745fdae369dd4b3eb1954a49670b",
            "file": "src/app/services/base/abstract.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\r\n\r\n@Injectable()\r\nexport abstract class AbstractService implements OnDestroy{\r\n\r\n  //constructor(protected name: string) { super(name) } \r\n\r\n  ngOnDestroy(): void {\r\n    console.debug('Destroy service')\r\n  }\r\n\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "AppEffects",
            "id": "injectable-AppEffects-4c653d8ee0aee14118d93aca4278b05bf34dbfa5192fe7ab0ee83d5ed8a77fdbc4119a023f9dba0c680c8c96460e374acb619d78bfa59486db17e93487db399c",
            "file": "src/app/store/effects/app.effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect } from '@ngrx/effects';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class AppEffects {\r\n\r\n\r\n\r\n  constructor(private actions$: Actions) {}\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CommentsEffects",
            "id": "injectable-CommentsEffects-6dd43501bbbde3a24e6a2c8e12d99c42532e83d6ab68cd6e64147161206297ea0004dca629e0e0fc63122b2c373303181863e4aa0103c637c31de1a96ccc7325",
            "file": "src/app/posts/store/effects/comments.effects.ts",
            "properties": [
                {
                    "name": "addComment$",
                    "defaultValue": "createEffect(() => {\r\n      return this.actions$.pipe(\r\n        ofType(CommentsActions.addComment),\r\n        concatMap((action) =>\r\n          this.commentsService.addEntity(action.data)\r\n            .pipe(\r\n              //rxZod(xsdLoadInfoSuccess),\r\n              map(() => CommentsActions.addCommentSuccess()),\r\n              catchError(error => of(CommentsActions.addCommentFailure({ error })))\r\n              )\r\n        )\r\n      );\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "addDialogComment$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(CommentsActions.addDialogComment),\r\n      concatMap((action) =>\r\n        this.dialogService.openDialog(FormCommentComponent).pipe(\r\n          rxlog('Data Dialog closed'),\r\n          filter<any>(data=> !!data),\r\n          map(({id,comment,author}:Comment) => CommentsActions.addComment({data:{id,comment,author}}))\r\n        )\r\n      ))    \r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "editDialogComment$",
                    "defaultValue": "createEffect(() => {\r\n      return this.actions$.pipe(\r\n        ofType(CommentsActions.editDialogComment),\r\n        concatMap((action) =>\r\n          this.dialogService.openDialog(FormCommentComponent,action.data,((comp:ComponentRef<FormCommentComponent>,refDialog)=> {\r\n            consoleApp(this).log('comp Inside dialog ***',comp)\r\n           comp.instance.onChange.pipe(finalize(()=>consoleApp(this).log('obs in CLOSED******') ),takeUntil(refDialog.afterClosed())).subscribe((val)=> comp.instance.dataFormInput= {...comp.instance.dataFormInput,comment: val+'-------'  } )              \r\n          })).pipe(\r\n            rxlog('Data Dialog closed'),\r\n            filter<any>(data=> !!data),\r\n            map(({id,comment,author}:Comment) => CommentsActions.updateComment({data:{id,comment,author}}))\r\n          )\r\n        ))    \r\n      })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "filterComments$",
                    "defaultValue": "this.createEffectFilter(CommentsActions.filterComments, CommentsActions.loadComments, selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "loadComments$",
                    "defaultValue": "this.createEffectLoad(CommentsActions.loadComments, CommentsActions.loadCommentssSuccess, CommentsActions.loadCommentssFailure,\r\n    ({ filter, sortInfo, pageRequest }: LoadInfo<FilterComment>) => this.commentsService.getComments(filter, sortInfo, pageRequest))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loadInitComments$",
                    "defaultValue": "this.createEffectLoadInit([CommentsActions.loadInitComments,CommentsActions.addCommentSuccess,CommentsActions.updateCommentSuccess], CommentsActions.loadComments, selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "paginationComments$",
                    "defaultValue": "this.createEffectPagination(CommentsActions.paginationComments, CommentsActions.loadComments, selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "sortComments$",
                    "defaultValue": "this.createEffectSort(CommentsActions.sortComments, CommentsActions.loadComments, selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "updateComment$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n          ofType(CommentsActions.updateComment),\r\n          concatMap((action) =>\r\n            this.commentsService.updateEntity(action.data)\r\n              .pipe(\r\n                //rxZod(xsdLoadInfoSuccess),\r\n                map(() => CommentsActions.updateCommentSuccess()),\r\n                catchError(error => of(CommentsActions.updateCommentFailure({ error })))\r\n                )\r\n          )\r\n        );\r\n      })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "actions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectFilter",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectLoad",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectLoadInit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectPagination",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectSort",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getLink",
                    "args": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined | null",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ComponentRef, Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { DialogService } from 'my-lib-display';\r\nimport { catchError, concatMap, filter, finalize, interval, map, of, takeUntil } from 'rxjs';\r\nimport { AbstractListNgRxService } from 'src/app/services/base/abstractNgRx.service';\r\nimport { LoadInfo } from 'src/app/services/models/filter.model';\r\nimport { consoleApp } from 'src/app/services/utils/logger';\r\nimport { rxlog } from 'src/app/services/utils/opersrx';\r\nimport { FormCommentComponent } from '../../components/form-comment/form-comment.component';\r\nimport { Comment, FilterComment } from '../../models/comment';\r\nimport { CommentsService } from '../../services/comments.service';\r\nimport * as CommentsActions from '../actions/comments.actions';\r\nimport { selectorsList } from '../selectors/comments.selectors';\r\n\r\n@Injectable()\r\nexport class CommentsEffects extends AbstractListNgRxService {\r\n\r\n\r\n\r\n  loadComments$ = this.createEffectLoad(CommentsActions.loadComments, CommentsActions.loadCommentssSuccess, CommentsActions.loadCommentssFailure,\r\n    ({ filter, sortInfo, pageRequest }: LoadInfo<FilterComment>) => this.commentsService.getComments(filter, sortInfo, pageRequest));\r\n\r\n  loadInitComments$ = this.createEffectLoadInit([CommentsActions.loadInitComments,CommentsActions.addCommentSuccess,CommentsActions.updateCommentSuccess], CommentsActions.loadComments, selectorsList);\r\n  filterComments$ = this.createEffectFilter(CommentsActions.filterComments, CommentsActions.loadComments, selectorsList);\r\n  paginationComments$ = this.createEffectPagination(CommentsActions.paginationComments, CommentsActions.loadComments, selectorsList);\r\n  sortComments$ = this.createEffectSort(CommentsActions.sortComments, CommentsActions.loadComments, selectorsList);\r\n\r\n  addDialogComment$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(CommentsActions.addDialogComment),\r\n      concatMap((action) =>\r\n        this.dialogService.openDialog(FormCommentComponent).pipe(\r\n          rxlog('Data Dialog closed'),\r\n          filter<any>(data=> !!data),\r\n          map(({id,comment,author}:Comment) => CommentsActions.addComment({data:{id,comment,author}}))\r\n        )\r\n      ))    \r\n    });\r\n\r\n  addComment$ = createEffect(() => {\r\n      return this.actions$.pipe(\r\n        ofType(CommentsActions.addComment),\r\n        concatMap((action) =>\r\n          this.commentsService.addEntity(action.data)\r\n            .pipe(\r\n              //rxZod(xsdLoadInfoSuccess),\r\n              map(() => CommentsActions.addCommentSuccess()),\r\n              catchError(error => of(CommentsActions.addCommentFailure({ error })))\r\n              )\r\n        )\r\n      );\r\n    });\r\n    \r\n    editDialogComment$ = createEffect(() => {\r\n      return this.actions$.pipe(\r\n        ofType(CommentsActions.editDialogComment),\r\n        concatMap((action) =>\r\n          this.dialogService.openDialog(FormCommentComponent,action.data,((comp:ComponentRef<FormCommentComponent>,refDialog)=> {\r\n            consoleApp(this).log('comp Inside dialog ***',comp)\r\n           comp.instance.onChange.pipe(finalize(()=>consoleApp(this).log('obs in CLOSED******') ),takeUntil(refDialog.afterClosed())).subscribe((val)=> comp.instance.dataFormInput= {...comp.instance.dataFormInput,comment: val+'-------'  } )              \r\n          })).pipe(\r\n            rxlog('Data Dialog closed'),\r\n            filter<any>(data=> !!data),\r\n            map(({id,comment,author}:Comment) => CommentsActions.updateComment({data:{id,comment,author}}))\r\n          )\r\n        ))    \r\n      });\r\n  \r\n      updateComment$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n          ofType(CommentsActions.updateComment),\r\n          concatMap((action) =>\r\n            this.commentsService.updateEntity(action.data)\r\n              .pipe(\r\n                //rxZod(xsdLoadInfoSuccess),\r\n                map(() => CommentsActions.updateCommentSuccess()),\r\n                catchError(error => of(CommentsActions.updateCommentFailure({ error })))\r\n                )\r\n          )\r\n        );\r\n      });\r\n      \r\n   \r\n\r\n\r\n  constructor(protected override actions$: Actions, protected override store: Store, private commentsService: CommentsService, private dialogService: DialogService) {\r\n    super()\r\n  }\r\n\r\n}\r\n\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commentsService",
                        "type": "CommentsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commentsService",
                        "type": "CommentsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractListNgRxService",
            "type": "injectable"
        },
        {
            "name": "CommentsService",
            "id": "injectable-CommentsService-202658c09224228bfad13497f9b93d20fdafabc527edffdff0c690dd6e5fbd0dd0f53ff363ad03fa78bb848ceb10e09b780fd1c1864f7b5d4a2e32170ddf46a5",
            "file": "src/app/posts/services/comments.service.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getComments",
                    "args": [
                        {
                            "name": "filterComment",
                            "type": "FilterComment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResponseData<Comment>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterComment",
                            "type": "FilterComment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "deleteEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "getEntities",
                    "args": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [
                        "F"
                    ],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "updateEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { consoleApp, NameLog } from 'src/app/services/utils/logger';\r\nimport { NamesLog } from 'src/app/services/utils/names-classes';\r\nimport { rxlog, rxlogth } from 'src/app/services/utils/opersrx';\r\nimport { rxZod } from 'src/app/services/utils/zodrx';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AbstractEntityService } from '../../services/base/abstract.entity.service';\r\nimport { IResponseData, PageRequest, SortInfo } from '../../services/models/filter.model';\r\nimport { Comment, CommentRespXsd, FilterComment } from '../models/comment';\r\n\r\n\r\n@Injectable()\r\n@NameLog(NamesLog.CommentsService+'-NAME-LOG')\r\nexport class CommentsService extends AbstractEntityService<Comment> {\r\n  constructor(injector: Injector) {\r\n    super(injector, environment.urlHostApi, '/comments');\r\n  }\r\n\r\n  getComments(filterComment:FilterComment,sortInfo:SortInfo,pageRequest:PageRequest): Observable<IResponseData<Comment>> {\r\n    \r\n    //consoleApp(this).log('Enter get Comments');\r\n    return this.getEntities(sortInfo,pageRequest, (params) => {\r\n      if (filterComment?.author) {\r\n        params = params.append('author_like', filterComment.author);\r\n      }\r\n      if (filterComment?.comment) {\r\n        params = params.append('comment_like', filterComment.comment);\r\n      }\r\n      if (filterComment?.id) {\r\n        params = params.append('id_like', filterComment.id);\r\n      }\r\n\r\n      return params;\r\n    }).pipe(\r\n    //  rxlogth(this,'info')('Data from get comments other'),      \r\n      rxZod(CommentRespXsd),\r\n      map((resp) => ({ link: resp.headers.get('link'), data: resp.body })));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractEntityService",
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-918d66959f6e5b68fd0cf067d1e97e2e4964c59e1ebccb1463e53973906f06156a2cd5363d7589606b89da10d09a99d9904bfa94435ce78d54086026b14b8276",
            "file": "projects/my-lib-display/src/lib/material/dialog/dialog.service.ts",
            "properties": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "compInsideDialog",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "fnComp",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "compInside",
                                    "type": "ComponentRef<any>",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "dialogRef",
                                    "type": "MatDialogRef<any | any>",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "compDialog",
                            "type": "ComponentType<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "DialogComponent"
                        },
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<S>",
                    "typeParameters": [
                        "T",
                        "S"
                    ],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "compInsideDialog",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fnComp",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [
                                {
                                    "name": "compInside",
                                    "type": "ComponentRef<any>",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "dialogRef",
                                    "type": "MatDialogRef<any | any>",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "compDialog",
                            "type": "ComponentType<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "DialogComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, ViewContainerRef, ComponentFactoryResolver, ComponentRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ComponentType } from '@angular/cdk/portal';\r\nimport { AbstractDialogComponent } from './abstract-dialog/abstract-dialog.component';\r\nimport { last, Observable } from 'rxjs';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  constructor(public dialog: MatDialog) {}\r\n\r\n  openDialog<T extends AbstractDialogComponent, S>(\r\n    compInsideDialog : ComponentType<T>,\r\n    data?: object,\r\n    fnComp?:(compInside: ComponentRef<any>,dialogRef:MatDialogRef<any,any>)=>void,\r\n    compDialog: ComponentType<any>= DialogComponent,\r\n    viewContainerRef?: ViewContainerRef,\r\n    //componentFactoryResolver?: ComponentFactoryResolver\r\n  ): Observable<S> {\r\n    \r\n    const dialogRef = this.dialog.open(compDialog, {\r\n      data:{\r\n        compInsideDialog,\r\n        data\r\n      },\r\n      viewContainerRef      \r\n    });\r\n    //fnComp((dialogRef.componentInstance) as DialogComponent).compInside) as  ComponentRef<any>);\r\n\r\n    const dialogComp:DialogComponent= dialogRef.componentInstance as DialogComponent;\r\n    \r\n    dialogRef.afterOpened().pipe(last()).\r\n    subscribe(()=> fnComp && fnComp(dialogComp.compInside as ComponentRef<T>,dialogRef)\r\n    )\r\n\r\n    return dialogRef.afterClosed();\r\n    //dialogRef.componentInstance.data\r\n    // dialogRef.afterClosed().subscribe((result) => {\r\n    //   console.log(`Dialog result: ${result}`);\r\n    // });\r\n  }\r\n\r\n\r\n  // openDialogRef<T extends AbstractDialogComponent, S>(\r\n  //   compDialog: ComponentType<T>,\r\n  //   data?: object,\r\n  //   viewContainerRef?: ViewContainerRef,\r\n  //   componentFactoryResolver?: ComponentFactoryResolver\r\n  // ): MatDialogRef<T>{\r\n  //   const dialogRef = this.dialog.open(compDialog, {\r\n  //     data,\r\n  //     viewContainerRef,\r\n  //     componentFactoryResolver,\r\n  //   });\r\n  //   return dialogRef;\r\n  //   //dialogRef.componentInstance.data\r\n  //   // dialogRef.afterClosed().subscribe((result) => {\r\n  //   //   console.log(`Dialog result: ${result}`);\r\n  //   // });\r\n  // }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ErrorEffects",
            "id": "injectable-ErrorEffects-ace366a04846da53d8c74158e59cd46eb970913eefc9237d3d82e82c00ba37c99b305239520e6e840116f756235646d66a77540b39dce2bf4de2049519b2cf55",
            "file": "src/app/store/effects/error.effects.ts",
            "properties": [
                {
                    "name": "convertErrors$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe( \r\n      filter((action:any)=> !!action.error && !action.general),\r\n      concatMap((action:ErrorActions.ErrorAction & Action) =>\r\n        of(action).pipe(\r\n          map(action => ErrorActions.errorGeneral({error:action.error})),\r\n          )\r\n      )\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "generaErrors$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe( \r\n      ofType(ErrorActions.errorGeneral),\r\n      concatMap((action) =>\r\n        of(action).pipe(\r\n          tap(action=> {\r\n            // handle error,\r\n            // or propagate error handle error Angular ,throw action.error\r\n             this.router.navigate(['error'])\r\n          }),\r\n          //catchError(error => of(ErrorActions.loadErrorsFailure({ error }))\r\n          )\r\n      )\r\n    );\r\n  }, { dispatch: false })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, map, concatMap, filter, tap } from 'rxjs/operators';\r\nimport { Observable, EMPTY, of } from 'rxjs';\r\n\r\nimport * as ErrorActions from '../actions/error.actions';\r\nimport { Action } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class ErrorEffects {\r\n\r\n  convertErrors$ = createEffect(() => {\r\n    return this.actions$.pipe( \r\n      filter((action:any)=> !!action.error && !action.general),\r\n      concatMap((action:ErrorActions.ErrorAction & Action) =>\r\n        of(action).pipe(\r\n          map(action => ErrorActions.errorGeneral({error:action.error})),\r\n          )\r\n      )\r\n    );\r\n  });\r\n\r\n  // handle error general\r\n  generaErrors$ = createEffect(() => {\r\n    return this.actions$.pipe( \r\n      ofType(ErrorActions.errorGeneral),\r\n      concatMap((action) =>\r\n        of(action).pipe(\r\n          tap(action=> {\r\n            // handle error,\r\n            // or propagate error handle error Angular ,throw action.error\r\n             this.router.navigate(['error'])\r\n          }),\r\n          //catchError(error => of(ErrorActions.loadErrorsFailure({ error }))\r\n          )\r\n      )\r\n    );\r\n  }, { dispatch: false });\r\n\r\n\r\n\r\n\r\n  constructor(private actions$: Actions,private router:Router) {}\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GlobalErrorHandler",
            "id": "injectable-GlobalErrorHandler-1acd41d89a5fb94881bb908e24f820ac01f1d4b77e5e87be622cc2e203e1be45f0f81808628e79ff1a9b97c43950d7c2d49fb6e7304ca179c0cf805aeb9a8d19",
            "file": "src/app/services/errorHandler.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ErrorHandler, Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { errorHandlerAngular } from \"../store/actions/error.actions\";\r\n\r\n@Injectable()\r\nexport class GlobalErrorHandler implements ErrorHandler {\r\n    handleError(error: any) {\r\n        const store = this.injector.get(Store);\r\n        const router = this.injector.get(Router);\r\n        try {\r\n            store.dispatch(errorHandlerAngular({ error: error.message || error}))\r\n        }\r\n        catch (e) {\r\n            console.error('Error sending store',  e)\r\n        }\r\n        console.error('Erro in handler',error.message, error)\r\n        //router.navigate(['error']);  \r\n    }\r\n    constructor(private injector: Injector) {\r\n\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoadingEffects",
            "id": "injectable-LoadingEffects-c04e67fcba3a5b3d8244e855dc9b0f1a898f49c594bbaac7acd2db42dbbaa5c1a34e45f31d925b4febe919afa141340eb6a8491f75d859915f8f0e164dbdd807",
            "file": "src/app/store/effects/loading.effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions } from '@ngrx/effects';\r\n\r\n\r\n\r\n\r\n@Injectable()\r\nexport class LoadingEffects {\r\n\r\n  \r\n\r\n  constructor(private actions$: Actions) {}\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoadingEffects",
            "id": "injectable-LoadingEffects-cc94621ffe730cd87ac33aa572dcaef2ea00a8bf8f30585e5ecf00015d23fb5c5c9092c265969f1bd59aa118079901f850c56709cac666619806de6b71529ebe-1",
            "file": "src/app/posts/store/effects/loading.effects.ts",
            "properties": [
                {
                    "name": "actionsLoading",
                    "defaultValue": "[\r\n    {actionType:PostsActions.loadPosts.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show', idGroupLoading:'loadPost',idLoading: action.filter?.author})},\r\n    {actionType:PostsActions.loadPostssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide', idGroupLoading:'loadPost', idLoading:action.filter?.author})},\r\n    {actionType:PostsActions.loadPostssFailure.type, fnLoadingInfo: (action)=> ({type: 'hide', idGroupLoading:'loadPost'})},\r\n    // {actionType:CommentsActions.sortComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show' })},\r\n    // {actionType:CommentsActions.loadComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show' })},\r\n    // {actionType:CommentsActions.loadCommentssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide'})},    \r\n    {actionType:CommentsActions.loadComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show', idGroupLoading:'loadComments',idLoading: action.filter?.author})},\r\n    {actionType:CommentsActions.loadCommentssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide', idGroupLoading:'loadComments', idLoading:action.filter?.author})},  \r\n    {actionType:CommentsActions.loadCommentssFailure.type, fnLoadingInfo: (action)=> ({type: 'hide', idGroupLoading:'loadComments'})},   \r\n    {actionType:CommentsActions.queryBegin.type, fnLoadingInfo: (action:any)=> ({type: 'show', idGroupLoading:'querytest', idLoading:action.data})},\r\n    {actionType:CommentsActions.queryEnd.type, fnLoadingInfo: (action:any)=> ({type: 'hide', idGroupLoading:'querytest', idLoading:action.data})}\r\n    \r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionsLoading",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "hideLoadings$",
                    "defaultValue": "this.createEffectLoadingHide(this.actionsLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "showLoadings$",
                    "defaultValue": "this.createEffectLoadingShow(this.actionsLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "createEffectLoadingHide",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "inheritance": {
                        "file": "AbstractLoadingEffects"
                    }
                },
                {
                    "name": "createEffectLoadingShow",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "AbstractLoadingEffects"
                    }
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, map, concatMap, filter } from 'rxjs/operators';\r\nimport { Observable, EMPTY, of } from 'rxjs';\r\n\r\nimport * as LoadingActions from '../../../store/actions/loading.actions';\r\nimport * as PostsActions from '../actions/posts.actions';\r\nimport * as CommentsActions from '../actions/comments.actions';\r\nimport { Action } from '@ngrx/store';\r\nimport { LoadInfo, LoadInfoSuccces } from 'src/app/services/models/filter.model';\r\nimport { AbstractLoadingEffects } from 'src/app/services/base/abstractNgRx.loading';\r\n\r\ntype ActionsLoading=  {actionType:string,fnLoadingInfo:(action:any)=> ActionLoadingInfo}[]\r\n\r\ntype ActionLoadingInfo={\r\n  type: 'show' | 'hide';\r\n  idGroupLoading?: string;\r\n  idLoading?: string; \r\n} \r\n\r\nfunction getActions(actionsLoading:ActionsLoading){\r\n   return actionsLoading.map(ac=> ac.actionType);\r\n}\r\n\r\nfunction getLoadingInfo(action:Action,actionsLoading:ActionsLoading):ActionLoadingInfo{\r\n  return (actionsLoading.find(ac=> ac.actionType===action.type) as any).fnLoadingInfo(action);\r\n}\r\n\r\n@Injectable()\r\nexport class LoadingEffects extends AbstractLoadingEffects{\r\n\r\n  actionsLoading:ActionsLoading=[\r\n    {actionType:PostsActions.loadPosts.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show', idGroupLoading:'loadPost',idLoading: action.filter?.author})},\r\n    {actionType:PostsActions.loadPostssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide', idGroupLoading:'loadPost', idLoading:action.filter?.author})},\r\n    {actionType:PostsActions.loadPostssFailure.type, fnLoadingInfo: (action)=> ({type: 'hide', idGroupLoading:'loadPost'})},\r\n    // {actionType:CommentsActions.sortComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show' })},\r\n    // {actionType:CommentsActions.loadComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show' })},\r\n    // {actionType:CommentsActions.loadCommentssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide'})},    \r\n    {actionType:CommentsActions.loadComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show', idGroupLoading:'loadComments',idLoading: action.filter?.author})},\r\n    {actionType:CommentsActions.loadCommentssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide', idGroupLoading:'loadComments', idLoading:action.filter?.author})},  \r\n    {actionType:CommentsActions.loadCommentssFailure.type, fnLoadingInfo: (action)=> ({type: 'hide', idGroupLoading:'loadComments'})},   \r\n    {actionType:CommentsActions.queryBegin.type, fnLoadingInfo: (action:any)=> ({type: 'show', idGroupLoading:'querytest', idLoading:action.data})},\r\n    {actionType:CommentsActions.queryEnd.type, fnLoadingInfo: (action:any)=> ({type: 'hide', idGroupLoading:'querytest', idLoading:action.data})}\r\n    \r\n  ];\r\n\r\n\r\n\r\n  showLoadings$ = this.createEffectLoadingShow(this.actionsLoading);\r\n \r\n  hideLoadings$ = this.createEffectLoadingHide(this.actionsLoading);\r\n\r\n \r\n\r\n}\r\n",
            "extends": "AbstractLoadingEffects",
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LoadingEffects-1"
        },
        {
            "name": "MyLibDisplayService",
            "id": "injectable-MyLibDisplayService-cb1baf34fc133ce9b04e1635c0875f59bb8e3fe796c363a4cec878440e9e179ac81f886df78b13f9538d402dfcc88f3bdf32f2e278a18d82e86f0e3b51cdc442",
            "file": "projects/my-lib-display/src/lib/my-lib-display.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MyLibDisplayService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "MyService",
            "id": "injectable-MyService-95e222fce10b7b311a203c41c2b058c16f5aeb2a4c583bebc249cdf2e3031f07f900f72089ef56af7d2ac4826db9b2251545b3716d3b78647eebfb74fde7763b",
            "file": "src/app/users/my.service.ts",
            "properties": [
                {
                    "name": "dataService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "{ data: string; }",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MyService {\r\n  dataService:any;\r\n\r\n  constructor() { \r\n    this.dataService={\r\n      data:'data from Service'\r\n    }\r\n  }\r\n\r\n  getData(){\r\n    return {\r\n        data:'data from Service XXXXXX'\r\n      }\r\n    \r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "PostsEffects",
            "id": "injectable-PostsEffects-64de2bfbf4682883da84a67774f9e85f4f5418316d77675eedc7dd9bacca428a84d4bd86864cb3cedd07f6939e184d7ad4be919df9bc8bb7fcc4e6d3b5eeece4",
            "file": "src/app/posts/store/effects/posts.effects.ts",
            "properties": [
                {
                    "name": "filterPosts$",
                    "defaultValue": "this.createEffectFilter(PostsActions.filterPosts,PostsActions.loadPosts,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loadInitPosts$",
                    "defaultValue": "this.createEffectLoadInit([PostsActions.loadInitPosts],PostsActions.loadPosts,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loadPosts$",
                    "defaultValue": "this.createEffectLoad(PostsActions.loadPosts,PostsActions.loadPostssSuccess,PostsActions.loadPostssFailure,\r\n    ({filter,sortInfo,pageRequest}:LoadInfo<FilterPost>)=>this.postsService.getPosts(filter,sortInfo,pageRequest)  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "paginationPosts$",
                    "defaultValue": "this.createEffectPagination(PostsActions.paginationPosts,PostsActions.loadPosts,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "sortPosts$",
                    "defaultValue": "this.createEffectSort(PostsActions.sortPosts,PostsActions.loadPosts,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "actions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectFilter",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectLoad",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectLoadInit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectPagination",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectSort",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getLink",
                    "args": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined | null",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { DialogService } from 'my-lib-display';\r\nimport { AbstractListNgRxService } from 'src/app/services/base/abstractNgRx.service';\r\nimport { LoadInfo } from '../../../services/models/filter.model';\r\nimport { FilterPost } from '../../models/models';\r\nimport { PostsService } from '../../services/posts.service';\r\nimport * as PostsActions from '../actions/posts.actions';\r\nimport { selectorsList } from '../selectors/posts.selectors';\r\n\r\n\r\n\r\n\r\n@Injectable()\r\nexport class PostsEffects extends AbstractListNgRxService{\r\n\r\n  \r\n  loadPosts$ = this.createEffectLoad(PostsActions.loadPosts,PostsActions.loadPostssSuccess,PostsActions.loadPostssFailure,\r\n    ({filter,sortInfo,pageRequest}:LoadInfo<FilterPost>)=>this.postsService.getPosts(filter,sortInfo,pageRequest)  )  ;\r\n  loadInitPosts$ = this.createEffectLoadInit([PostsActions.loadInitPosts],PostsActions.loadPosts,selectorsList);\r\n  filterPosts$ = this.createEffectFilter(PostsActions.filterPosts,PostsActions.loadPosts,selectorsList);\r\n  paginationPosts$ = this.createEffectPagination(PostsActions.paginationPosts,PostsActions.loadPosts,selectorsList);\r\n  sortPosts$ = this.createEffectSort(PostsActions.sortPosts,PostsActions.loadPosts,selectorsList);  \r\n\r\n\r\n\r\n  constructor(protected override actions$: Actions,protected override store:Store, private postsService:PostsService,private dialogSerice:DialogService ) {\r\n    super()\r\n  }\r\n\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogSerice",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogSerice",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractListNgRxService",
            "type": "injectable"
        },
        {
            "name": "PostsService",
            "id": "injectable-PostsService-7783ec90400b17529c421eaca38eb932ae57727a6d85028c9921cc8c2b87eeb424464cee44a956524e4c1544227e5f2cdefddcdb9b3fb41ceade298cdfa71904",
            "file": "src/app/posts/services/posts.service.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getPosts",
                    "args": [
                        {
                            "name": "filterPost",
                            "type": "FilterPost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResponseData<Post>>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterPost",
                            "type": "FilterPost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "deleteEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "getEntities",
                    "args": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [
                        "F"
                    ],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "updateEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { consoleApp, NameLog } from 'src/app/services/utils/logger';\r\nimport { NamesLog } from 'src/app/services/utils/names-classes';\r\nimport { rxZod } from 'src/app/services/utils/zodrx';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AbstractEntityService } from '../../services/base/abstract.entity.service';\r\nimport { IResponseData, PageRequest, SortInfo } from '../../services/models/filter.model';\r\nimport { FilterPost, Post, PostRespXsd } from '../models/models';\r\n\r\n\r\n@Injectable()\r\n@NameLog(NamesLog.PostsService)\r\nexport class PostsService extends AbstractEntityService<Post> {\r\n  constructor(injector: Injector) {\r\n    super(injector, environment.urlHostApi, '/posts');\r\n  }\r\n\r\n  getPosts(filterPost:FilterPost,sortInfo:SortInfo,pageRequest:PageRequest): Observable<IResponseData<Post>> {\r\n   // consoleApp(this).log('Enter get Posts');\r\n    return this.getEntities(sortInfo,pageRequest, (params) => {\r\n      if (filterPost?.author) {\r\n        params = params.append('author_like', filterPost.author);\r\n      }\r\n      if (filterPost?.title) {\r\n        params = params.append('title_like', filterPost.title);\r\n      }\r\n      return params;\r\n    }).pipe(\r\n      rxZod(PostRespXsd),\r\n      map((resp) => ({ link: resp.headers.get('link'), data: resp.body })));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractEntityService",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AbstractEntityService",
            "id": "class-AbstractEntityService-61707d1dd1fc1f3994ecb6286caa7d2e9309d1cfb200f1591a5c236436c5363cec8bf28349e85d3ea1ec2df1c7ec6eef722c71007760381c3912cdf15569bbbf",
            "file": "src/app/services/base/abstract.entity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { PageRequest, SortInfo } from 'src/app/services/models/filter.model';\r\nimport { Entity } from '../models/models';\r\nimport { AbstractService } from './abstract.service';\r\n\r\n\r\n\r\nexport abstract class AbstractEntityService<E extends Entity> extends AbstractService {\r\n  protected httpClient: HttpClient;\r\n  constructor(protected  injector: Injector, protected urlHost: string, protected pathEntity: string) {\r\n    super();\r\n    this.httpClient = this.injector.get(HttpClient);\r\n  }\r\n\r\n  getEntities<F>(sortInfo:SortInfo,pageRequest:PageRequest, fnParams: (params: HttpParams) => HttpParams): Observable<HttpResponse<any>> {\r\n    let urlPosts = this.urlEntity;\r\n\r\n    let params = new HttpParams();\r\n      if (pageRequest?.requestLink) {\r\n       // urlPosts = this.getLink(filterList.page);\r\n       urlPosts=pageRequest.requestLink;\r\n      } else {\r\n        params = fnParams(params);\r\n        if (pageRequest?.pageIndex) {\r\n          params = params.append('_page', pageRequest.pageIndex.toString());\r\n        }\r\n        if (pageRequest?.pageSize) {\r\n          params = params.append('_limit', pageRequest.pageSize.toString());\r\n        }\r\n\r\n        if (sortInfo) {\r\n          params = params.append('_sort', sortInfo.active);\r\n          params = params.append('_order', sortInfo.direction);\r\n        }\r\n      }\r\n   \r\n    return this.httpClient.get(urlPosts, { params, observe: 'response' });\r\n  \r\n  }\r\n\r\n\r\n  // getEntitiesList<F,R>(pathUrl?:string,filterList?: FilterListInfo<F>, fnParams?: (params: HttpParams) => HttpParams): Observable<R> {\r\n  //   let urlList = `${this.urlHost}${pathUrl || this.pathEntity}`;\r\n\r\n  //   let params = new HttpParams();\r\n  //   if (filterList) {\r\n  //     if (filterList.page && filterList.page.requestLink) {\r\n  //       urlList = this.getLink(filterList.page);\r\n  //     } else {\r\n  //       params = fnParams(params);\r\n  //       if (filterList.page && filterList.page.pageIndex) {\r\n  //         params = params.append('_page', filterList.page.pageIndex.toString());\r\n  //       }\r\n  //       if (filterList.page && filterList.page.pageSize) {\r\n  //         params = params.append('_limit', filterList.page.pageSize.toString());\r\n  //       }\r\n\r\n  //       if (filterList.order) {\r\n  //         params = params.append('_sort', filterList.order.active);\r\n  //         params = params.append('_order', filterList.order.direction);\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   return this.httpClient.get<R>(urlList, { params });\r\n  \r\n  // }\r\n\r\n \r\n\r\n  addEntity(entity: E): Observable<E> {\r\n    return this.httpClient.post<E>(this.urlEntity, entity);\r\n  }\r\n\r\n  updateEntity(entity: E): Observable<E> {\r\n    return this.httpClient.put<E>(`${this.urlEntity}/${entity.id}`, entity);\r\n  }\r\n\r\n  deleteEntity(entity: E): Observable<E> {\r\n    return this.httpClient.delete<E>(`${this.urlEntity}/${entity.id}`);\r\n  }\r\n\r\n  get urlEntity(): string {\r\n    return `${this.urlHost}${this.pathEntity}`;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "urlHost",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pathEntity",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "urlHost",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pathEntity",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEntities",
                    "args": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [
                        "F"
                    ],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractService",
            "accessors": {
                "urlEntity": {
                    "name": "urlEntity",
                    "getSignature": {
                        "name": "urlEntity",
                        "type": "string",
                        "returnType": "string",
                        "line": 85
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConsoleApp",
            "id": "class-ConsoleApp-ad1b414a0627c83ae3eb9546c97c9fef29e1b83e06689225d1076cadbd32deeda6aafeb61762b885822883f3f403a2f474412a9d5df018ad2cd8736d3172e065",
            "file": "src/app/services/utils/logger.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Level, Log, Logger } from 'ng2-logger/browser';\r\n\r\nexport let mapNames: Map<string, number> = new Map();\r\nexport let mapNamesLevels: Map<string, Level[]> = new Map();\r\n\r\nconst nameLogPrototype='nameLog';\r\n\r\n\r\n/**\r\n * \r\n * Log App and consoleApp  \r\n */\r\n\r\n export interface IConsole {\r\n  log(msg: string, ...params:any[]):void;\r\n  debug(msg: string, ...params:any[]):void;\r\n  error(msg: string, ...params:any[]):void;\r\n  info(msg: string, ...params:any[]):void;\r\n  warn(msg: string, ...params:any[]):void;\r\n}\r\n\r\n\r\nexport function logApp(typeLog:'data'| 'info' | 'warn' | 'error' ,msg: string,params:any[],source?:any){\r\n  \r\n  let nameLogger;\r\n\r\n//console.log('source protype',source?.constructor,source?.constructor.);\r\n\r\n  if(typeof source ==='string'){\r\n    // from string drecttly\r\n    nameLogger=source;\r\n  }else if(source?.constructor?.prototype && source?.constructor?.prototype[nameLogPrototype]){\r\n    // from prototype class and from decorator\r\n    nameLogger= source?.constructor?.prototype[nameLogPrototype]\r\n  }else{ \r\n    // from name class , but in uglifi not work good\r\n    nameLogger=source?.constructor?.name;\r\n  }\r\n\r\n  const l= Log.create(nameLogger);\r\n\r\n  params?.length>0?((l as any)[typeLog])(msg,...params):((l as any)[typeLog])(msg);\r\n}\r\n\r\n\r\nexport const consoleAppx:IConsole={\r\n log:(msg: string,...params:any[])=>  logApp('data',msg,params),\r\n debug:(msg: string,...params:any[])=>  logApp('info',msg,params),\r\n warn:(msg: string,...params:any[])=>  logApp('warn',msg,params),\r\n info:(msg: string,...params:any[])=>  logApp('info',msg,params),\r\n error:(msg: string,...params:any[])=>  logApp('error',msg,params)\r\n}; \r\n\r\nexport function consoleApp(source?:any): IConsole{\r\n // return console;\r\n  return {\r\n    log:(msg: string,...params:any[])=>  logApp('data',msg,params,source),\r\n    debug:(msg: string,...params:any[])=>  logApp('info',msg,params,source),\r\n    warn:(msg: string,...params:any[])=>  logApp('warn',msg,params,source),\r\n    info:(msg: string,...params:any[])=>  logApp('info',msg,params,source),\r\n    error:(msg: string,...params:any[])=>  {\r\n      //logApp('error',msg,params,source)\r\n      console.error(msg, params);\r\n    }\r\n   }\r\n}\r\n\r\n\r\nexport function NameLog(nameLog:string) {\r\n  return function(constructor: any) {\r\n   // console.log('namelog')\r\n      //const orig = constructor.prototype.ngOnDestroy\r\n     // constructor.nameLog=nameLog;\r\n       if(constructor.prototype)constructor.prototype[nameLogPrototype]=nameLog;\r\n      // if(constructor.prototype){\r\n      //   constructor.prototype.testFn=function(this:any){consoleApp('TESTFN').log('data name log',this[nameLogPrototype],this.httpClient,this.injector)}\r\n      // }\r\n      // constructor.prototype.ngOnDestroy = function() {\r\n      //     for(const prop in this) {\r\n      //         const property = this[prop]\r\n      //         if(typeof property.unsubscribe === \"function\" && !obs$.includes(property))\r\n      //             obs$.push(property)\r\n      //     }\r\n      //     for(const ob$ of obs$) {\r\n      //           ob$.unsubscribe()\r\n      //     }\r\n      //     orig.apply()\r\n      // }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n *   End consoleApp\r\n */\r\n\r\n\r\n\r\n\r\nexport function getLogger(name: string): IConsole {\r\n  return new ConsoleApp(name);\r\n}\r\n\r\nexport function updateLevelLog() {\r\n // if (environment.production) {\r\n    //  Log.setProductionMode();\r\n    //Log.onlyLevel(Level.ERROR, Level.INFO, Level.WARN);\r\n        \r\n // }\r\n}\r\n\r\nexport declare type NameLevels={\r\n  name:string;\r\n  levels:Level[];\r\n};\r\nexport function setNamesLevels(names:NameLevels[]){\r\n   names?.forEach(n=> mapNamesLevels.set(n.name,n.levels));  \r\n}\r\nexport function getNameLevels(name:string):Level[]|undefined{\r\n  return mapNamesLevels.get(Array.from(mapNamesLevels!.keys()).find(k=> name.startsWith(k)) as any);\r\n  \r\n}\r\nexport function refreshNamesLevels(){\r\n  if(localStorage.getItem('namesLevels')){\r\n    setNamesLevels(JSON.parse(localStorage.getItem('namesLevels') as any))\r\n  }\r\n}\r\nexport function getNameLog(name: string): string {\r\n  if (mapNames.get(name) !== undefined) {\r\n    let id = mapNames.get(name) as any;\r\n    mapNames.set(name, ++id );\r\n  } else {\r\n    mapNames.set(name, 0);\r\n  }\r\n  return `${name}_${mapNames.get(name)}`;\r\n}\r\n\r\nexport class ConsoleApp implements IConsole{\r\n  logN2: Logger;\r\n\r\n  constructor(name?: string) {\r\n    let nameLog: string;\r\n    if (name) {\r\n      nameLog = getNameLog(name);\r\n    } else {\r\n      nameLog = getNameLog(this.constructor.name);\r\n    }\r\n\r\n    if(getNameLevels(nameLog)){\r\n      this.logN2 = Log.create(nameLog,...getNameLevels(nameLog) as any);  \r\n    }else{\r\n      this.logN2 = Log.create(nameLog);\r\n    }\r\n  }\r\n\r\n  log(msg: string, ...params: any[]) {\r\n    this.logN2.d(msg, ...params);\r\n  }\r\n  debug(msg: string, ...params: any[]) {\r\n    this.logN2.d(msg, ...params);\r\n  }\r\n  error(msg: string, ...params: any[]) {\r\n    this.logN2.error(msg, ...params);\r\n  }\r\n  info(msg: string, ...params: any[]) {\r\n    this.logN2.i(msg, ...params);\r\n  }\r\n  warn(msg: string, ...params: any[]) {\r\n    this.logN2.w(msg, ...params);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 139,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "logN2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Logger",
                    "optional": false,
                    "description": "",
                    "line": 139
                }
            ],
            "methods": [
                {
                    "name": "debug",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IConsole"
            ]
        },
        {
            "name": "ValidatorsApp",
            "id": "class-ValidatorsApp-354e52afd5841a818f78ee13075075b7baa46791f834e32345743180496644657023bf7612f5adb17a38af383a639a5a1d89b15311759569ce0846c1ba716ace",
            "file": "src/app/demo-lib/validatosapp.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\n\r\nfunction addError(err:object, errors_:object|null){\r\n    return {\r\n       ...errors_,\r\n       ...err \r\n    }\r\n}\r\n\r\n\r\nfunction clearError(err:string, errors_:any){\r\n    if(errors_)(delete errors_[err]);\r\n\r\n    return errors_;\r\n}\r\n\r\n\r\n\r\nexport class ValidatorsApp extends Validators {\r\n  static compareFields(field1: string, field2: string): ValidatorFn {\r\n    let myFun = (cc: FormGroup): ValidationErrors | null => {\r\n      if(!cc.controls[field1] || !cc.controls[field2]) return null;  \r\n      if (cc.controls[field1].value === cc.controls[field2].value) {\r\n        cc.controls[field1].setErrors(addError({ Equal : true },cc.controls[field1].errors ));\r\n        //cc.controls[field2].setErrors({ Equal : true });\r\n      } else {\r\n        cc.controls[field1].setErrors(clearError('Equal',cc.controls[field1].errors));\r\n        //cc.controls[field2].setErrors(null);\r\n      }\r\n      return null;\r\n    };\r\n    return myFun as ValidatorFn;\r\n  }\r\n\r\n  static compareFieldsGroup(field1: string, field2: string): ValidatorFn {\r\n    let myFun = (cc: FormGroup): ValidationErrors | null => {\r\n      if(!cc.controls[field1] || !cc.controls[field2]) return null;  \r\n    //  console.log('enter compareFieldsGroup')\r\n      if (cc.controls[field1].value === cc.controls[field2].value) {\r\n        return {\r\n            Equal : true \r\n          };    \r\n        //cc.setErrors({ Equal : true });\r\n      } else {\r\n        return null;\r\n      }\r\n     \r\n    };\r\n    return myFun as ValidatorFn;\r\n  }\r\n\r\n  static compareFieldsGroupb(field1: string, field2: string): ValidatorFn {\r\n    let myFun = (cc: FormGroup): ValidationErrors | null => {\r\n      if(!cc.controls[field1] || !cc.controls[field2]) return null;  \r\n      //console.log('enter compareFieldsGroup')\r\n      if (cc.controls[field1].value === cc.controls[field2].value) {\r\n        return {\r\n            EqualBB : true \r\n          };    \r\n        //cc.setErrors({ Equal : true });\r\n      } else {\r\n        return null;\r\n      }\r\n     \r\n    };\r\n    return myFun as ValidatorFn;\r\n  }\r\n  \r\n\r\n  static compareFieldsOtherGroup(field1: string, field2: string,group1: string|null, group2: string|null): ValidatorFn {\r\n    let myFun = (cc: FormGroup): ValidationErrors | null => {\r\n     const control1=  group1? (cc.controls[group1] as FormGroup)?.controls[field1] :cc.controls[field1]; \r\n     const control2=  group2? (cc.controls[group2] as FormGroup)?.controls[field2] :cc.controls[field2]; \r\n\r\n      if(!control1 || !control2) return null;  \r\n      //console.log('enter compareFieldsGroup')\r\n      if (control1.value === control2.value) {\r\n        return {\r\n            EqualFieldsGroup : true \r\n          };    \r\n      } else {\r\n        return null;\r\n      }\r\n     \r\n    };\r\n    return myFun as ValidatorFn;\r\n  }\r\n\r\n  \r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "compareFields",
                    "args": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compareFieldsGroup",
                    "args": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compareFieldsGroupb",
                    "args": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compareFieldsOtherGroup",
                    "args": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "group1",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "group2",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "group1",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "group2",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Validators",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AbstractDialogComponent",
            "id": "directive-AbstractDialogComponent-aa0607570fe77adb335aa0149bf091387e9df3fef17ab3f26aab7d90e0ac53b8c18d75153301297f8e9cb7baa9a5626821da44cf4bd40b4714db30b3eff00ef0",
            "file": "projects/my-lib-display/src/lib/material/dialog/abstract-dialog/abstract-dialog.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, OnInit } from '@angular/core';\r\nimport { BaseComponent } from '../../../shared/abstract-app';\r\n\r\n@Directive()\r\n//@NameLog(NamesLog.AbstractDialogComponent)\r\nexport  class AbstractDialogComponent  extends BaseComponent implements OnInit, AfterViewInit {\r\n//   @Input() data: any;\r\n//  @Output() onAccept= new EventEmitter();\r\n  \r\n//   @ViewChild(FormComponent)\r\n//   formComponent!: FormComponent;\r\n\r\n//   @ViewChild('buttons')\r\n//   templateButtons!: TemplateRef<any>;\r\n\r\n\r\n \r\n \r\n  // onSubmit(): void {\r\n  //   if (this.formParent.valid) {\r\n  //     //this.authService.login(this.form.value).pipe(this.rxComp()).subscribe();\r\n  //   }\r\n  //   this.dialogRef.close(this.formParent.value);\r\n  //   // this.accept.emit(this.formParent.value);\r\n  // }\r\n}\r\n",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ]
        },
        {
            "name": "BaseComponent",
            "id": "directive-BaseComponent-0305fd0f1ac1ea24de4ac2480e636da08773022b05b4abe1e69baf1b11b8da79811d5ebfbd41a376da0d807b301fd9c0afb6a42dc75762538ff4140b61caf4a3",
            "file": "projects/my-lib-display/src/lib/shared/abstract-app.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Injector, Input } from \"@angular/core\"\r\nimport { IBaseMIxings } from \"./modelMixing\"\r\n\r\n\r\n@Directive()\r\nexport  class BaseComponent implements IBaseMIxings {\r\n\r\n  @Input()\r\n  dataBase = 'Hola'\r\n\r\n  constructor(public injector: Injector) {\r\n    this.init(injector)\r\n  }\r\n  ngOnDestroy(): void {\r\n\r\n  }\r\n  init(...args: any[]): void {\r\n\r\n  }\r\n  ngAfterViewInit(): void {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// export abstract class AbstractApp {\r\n//     console: IConsole;\r\n//     // rxlog:<T>(...vars:any[])=>(obsSrc: Observable<T>) => Observable<T>=rxlog.bind(this); \r\n//     // rxinfo:<T>(...vars:any[])=>(obsSrc: Observable<T>) => Observable<T>=rxinfo.bind(this); \r\n//     // rxwarn:<T>(...vars:any[])=>(obsSrc: Observable<T>) => Observable<T>=rxwarn.bind(this); \r\n//     // rxend:<T>(str:string)=>(obsSrc: Observable<T>) => Observable<T>=rxend.bind(this);\r\n\r\n//     nameLog!:NamesLog;\r\n\r\n//     constructor(@Optional()  protected injector?: Injector,@Optional()  protected nameLogNew?: string){\r\n//         //console.debug('nameLog',(this as any).nameLog,(this as any)?.prototype?.nameLog);\r\n//         if(nameLogNew){\r\n//             this.nameLog=nameLogNew as unknown as NamesLog;\r\n//         }\r\n//         this.console = getLogger(this.nameLog);\r\n        \r\n       \r\n        \r\n//     }\r\n// }\r\n",
            "providers": [],
            "inputsClass": [
                {
                    "name": "dataBase",
                    "defaultValue": "'Hola'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "injector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Injector",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "IBaseMIxings"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "CellRenderDirective",
            "id": "directive-CellRenderDirective-8070d673b95f29c1a835b6b20b02668f177a6bce4eccbd25482f5a986810c8148a17ed63f691893383cdf12ee374a61e8095a43093985c7e5d5bbb5da1851912",
            "file": "projects/my-lib-display/src/lib/material/table/col-info/cell-render.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[CellRender]'\r\n})\r\nexport class CellRenderDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "selector": "[CellRender]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            }
        },
        {
            "name": "FormField",
            "id": "directive-FormField-11b6a1dbe27c602fec2c9eb69505cafc344946bc87f2d20d045c6d87c156c2fe22f7bf591da7796e477e7885b1c26e0a354ff8f760556bdd9f20cf9769613a98",
            "file": "projects/my-lib-display/src/lib/fields/form-field.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ChangeDetectorRef, Directive, EventEmitter, Input, OnChanges, Optional, Output, SimpleChanges } from '@angular/core';\r\nimport { AbstractControlOptions, ControlContainer, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { distinctUntilChanged, skip, tap } from 'rxjs/operators';\r\nimport { setDelay } from './utils';\r\n\r\n@Directive({\r\n  selector: '[appFormField]',\r\n})\r\nexport abstract class FormField implements OnChanges{\r\n  @Input()\r\n  name!: string;\r\n  @Input()\r\n  value!: any;\r\n  @Output()\r\n  onChange = new EventEmitter();\r\n\r\n  @Input()\r\n  label!: string;\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n\r\n  @Input()\r\n  validations!: ValidatorFn | ValidatorFn[] | null;\r\n  @Input()\r\n  labelTop!: boolean;\r\n\r\n  control!: FormControl;\r\n\r\n  constructor(@Optional() private parentControl: ControlContainer, protected changeDet: ChangeDetectorRef) {\r\n    this.control = new FormControl();\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['value']) this.control.setValue(this.value);\r\n  }\r\n\r\n  ngOnInit() {\r\n   // console.log('parentcontrol', this.parentControl);\r\n    this.parentFormGroup = this.parentControl?.control as FormGroup;\r\n    \r\n    setDelay(() => {\r\n      if (this.validations) this.control.addValidators(this.validations);\r\n      this.control.updateValueAndValidity();\r\n    });\r\n\r\n    this.addControl();\r\n  }\r\n\r\n  updateField(formGroup: FormGroup) {\r\n    // this.parentFormGroup = formGroup;\r\n    // this.parentFormGroup.addControl(this.name, this.control);\r\n    // this.changeDet.detectChanges();\r\n  }\r\n\r\n  addControl() {\r\n    this.parentFormGroup.addControl(this.name, this.control);\r\n    this.control.valueChanges.pipe(tap((val) => this.onChange.emit(val))).subscribe();    \r\n    this.control.statusChanges.pipe(\r\n      skip(1),\r\n      distinctUntilChanged(),\r\n      tap((s)=> {\r\n        //if(s==='INVALID')\r\n        console.log('chang status errors',s) \r\n      }),\r\n      tap((s)=> {\r\n       this.changeDet.detectChanges()\r\n      }\r\n      )\r\n    ).subscribe()\r\n    \r\n  }\r\n}\r\n",
            "selector": "[appFormField]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FormgDirective",
            "id": "directive-FormgDirective-2530cac16a9e5717dea7e7316dfdc4b91ca570e7f2d375ddd9b66fb450a60f511d6a2faa0839ef42690e08539e8a2019a7c31c2272bf21ee2cb85e4aa2ee0966",
            "file": "projects/my-lib-display/src/lib/material/form/components/formg.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[formg]'\r\n})\r\nexport class FormgDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "selector": "[formg]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            }
        },
        {
            "name": "MatFieldDirective",
            "id": "directive-MatFieldDirective-84b5a80ec259f96867e1b78ceb676691f789e71c8e2050588d2b66775281bcce9949087cbc942684c40080d020d7e9135c998364189c38a14fc421f38291b672",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/mat-field.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[MatField]'\r\n})\r\nexport class MatFieldDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "selector": "[MatField]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            }
        },
        {
            "name": "RowDetailDirective",
            "id": "directive-RowDetailDirective-5f9b3b242416367cbf34e48e114e9e1d8d16113c4f9386fa8874da0bdfe176a6b6c8ce8a3aa34a73e3423deb8843006410c56d6a9607d7e7d011730d09123b19",
            "file": "projects/my-lib-display/src/lib/material/table/table-info/row-detail.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[RowDetail]'\r\n})\r\nexport class RowDetailDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "selector": "[RowDetail]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            }
        },
        {
            "name": "SpinnerLoadingDirective",
            "id": "directive-SpinnerLoadingDirective-f333101bac9d3399bc089c132ef399ae0ca411494b05974580488ccb669ee693814334f9a111b250efe9988ee7e93c372638fae157b44702124e12c7c5c20212",
            "file": "projects/my-lib-display/src/lib/material/spinner/spinner-loading.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnChanges, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { SpinnerComponent } from './spinner.module';\r\n\r\n@Directive({\r\n  selector: '[libLoading]'\r\n})\r\nexport class SpinnerLoadingDirective implements OnChanges {\r\n\r\n  @Input()\r\n  libLoading!:boolean | undefined |null;\r\n\r\n  constructor(private viewContainer:ViewContainerRef,private templateRef:TemplateRef<any>) {\r\n\r\n   }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if(changes['libLoading']){\r\n        this.updateLoading(this.libLoading);\r\n    }\r\n  }\r\n\r\n   updateLoading(loading:boolean|undefined|null){\r\n      this.viewContainer.clear(); \r\n      if(loading){\r\n         this.viewContainer.createComponent(SpinnerComponent);\r\n      }else{\r\n         this.viewContainer.createEmbeddedView(this.templateRef); \r\n      }\r\n   }\r\n\r\n}\r\n",
            "selector": "[libLoading]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "libLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean | undefined | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLoading",
                    "args": [
                        {
                            "name": "loading",
                            "type": "boolean | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "loading",
                            "type": "boolean | undefined | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f199839b6152e2c79fa4b99b213011773469640e1f06ffcf95e837d7a844d513f7cf70082e36ec7ce3dad598538648d22f6bc415d010cda1025ca106def6dac6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'ngrx-store'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'ngrx-store';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced. * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * End of Placeholder * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n\r\n<lib-my-lib-display></lib-my-lib-display>\r\n<button routerLink=\"/demo\">Customers</button> **\r\n<button routerLink=\"/posts\">Posts</button> **\r\n<button routerLink=\"/posts/comments\">Comments</button> **\r\n\r\n<button routerLink=\"/users\">Users</button> **\r\n\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "AppComponentDemo",
            "id": "component-AppComponentDemo-2601ffb4bafc3e0e3490ebb0a6cb6b40fa13ffbf6507202a2a1cdd2194295fb07bb4659ada18c1e48fea6a7154937f1f12e642f56d305fa88443ed3ace4bb532",
            "file": "src/app/demo-lib/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-demo",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataList$",
                    "defaultValue": "this.subjectList.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "dataSelect$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<DataSelect[]>(createData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "subjectList",
                    "defaultValue": "new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "title",
                    "defaultValue": "'app-dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "val",
                    "defaultValue": "'val1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "valueForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "valueSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "valueSelectComplex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "filterList",
                    "args": [
                        {
                            "name": "filter",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsInGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsInOtherGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f1g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f1g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { delay, map, tap } from 'rxjs/operators';\r\nimport { ValidatorsApp } from './validatosapp';\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n@Component({\r\n  selector: 'app-demo',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponentDemo {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n      this.dataSelect$= this.subject.pipe(\r\n        tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(2000)\r\n      ) as Observable<Item[]>;\r\n         \r\n    }\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 84
                    }
                },
                "dataTable": {
                    "name": "dataTable",
                    "getSignature": {
                        "name": "dataTable",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                }
            },
            "templateData": "<h1>Examples Dialog with components</h1>\r\n\r\n<h2>Filter list</h2>\r\n<app-form (onAccept)=\"filterList($event)\" >\r\n  <ng-container [formGroup]=\"group\" *formg=\"let group\">\r\n    <div class=\"flex flex-row\">\r\n      <app-text-field [name]=\"'name'\" [label]=\"'Filte by name'\" [validations]=\"validations\" MatField></app-text-field>\r\n      <app-number-field [name]=\"'position'\" [label]=\"'Filte by position'\" ></app-number-field>\r\n    </div>\r\n  </ng-container>\r\n</app-form>\r\n\r\n\r\n<app-table [dataSource]=\"dataList$ | async\" (onSort)=\"sortData($event)\">\r\n  <table-info>\r\n    <col-info [name]=\"'name'\" [header]=\"'Name Tpl'\" [typeCell]=\"'tpl'\" [sort]=\"true\">\r\n      <ng-template CellRender let-row>Tpl:{{ row.name }}</ng-template>\r\n    </col-info>\r\n    <col-info [name]=\"'name'\" [header]=\"'Name Normal'\" [sort]=\"true\"> </col-info>\r\n    <col-info [name]=\"'name'\" [header]=\"'Name Extend'\" [typeCell]=\"'extended'\" [sort]=\"true\"> </col-info>\r\n    <col-info [name]=\"'position'\" [header]=\"'Position'\" [typeCell]=\"'tpl'\" [sort]=\"true\">\r\n      <ng-template CellRender let-row>Tpl:{{ row.position }}</ng-template>\r\n    </col-info>\r\n    <col-info [name]=\"'positionkey'\" [header]=\"'Position'\" [typeCell]=\"'tpl'\" [sort]=\"true\">\r\n      <ng-template CellRender let-row>Tpl-key:{{ row.position }}</ng-template>\r\n    </col-info>\r\n    <col-info [name]=\"'position'\" [header]=\"'Position'\" [sort]=\"true\"> </col-info>\r\n    <col-info [name]=\"'symbol'\" [header]=\"'Symbol'\"> </col-info>\r\n    <col-info [name]=\"'weight'\" [header]=\"'Weight'\" [typeCell]=\"'extended'\" [sort]=\"true\"> </col-info>\r\n    <ng-template RowDetail let-row>\r\n      <p>\r\n        {{row |json}}\r\n      </p>\r\n    </ng-template>\r\n  </table-info>\r\n</app-table>\r\n\r\n<app-tabs>\r\n  <app-tab [name]=\"'TAb1'\" [value]=\"val\">\r\n    <ng-template> This is Tab1 ******* </ng-template>\r\n  </app-tab>\r\n  <app-tab [name]=\"'TAb2'\" [value]=\"val\">\r\n    <ng-template> This is Tab2 ******* </ng-template>\r\n  </app-tab>\r\n</app-tabs>\r\n<button (click)=\"val = 'new val'\">chnge val</button>\r\n\r\n<app-form (onAccept)=\"valueForm = $event\" [validations]=\"validationsInOtherGroup('texttest-other', 'text-group-other', null, 'mygroup')\">\r\n  <ng-container [formGroup]=\"group\" *formg=\"let group\">\r\n    <div class=\"flex flex-column\">\r\n      <app-text-field [name]=\"'texttest'\" [label]=\"'text test'\"></app-text-field>\r\n      <app-text-field [name]=\"'texttest-other'\" [label]=\"'text test other *'\" [validations]=\"validations\" MatField></app-text-field>\r\n      <app-text-field [name]=\"'text-mat'\" [label]=\"'text material'\" [validations]=\"validations\" MatField></app-text-field>\r\n      <app-group-field [name]=\"'mygroup'\" [columnFields]=\"true\" [validations]=\"validationsGroup('text-group', 'text-group-other')\">\r\n        <ng-container [formGroup]=\"group2\" *formg=\"let group2\">\r\n          <app-text-field [name]=\"'text-group'\" [label]=\"'text group'\" [validations]=\"validations\"></app-text-field>\r\n          <app-text-field [name]=\"'text-group-other'\" [label]=\"'text group other'\" MatField></app-text-field>\r\n          <app-complex-field\r\n            [name]=\"'complexfield'\"\r\n            [label]=\"'complex field'\"\r\n            (onChange)=\"valueSelectComplex = $event\"\r\n            class=\"m-1\"\r\n          ></app-complex-field>\r\n          <app-complex2-field\r\n            [name]=\"'complexfield2'\"\r\n            [label]=\"'complex field 2'\"\r\n            (onChange)=\"valueSelectComplex = $event\"\r\n            class=\"m-1\"\r\n          ></app-complex2-field>\r\n          <app-text-field [name]=\"'text-mat'\" [label]=\"'text material'\" [validations]=\"validations\" MatField></app-text-field>\r\n          <app-email-field [name]=\"'email'\" [label]=\"'Email *'\"></app-email-field>\r\n          <app-group-field\r\n            [name]=\"'mygroup2'\"\r\n            class=\"flex flex-wrap\"\r\n            [validations]=\"validationsInGroup('text-group-other', 'text-group-other-2', 'text-group-other-3')\"\r\n          >\r\n            <ng-container [formGroup]=\"group3\" *formg=\"let group3\">\r\n              <app-text-field [name]=\"'text-group-other'\" [label]=\"'text test other'\" class=\"w-6\"></app-text-field>\r\n              <app-text-field [name]=\"'text-group-other-2'\" [label]=\"'text test other 2'\" class=\"w-6\"></app-text-field>\r\n              <app-text-field [name]=\"'text-group-other-3'\" [label]=\"'text test other 3'\" class=\"w-6\"></app-text-field>\r\n              <app-select-field\r\n                [name]=\"'myselect'\"\r\n                [label]=\"'My select *'\"\r\n                [listItems]=\"[\r\n                  { value: '1', desc: 'desc 1' },\r\n                  { value: '2', desc: 'desc 2' },\r\n                  { value: '3', desc: 'desc 3' }\r\n                ]\"\r\n                (onChange)=\"updateData($event)\"\r\n                [validations]=\"validations\"\r\n                MatField\r\n                class=\"w-6\"\r\n              ></app-select-field>\r\n              <app-select-field\r\n                [name]=\"'myselect2'\"\r\n                [label]=\"'My select 2 *'\"\r\n                [listItems]=\"dataSelect$ | async\"\r\n                [value]=\"'22'\"\r\n                (onChange)=\"valueSelect = $event\"\r\n                MatField\r\n                class=\"w-6\"\r\n              ></app-select-field>\r\n            </ng-container>\r\n          </app-group-field>\r\n        </ng-container>\r\n      </app-group-field>\r\n      <app-group-field [name]=\"'lastgroup'\" class=\"flex flex-wrap\">\r\n        <ng-container [formGroup]=\"group4\" *formg=\"let group4\">\r\n          <app-text-field [name]=\"'text-group-last'\" [label]=\"'last '\" [value]=\"'Value last'\" class=\"w-6\" [labelTop]=\"true\" MatField></app-text-field>\r\n          <app-text-field [name]=\"'text-group-last-2'\" [label]=\"'last 2'\" class=\"w-6\" [labelTop]=\"true\" MatField></app-text-field>\r\n          <div class=\"w-12 flex justify-content-center\">\r\n            <app-number-field [name]=\"'number field'\" [label]=\"'Number field'\" [value]=\"10\" class=\"w-6\"></app-number-field>\r\n            <app-text-field [name]=\"'text-group-last-cent'\" [label]=\"'last 3'\" class=\"w-6\" [value]=\"'center field'\"></app-text-field>\r\n          </div>\r\n        </ng-container>\r\n      </app-group-field>\r\n    </div>\r\n  </ng-container>\r\n</app-form>\r\n\r\n<h3>Change list:</h3>\r\n{{ valueSelect | json }}\r\n\r\n<h3>Change complex list:</h3>\r\n{{ valueSelectComplex | json }}\r\n\r\n<h3>Value Form</h3>\r\n{{ valueForm | json }}\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-8ceaf520f96e5437b08eeda244d84efb29effe62ddca4fc38eaa229085c2a1126c5715e61445bae741505aca1e4d377b350cb05fadd1dc45d9b2bbf7527029f1",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 748,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c576ffdf77d2dab66dcf33b676c4a87066f666bc48f40ee253cd057169c8ca60997f5af745c4174e823b65be82cefb0225d3fc138f0713541d3028e97c621eee-1",
            "file": "projects/my-lib-display/src/lib/material/button/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.css']\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n\r\n  @Input() label!:string;\r\n  @Input() disabled=false;\r\n  @Output() onClick= new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "\r\n<button mat-raised-button  (click)=\"onClick.emit($event)\" [disabled]=\"disabled\" color=\"primary\">{{label}}</button>"
        },
        {
            "name": "ColInfoComponent",
            "id": "component-ColInfoComponent-66e83c2c70af9ecd1ce13cd69f0d59340b220670aca7d342dd59d6556ed2185787f0d4eaed3818b74844d424b438e0f51b86ba77d45e4a145f236cfa2d33fad6",
            "file": "projects/my-lib-display/src/lib/material/table/col-info/col-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "col-info",
            "styleUrls": [
                "./col-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./col-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sort",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "typeCell",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "TypeCell",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cellRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "CellRenderDirective, {read: TemplateRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\r\nimport { CellRenderDirective } from './cell-render.directive';\r\n\r\n\r\ntype TypeCell= 'normal' | 'extended' | 'tpl' ;\r\n\r\n@Component({\r\n  selector: 'col-info',\r\n  templateUrl: './col-info.component.html',\r\n  styleUrls: ['./col-info.component.scss']\r\n})\r\nexport class ColInfoComponent implements OnInit {\r\n  @Input()\r\n  header!:string;\r\n\r\n  @Input()\r\n  name!:string;\r\n\r\n  @Input()\r\n  sort:boolean=false;\r\n  \r\n\r\n  @Input()\r\n  typeCell:TypeCell='normal';\r\n\r\n  \r\n  @ContentChild(CellRenderDirective,{read: TemplateRef})\r\n  cellRender!:TemplateRef<any>; \r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./col-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>col-info works!</p>\r\n"
        },
        {
            "name": "Complex2FieldComponent",
            "id": "component-Complex2FieldComponent-1779f41cd54fa6943278470d01ae9c00d4dd4610bbaf61a36cc0c9e331352c1320ecd483c5bef8bce55322c3b933c40567cafcc5b1c4a3dbd19df4a5f437b21f",
            "file": "projects/my-lib-display/src/lib/complex-fields/complex2-field/complex2-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-complex2-field",
            "styleUrls": [
                "./complex2-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./complex2-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlAux",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "dataSelect$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<DataSelect[]>(createData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "addChildGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addTextSimple",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Optional, Output, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormControl, ControlContainer, Validators, FormBuilder } from '@angular/forms';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap, map, delay } from 'rxjs/operators';\r\nimport { DataSelect, createData } from '../../fields/components/data';\r\nimport { Item } from '../../fields/fields.module';\r\n\r\n@Component({\r\n  selector: 'app-complex2-field',\r\n  templateUrl: './complex2-field.component.html',\r\n  styleUrls: ['./complex2-field.component.scss']\r\n})\r\nexport class Complex2FieldComponent implements OnInit {\r\n\r\n  @Input()\r\n  name!: string;\r\n  @Input()\r\n  value!: any;\r\n  @Output()\r\n  onChange = new EventEmitter();\r\n\r\n  @Input()\r\n  label!: string;\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n  group!: FormGroup;\r\n\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n\r\n   controlAux=new FormControl();\r\n\r\n      \r\n    constructor(@Optional() private parentControl: ControlContainer, protected changeDet: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n      this.group =this.formBuilder.group({}) ;\r\n      this.dataSelect$= this.subject.pipe(\r\n       // tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(1000)\r\n      ) as Observable<Item[]>;\r\n      \r\n  }\r\n  ngAfterViewInit(): void {\r\n    \r\n  }\r\n  ngAfterContentInit(): void {\r\n   \r\n  }\r\n\r\n  ngOnInit() {\r\n    //console.log('parentcontrol', this.parentControl);\r\n    this.parentFormGroup = this.parentControl?.control as FormGroup;\r\n    this.addChildGroup();\r\n    this.addTextSimple();\r\n   \r\n  }\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.desc.includes(key)))\r\n  }\r\n\r\n  \r\n  addTextSimple(){\r\n    this.group.addControl('mytext',this.controlAux);    \r\n  }\r\n\r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  addChildGroup() {\r\n    this.parentFormGroup.addControl(this.name, this.group);  \r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./complex2-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n      <ng-container [formGroup]=\"group\" >\r\n        <app-layout-field>\r\n          <label>{{ label }}</label>\r\n          <app-text-field [name]=\"'search'\" (onChange)=\"updateData($event)\" [label]=\"'Search *'\" [validations]=\"validations\"></app-text-field>\r\n          <app-select-field\r\n            [name]=\"'listsearch'\"\r\n            [listItems]=\"dataSelect$ | async\"\r\n            [label]=\"'Items'\"\r\n            (onChange)=\"onChange.emit($event)\"  ></app-select-field>\r\n        </app-layout-field>\r\n        <app-layout-field>\r\n          <label>Aux field:</label>\r\n          <input type=\"text\" [formControl]=\"controlAux\" placeholder=\"'Insert ...'\"  /> \r\n        </app-layout-field>\r\n      </ng-container>    \r\n  </ng-container>\r\n"
        },
        {
            "name": "ComplexFieldComponent",
            "id": "component-ComplexFieldComponent-599bb040112486934d1366214dca56b71bca524854e9c4e84d5d800900e6850cb7784eac16d66dd154365c13b2453f65a76d4db4f4a8edc5536b1afa5d412651",
            "file": "projects/my-lib-display/src/lib/complex-fields/complex-field/complex-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-complex-field",
            "styleUrls": [
                "./complex-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./complex-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlAux",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "dataSelect$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "groupComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "GroupFieldComponent"
                        }
                    ]
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<DataSelect[]>(createData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "addTextSimple",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Optional, Output, ViewChild } from '@angular/core';\r\nimport { ControlContainer, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { delay, map, tap } from 'rxjs/operators';\r\nimport { DataSelect, createData } from '../../fields/components/data';\r\nimport { GroupFieldComponent, Item } from '../../fields/fields.module';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-complex-field',\r\n  templateUrl: './complex-field.component.html',\r\n  styleUrls: ['./complex-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ComplexFieldComponent implements OnInit,AfterContentInit,AfterViewInit {\r\n  @Input()\r\n  name!: string;\r\n  @Input()\r\n  value!: any;\r\n  @Output()\r\n  onChange = new EventEmitter();\r\n\r\n  @Input()\r\n  label!: string;\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n\r\n   controlAux=new FormControl();\r\n\r\n   @ViewChild(GroupFieldComponent)\r\n   groupComp!:GroupFieldComponent;\r\n   \r\n    constructor(@Optional() private parentControl: ControlContainer, protected changeDet: ChangeDetectorRef) {\r\n      this.dataSelect$= this.subject.pipe(\r\n      //  tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(1000)\r\n      ) as Observable<Item[]>;\r\n      \r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.addTextSimple()\r\n  }\r\n  ngAfterContentInit(): void {\r\n   \r\n  }\r\n\r\n  ngOnInit() {\r\n    //console.log('parentcontrol', this.parentControl);\r\n    this.parentFormGroup = this.parentControl?.control as FormGroup;\r\n   \r\n   \r\n  }\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.desc.includes(key)))\r\n  }\r\n\r\n  \r\n  addTextSimple(){\r\n    this.groupComp.group.addControl('mytext',this.controlAux);\r\n    //this.changeDet.markForCheck();\r\n  }\r\n\r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./complex-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "AfterViewInit"
            ],
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 72
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n  <app-group-field [name]=\"name\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\">\r\n      <app-layout-field>\r\n        <label>{{ label }}</label>\r\n        <app-text-field [name]=\"'search'\" (onChange)=\"updateData($event)\" [label]=\"'Search *'\" [validations]=\"validations\"></app-text-field>\r\n        <app-select-field\r\n          [name]=\"'listsearch'\"\r\n          [listItems]=\"dataSelect$ | async\"\r\n          [label]=\"'Items'\"\r\n          (onChange)=\"onChange.emit($event)\"\r\n        ></app-select-field>\r\n      </app-layout-field>\r\n      <app-layout-field>\r\n        <label>Aux field:</label>\r\n        <input type=\"text\" [formControl]=\"controlAux\" placeholder=\"'Insert ...'\"  /> \r\n      </app-layout-field>\r\n    </ng-container>\r\n  </app-group-field>\r\n</ng-container>\r\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-0f6c7dc293e314bb3722aede134d6872602a6f3e932479f9544f6d7432270989154c369d883c8be89fe23341b481548bf9d164e8a7ae557960aab89ad9c21fc0",
            "file": "projects/my-lib-display/src/lib/material/dialog/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-dialog",
            "styleUrls": [
                "./dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<object>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "compInside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<AbstractDialogComponent>",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "dataDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "detect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "dialogInstance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDialog",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<any | any>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "formInside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "submitEmit",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "templateButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "viewContainerInside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dialogInside', {read: ViewContainerRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createInside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal';\r\nimport { ChangeDetectorRef, Component, ComponentRef, EventEmitter, Injector, Input, OnInit, Output, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { AbstractDialogComponent } from '../dialog.module';\r\nimport { IDialog } from './modelDialog';\r\n\r\n@Component({\r\n  selector: 'lib-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.css']\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\r\n  @Input() filters: any;\r\n  submitEmit: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Input() title!: string;\r\n  @Output() accept: EventEmitter<object>=new EventEmitter();\r\n\r\n  @ViewChild('dialogInside',{read:ViewContainerRef})\r\n  viewContainerInside!:ViewContainerRef;\r\n\r\n  \r\n  dialogRef: MatDialogRef<any, any>;\r\n  dataDialog: {\r\n    compInsideDialog: ComponentType<any>,\r\n    data:object\r\n  };\r\n  detect: ChangeDetectorRef;\r\n  compInside?: ComponentRef<AbstractDialogComponent>;\r\n  dialogInstance!:IDialog;  \r\n  formInside?:FormGroup;\r\n  templateButtons?:TemplateRef<any>;\r\n\r\n  //abstract getFormGroup(): FormGroup;\r\n\r\n  constructor(protected injector: Injector) {\r\n    this.dialogRef = this.injector.get(MatDialogRef);\r\n    this.dataDialog = this.injector.get(MAT_DIALOG_DATA);\r\n    this.detect=this.injector.get(ChangeDetectorRef);\r\n    //  console.log('Abstract filter created **')\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    \r\n    //this.formParent = this.getFormGroup();\r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.createInside();\r\n    //this.displayDialog.accept.subscribe(() => this.onSubmit());\r\n  }\r\n\r\n  onSubmit(): void {\r\n    // if (this.formParent.valid) {\r\n    //   //this.authService.login(this.form.value).pipe(this.rxComp()).subscribe();\r\n    // }\r\n     this.dialogRef.close(this.formInside?.value);\r\n    // // this.accept.emit(this.formParent.value);\r\n  }\r\n\r\n\r\n  createInside(){\r\n    this.compInside=this.viewContainerInside.createComponent(this.dataDialog.compInsideDialog);\r\n    this.dialogInstance= (this.compInside.instance as any) as IDialog;\r\n    this.dialogInstance.dataFormInput=this.dataDialog.data;\r\n    // detect changes  to refresh the component inside\r\n    this.detect.detectChanges();\r\n\r\n    this.dialogInstance.onAccept?.subscribe(data=> this.dialogRef.close(data));\r\n    this.formInside=this.dialogInstance.formGroup;\r\n    \r\n    this.templateButtons=this.dialogInstance.templateButtons;  \r\n      // detect to refresh these proterties   \r\n    this.detect.detectChanges();\r\n\r\n  }\r\n \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>dialog works!</p>\r\n<div>\r\n    <h2 mat-dialog-title>{{title }}</h2>\r\n    \r\n      <mat-dialog-content>\r\n      <ng-container #dialogInside></ng-container>\r\n      </mat-dialog-content>\r\n      <mat-dialog-actions>\r\n        <ng-container [ngTemplateOutlet]=\"templateButtons || buttons\"  [ngTemplateOutletContext]=\"{ $implicit: formInside }\"></ng-container>\r\n      </mat-dialog-actions>\r\n</div>\r\n\r\n\r\n<ng-template #buttons let-form>\r\n  <button mat-raised-button mat-dialog-close><mat-icon>cancel</mat-icon> {{'CANCEL' }}</button>\r\n  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\r\n  <button mat-raised-button  color=\"primary\" type=\"submit\"  (click)=\"onSubmit()\"  [disabled]=\"form?.invalid || form?.pristine\" >\r\n    <mat-icon>check</mat-icon> {{'ACCEPT'}}\r\n  </button>\r\n</ng-template>\r\n    \r\n"
        },
        {
            "name": "EmailFieldComponent",
            "id": "component-EmailFieldComponent-fd3a17ee070dbf43a6098d7cc079fc1d85c6bfaf686bf3d2cca530caa164d72692e61e9cf2b3f0d7ae2dac36df470075394fe788d1a7c35ae175c8e220ac7953",
            "file": "projects/my-lib-display/src/lib/fields/components/email-field/email-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-email-field",
            "styleUrls": [
                "./email-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./email-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Optional, Output } from '@angular/core';\r\nimport { FormGroup, ControlContainer, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-email-field',\r\n  templateUrl: './email-field.component.html',\r\n  styleUrls: ['./email-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EmailFieldComponent implements OnInit {\r\n\r\n  @Input()\r\n  name!: string;\r\n  @Input()\r\n  value!: any;\r\n  @Output()\r\n  onChange = new EventEmitter();\r\n\r\n  @Input()\r\n  label!: string;\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n     \r\n   constructor(@Optional() private parentControl: ControlContainer, protected changeDet: ChangeDetectorRef) {\r\n      \r\n  }\r\n\r\n  ngOnInit() {\r\n   // console.log('parentcontrol', this.parentControl);\r\n    this.parentFormGroup = this.parentControl?.control as FormGroup;\r\n   \r\n  }\r\n\r\n  get validations(){\r\n    return [Validators.required,Validators.email]\r\n  }\r\n  \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./email-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n  <app-text-field [name]=\"name\" [label]=\"label\" [validations]=\"validations\"></app-text-field>\r\n</ng-container>\r\n"
        },
        {
            "name": "FormCommentComponent",
            "id": "component-FormCommentComponent-1f7820c725b963d0a55b32defc3123e152fa0e0b6a98ab88c3778c2bbd28156b475c6a558588da164385835034b4715ae03085ae8cb35024a08a8a2e21fd7d9c",
            "file": "src/app/posts/components/form-comment/form-comment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-comment",
            "styleUrls": [
                "./form-comment.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-comment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { AbstractDialogComponent } from 'my-lib-display';\r\nimport { consoleApp } from 'src/app/services/utils/logger';\r\nimport { withDestroy, withForm, withFormButtons } from 'src/app/shared/base/mixings-comp';\r\n\r\n@Component({\r\n  selector: 'app-form-comment',\r\n  templateUrl: './form-comment.component.html',\r\n  styleUrls: ['./form-comment.component.scss']\r\n})\r\nexport class FormCommentComponent  \r\nextends\r\nwithFormButtons(\r\nwithForm( \r\nwithDestroy(  \r\nAbstractDialogComponent))) \r\n//implements OnInit\r\n {\r\n\r\n  @Input()\r\n  values:any;\r\n\r\n  @Output()\r\n  onChange= new EventEmitter()\r\n\r\n\r\n  get validations():any[]{\r\n    return [Validators.required]\r\n  }\r\n  \r\n  // @Input()\r\n  //  override set dataFormInput(data:any){\r\n  //   consoleApp(this).log('enter dat input form',data) \r\n  //   this._dataFormInput=data;\r\n  // }\r\n\r\n  // override get dataFormInput(){\r\n  //  return  this._dataFormInput;\r\n  // }\r\n\r\n\r\n \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-comment.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 28
                    }
                }
            },
            "templateData": "<p></p>\r\n<app-form  #formfilter [showButtons]=\"false\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\" >\r\n      <div class=\"flex flex-row\">\r\n        <app-text-field [value]=\"dataFormInput?.comment\" [name]=\"'comment'\" [label]=\"'Filter by comment'\" [validations]=\"validations\"  MatField>\r\n        </app-text-field>\r\n        <app-text-field [value]=\"dataFormInput?.author\" [name]=\"'author'\" [label]=\"'Filter by author'\" (onChange)=\"onChange.emit($event)\"  MatField>\r\n        </app-text-field>        \r\n        <lib-number-mat-field [value]=\"dataFormInput?.id\"  [name]=\"'id'\" [label]=\"'Filter by Id'\" MatField></lib-number-mat-field>\r\n      </div>\r\n    </ng-container>\r\n  </app-form>\r\n\r\n\r\n{{values}}\r\n  <ng-template #buttons let-form>\r\n    <lib-button [label]=\"'MY CLOSE'\" [disabled]=\"form?.invalid || form?.pristine\" (onClick)=\"onAccept.emit(form.value)\"></lib-button>\r\n    \r\n  </ng-template>\r\n  \r\n\r\n  \r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-d6f67bffd50a07dc27cd847af949b7b4c597e9ce8c4112efeac592418857164652069f4ff112346458c2f5428d926ada05a33840549d9b8d5df2acbc4493fc60",
            "file": "projects/my-lib-display/src/lib/material/form/components/form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [
                "./form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showButtons",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onAccept",
                    "defaultValue": "new EventEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "detect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FormField>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FormField, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "templateFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "accept",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateFields",
                    "args": [
                        {
                            "name": "fields",
                            "type": "QueryList<FormField>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "QueryList<FormField>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, Input, OnInit, Output, QueryList, TemplateRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { FormField } from '../../../fields/form-field.directive';\r\nimport {tap} from 'rxjs/operators'\r\nimport { setDelay } from '../../../fields/utils';\r\n\r\n@Component({\r\n  selector: 'app-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormComponent implements OnInit,AfterContentInit,AfterViewInit {\r\n\r\n  @ContentChild(TemplateRef) templateFields!:TemplateRef<any>;\r\n  group!: FormGroup;\r\n\r\n  @ContentChildren(FormField,{descendants:true})\r\n  fields!: QueryList<FormField>;\r\n\r\n  @Output()\r\n  onAccept:EventEmitter<any>= new EventEmitter;\r\n\r\n  @Input()\r\n  validations!: ValidatorFn | ValidatorFn[] | null;\r\n  @Input()\r\n  showButtons=true;\r\n\r\n  constructor(private formBuilder: FormBuilder,public detect:ChangeDetectorRef) {\r\n    this.createForm();\r\n   }\r\n   \r\n  ngAfterViewInit(): void {\r\n    // the group is all updated after view init\r\n    //console.log('group parent after view ',this.group, Object.keys(this.group.controls).length );        \r\n  }\r\n  \r\n   ngAfterContentInit(): void {\r\n     //console.log('group parent ',this.group,Object.keys(this.group.controls).length );\r\n  //    this.fields.changes.pipe(\r\n  //      tap((val) => this.updateFields(val))\r\n  //    ).subscribe();\r\n   }\r\n\r\n\r\n\r\n  updateFields(fields: QueryList<FormField>){\r\n    fields.forEach(field=>{\r\n     // console.log('field',field.name,field.control,field);      \r\n    })\r\n  }  \r\n\r\n\r\n\r\n  createForm(){\r\n    this.group= this.formBuilder.group({});\r\n    setDelay(()=>{\r\n      if(this.validations){\r\n        this.group.setValidators(this.validations);\r\n        this.group.updateValueAndValidity();\r\n      }\r\n    })\r\n  }\r\n\r\n  get errors(){\r\n    return Object.keys(this.group.errors as object);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  accept(){\r\n    this.onAccept.emit(this.group.value);\r\n  }\r\n\r\n  validShow(){\r\n   this.group.markAllAsTouched();\r\n   //(this.group.controls['mygroup'] as FormGroup).controls['email'].updateValueAndValidity();\r\n   \r\n  }\r\n\r\n  get isValid(){\r\n    return this.group.valid;\r\n  }\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "AfterViewInit"
            ],
            "accessors": {
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "",
                        "returnType": "",
                        "line": 83
                    }
                }
            },
            "templateData": "<!-- <p>form works!</p> -->\r\n<form [formGroup]=\"group\">\r\n  <div class=\"flex\">\r\n    <ng-container *ngTemplateOutlet=\"templateFields || empty; context: { $implicit: group }\"></ng-container>\r\n  </div>\r\n  <div *ngIf=\"group?.errors && (group.dirty || group.touched)\" class=\"error\">\r\n    Form Errors;   \r\n    <div *ngFor=\"let err of errors\">{{ err }}</div>\r\n  </div>\r\n  <lib-button (onClick)=\"accept()\" [disabled]=\"!isValid\" [label]=\"'Aceptar'\" *ngIf=\"showButtons\"></lib-button>\r\n  <lib-button (onClick)=\"validShow()\" [label]=\"'Show validations'\"  *ngIf=\"showButtons\"></lib-button>\r\n  *****************************************\r\n  <ng-template #empty> Fields empty </ng-template>\r\n</form>\r\n"
        },
        {
            "name": "FormFieldsComponent",
            "id": "component-FormFieldsComponent-8418808fe7fb786849e2862e5db0709c8ecc980b1b3e5a1ad93151336083a5ad369e681fb6e1cc65675f298a8c95333640bb2627f97f1d8e5bf9fb290511edad",
            "file": "src/stories/library/formfields.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [],
            "styles": [],
            "template": " <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\n  <ng-container [formGroup]=\"group\" *formg=\"let group\" >\n    <div class=\"flex flex-row\">\n      <app-text-field [name]=\"'comment'\" [label]=\"'Filter by comment'\" [validations]=\"validations\"  MatField>\n      </app-text-field>\n      <app-text-field [name]=\"'author'\" [label]=\"'Filter by author'\"  MatField>\n      </app-text-field>\n      <app-text-field [name]=\"'id'\" [label]=\"'Filter by Id'\" MatField>\n      </app-text-field>\n    </div>\n  </ng-container>\n</app-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onAccept",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "accept",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` \r\n  <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\" >\r\n      <div class=\"flex flex-row\">\r\n        <app-text-field [name]=\"'comment'\" [label]=\"'Filter by comment'\" [validations]=\"validations\"  MatField>\r\n        </app-text-field>\r\n        <app-text-field [name]=\"'author'\" [label]=\"'Filter by author'\"  MatField>\r\n        </app-text-field>\r\n        <app-text-field [name]=\"'id'\" [label]=\"'Filter by Id'\" MatField>\r\n        </app-text-field>\r\n      </div>\r\n    </ng-container>\r\n  </app-form>\r\n  `  \r\n})\r\nexport default class FormFieldsComponent {\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onAccept = new EventEmitter();\r\n\r\n  \r\n  accept(data:any){\r\n    console.log('passsssssssssss accept',data)\r\n    this.onAccept.emit(data)\r\n  }\r\n\r\n  get validations():any[]{\r\n    return [Validators.required]\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 34
                    }
                }
            }
        },
        {
            "name": "FormFieldsNormalComponent",
            "id": "component-FormFieldsNormalComponent-6e64c162dc631155f9af0f92087e35a165d79b797adbc2f897c2b3d698e9af0286aa4f7175dc922bff286527163745bc404b450c70633b2fd88b4914d49c9246",
            "file": "src/stories/library/formfields.normal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "form-normal",
            "styleUrls": [],
            "styles": [],
            "template": " <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\n  <ng-container [formGroup]=\"group\" *formg=\"let group\" >\n    <div class=\"flex flex-row\">\n    <app-number-field [name]=\"'number field'\" [label]=\"'Number field'\" [value]=\"10\" class=\"w-6\"></app-number-field>\n    <app-number-field [name]=\"'number field_other'\" [label]=\"'Number field'\" [value]=\"50\" class=\"w-6\"></app-number-field>\n     <app-text-field [name]=\"'text-group-other'\" [label]=\"'text test other'\" class=\"w-6\"></app-text-field>\n     <app-email-field [name]=\"'email'\" [label]=\"'Email *'\"></app-email-field>\n\n    </div>\n  </ng-container>\n</app-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onAccept",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dataList$",
                    "defaultValue": "this.subjectList.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "dataSelect$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<DataSelect[]>(createData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "subjectList",
                    "defaultValue": "new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "title",
                    "defaultValue": "'app-dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "val",
                    "defaultValue": "'val1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "valueForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "valueSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "valueSelectComplex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methodsClass": [
                {
                    "name": "accept",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterList",
                    "args": [
                        {
                            "name": "filter",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsInGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsInOtherGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f1g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f1g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable, tap, map, delay } from 'rxjs';\r\nimport { ValidatorsApp } from 'src/app/demo-lib/validatosapp';\r\n\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'form-normal',\r\n  template: ` \r\n  <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\" >\r\n      <div class=\"flex flex-row\">\r\n      <app-number-field [name]=\"'number field'\" [label]=\"'Number field'\" [value]=\"10\" class=\"w-6\"></app-number-field>\r\n      <app-number-field [name]=\"'number field_other'\" [label]=\"'Number field'\" [value]=\"50\" class=\"w-6\"></app-number-field>\r\n       <app-text-field [name]=\"'text-group-other'\" [label]=\"'text test other'\" class=\"w-6\"></app-text-field>\r\n       <app-email-field [name]=\"'email'\" [label]=\"'Email *'\"></app-email-field>\r\n            \r\n      </div>\r\n    </ng-container>\r\n  </app-form>\r\n  `  \r\n})\r\nexport default class FormFieldsNormalComponent {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$!: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n  @Output()\r\n  onAccept = new EventEmitter();\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n   \r\n         \r\n    }\r\n \r\n  \r\n    \r\n   accept(data:any){\r\n      console.log('passsssssssssss accept',data)\r\n      this.onAccept.emit(data)\r\n    }\r\n\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 104
                    }
                },
                "dataTable": {
                    "name": "dataTable",
                    "getSignature": {
                        "name": "dataTable",
                        "type": "",
                        "returnType": "",
                        "line": 119
                    }
                }
            }
        },
        {
            "name": "FormFieldsSelectsComponent",
            "id": "component-FormFieldsSelectsComponent-a38959a01cb1b18eecec604b1f1eafe7db5ceadeb92ff2c2beffb26429fd00a15e7922ab33f6bc3fbe19230230e42c723b3a6a63c0001a8f7162322a57caeb62",
            "file": "src/stories/library/formfields.selects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [],
            "styles": [],
            "template": " <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\n  <ng-container [formGroup]=\"group\" *formg=\"let group\" >\n    <div class=\"flex flex-row\">\n\n            <app-text-field [name]=\"'text-group-other-3'\" [label]=\"'text test other 3'\" class=\"w-6\" MatField></app-text-field>\n             <app-select-field\n              [name]=\"'myselect'\"\n              [label]=\"'My select *'\"\n              [listItems]=\"[\n                { value: '1', desc: 'desc 1' },\n                { value: '2', desc: 'desc 2' },\n                { value: '3', desc: 'desc 3' }\n              ]\"\n              (onChange)=\"updateData($event)\"\n              [validations]=\"validations\"\n              MatField\n              class=\"w-6\"\n            ></app-select-field>\n            <app-select-field\n              [name]=\"'myselect2'\"\n              [label]=\"'My select 2 *'\"\n              [listItems]=\"dataSelect$ | async\"\n              [value]=\"'22'\"\n              (onChange)=\"valueSelect = $event\"\n              MatField\n              class=\"w-6\"\n            ></app-select-field>\n    </div>\n  </ng-container>\n</app-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onAccept",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dataList$",
                    "defaultValue": "this.subjectList.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "dataSelect$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<DataSelect[]>(createData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "subjectList",
                    "defaultValue": "new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "title",
                    "defaultValue": "'app-dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "val",
                    "defaultValue": "'val1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "valueForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "valueSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "valueSelectComplex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methodsClass": [
                {
                    "name": "accept",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterList",
                    "args": [
                        {
                            "name": "filter",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsInGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsInOtherGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f1g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f1g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable, tap, map, delay } from 'rxjs';\r\nimport { ValidatorsApp } from 'src/app/demo-lib/validatosapp';\r\n\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` \r\n  <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\" >\r\n      <div class=\"flex flex-row\">\r\n     \r\n              <app-text-field [name]=\"'text-group-other-3'\" [label]=\"'text test other 3'\" class=\"w-6\" MatField></app-text-field>\r\n               <app-select-field\r\n                [name]=\"'myselect'\"\r\n                [label]=\"'My select *'\"\r\n                [listItems]=\"[\r\n                  { value: '1', desc: 'desc 1' },\r\n                  { value: '2', desc: 'desc 2' },\r\n                  { value: '3', desc: 'desc 3' }\r\n                ]\"\r\n                (onChange)=\"updateData($event)\"\r\n                [validations]=\"validations\"\r\n                MatField\r\n                class=\"w-6\"\r\n              ></app-select-field>\r\n              <app-select-field\r\n                [name]=\"'myselect2'\"\r\n                [label]=\"'My select 2 *'\"\r\n                [listItems]=\"dataSelect$ | async\"\r\n                [value]=\"'22'\"\r\n                (onChange)=\"valueSelect = $event\"\r\n                MatField\r\n                class=\"w-6\"\r\n              ></app-select-field> \r\n      </div>\r\n    </ng-container>\r\n  </app-form>\r\n  `  \r\n})\r\nexport default class FormFieldsSelectsComponent {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n  @Output()\r\n  onAccept = new EventEmitter();\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n      this.dataSelect$= this.subject.pipe(\r\n        tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(2000)\r\n      ) as Observable<Item[]>;\r\n         \r\n    }\r\n \r\n  \r\n    \r\n   accept(data:any){\r\n      console.log('passsssssssssss accept',data)\r\n      this.onAccept.emit(data)\r\n    }\r\n\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 103,
                "jsdoctags": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 127
                    }
                },
                "dataTable": {
                    "name": "dataTable",
                    "getSignature": {
                        "name": "dataTable",
                        "type": "",
                        "returnType": "",
                        "line": 142
                    }
                }
            }
        },
        {
            "name": "GroupFieldComponent",
            "id": "component-GroupFieldComponent-a0ffee6662a8887fecff41056f7ed1804125657f9b9c4a35146ba34c98df5cd30226a7cea697f4a85ab9172eac25c634650dd9540ba892543ec3c96116223c65",
            "file": "projects/my-lib-display/src/lib/fields/components/group-field/group-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-field",
            "styleUrls": [
                "./group-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columnFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "templateFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Input, TemplateRef } from '@angular/core';\r\nimport { ControlContainer, FormBuilder, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { setDelay } from '../../utils';\r\n\r\n@Component({\r\n  selector: 'app-group-field',\r\n  templateUrl: './group-field.component.html',\r\n  styleUrls: ['./group-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GroupFieldComponent   {\r\n  \r\n  @Input()\r\n  name!: string;\r\n  @Input()\r\n  label!: string;\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n\r\n  @Input()\r\n  columnFields!: boolean;\r\n\r\n  group!: FormGroup;\r\n  @ContentChild(TemplateRef) templateFields!:TemplateRef<any>;\r\n\r\n  @Input()\r\n  validations!: ValidatorFn | ValidatorFn[] | null;\r\n\r\n  constructor( private parentControl: ControlContainer, private formBuilder: FormBuilder, protected changeDet: ChangeDetectorRef) {\r\n    this.group =this.formBuilder.group({}) ;\r\n  }\r\n\r\n  ngOnInit() {\r\n   // console.log('parentcontrol', this.parentControl);\r\n    this.parentFormGroup = this.parentControl?.control as FormGroup;\r\n    this.addControl();\r\n  }\r\n  \r\n  addControl() {\r\n    this.parentFormGroup.addControl(this.name, this.group);  \r\n    setDelay(()=>{\r\n      if(this.validations){\r\n        this.group.setValidators(this.validations);\r\n        this.group.updateValueAndValidity();\r\n      }\r\n    })\r\n  }\r\n\r\n  get errors(){\r\n    return Object.keys(this.group.errors as object);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: block; \r\n  border: 1px solid lightgrey;  \r\n  margin: 6px;\r\n  \r\n}",
                    "styleUrl": "./group-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n  <ng-container [formGroup]=\"group\">\r\n    <!-- <div class=\"flex flex-wrap\" [class.flex-column]=\"columnFields\">  -->\r\n    <ng-container *ngTemplateOutlet=\"templateFields; context: { $implicit: group }\"></ng-container>\r\n    <div *ngIf=\"group?.errors && (group.dirty || group.touched)\" class=\"error\">\r\n      Group Errors;   \r\n      <div *ngFor=\"let err of errors\">{{ err }}</div>\r\n    </div>\r\n    <!-- </div> -->\r\n  </ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-260da370a7fe3424df2fc9508dacfbef400cbff6290b3e60eb202d98f8b8b3fc5c659ebe8b6cfb28926b99a6d57ba2ba67a6aae37674abd156b592e6012452ad",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LayoutFieldComponent",
            "id": "component-LayoutFieldComponent-61966508ccbabec7effcba573119df498c6c5094b0bd087c771c5605a635badf8f92d33e2cd61889865f40e047aea76aa1ffb19cc67f949136a76afb8c5eb209",
            "file": "projects/my-lib-display/src/lib/fields/components/layout-field/layout-field.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout-field",
            "styleUrls": [
                "./layout-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contrlx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgControl, {static: true}"
                        }
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { AbstractControl, FormGroup, NgControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-layout-field',\r\n  templateUrl: './layout-field.component.html',\r\n  styleUrls: ['./layout-field.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class LayoutFieldComponent implements OnInit {\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n  control!: AbstractControl;\r\n  @Input()\r\n  labelTop!:boolean;\r\n  @ContentChild(NgControl,{static:true}) contrlx!:NgControl;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    //console.log('ngcontrol',this.contrlx);\r\n    this.control=this.contrlx as any;\r\n  }\r\n  get errors(){\r\n    return Object.keys(this.control.errors as object);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".error{\r\n    font-weight: bolder;\r\n    color: lightpink;\r\n    margin-left:10px;\r\n}\r\n\r\n\r\nlabel{\r\n    font-weight: bolder;\r\n    margin-right: 13px;;\r\n    }",
                    "styleUrl": "./layout-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "templateData": "<div class=\"flex\" [class.flex-column]=\"labelTop\">\r\n    <ng-content select=\"label,mat-label\"></ng-content>\r\n    <ng-content></ng-content>     \r\n    <div *ngIf=\"control?.errors && (control.dirty || control.touched)\" class=\"error\">\r\n        <div *ngFor=\"let err of errors\">{{err}}</div>   \r\n   </div>\r\n</div>    \r\n"
        },
        {
            "name": "ListCommentsComponent",
            "id": "component-ListCommentsComponent-33d746b7e069b7563e9f15d77cff81b394eda92a092bdab8de998bb327bb2408e6503cad27953a1f852a97dbce560a902d3f5c7062d2ede1d64ffd88e4943450",
            "file": "src/app/posts/pages/list-comments/list-comments.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-comments",
            "styleUrls": [
                "./list-comments.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-comments.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "aux",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "comments$",
                    "defaultValue": "this.store.select(selectorsList.selectListData)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "filter$",
                    "defaultValue": "this.store.select(selectorsList.selectFilter)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "injector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Injector",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123,
                        158
                    ]
                },
                {
                    "name": "linksStatus$",
                    "defaultValue": "this.store.select(selectorsList.selectLinksStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.store.select(selectorLoadingComments)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "loadingGroup$",
                    "defaultValue": "this.store.select(selectorLoadingQuery)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "queryLoadings",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "sort$",
                    "defaultValue": "this.store.select(selectorsList.selectSort)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "callQuery",
                    "args": [
                        {
                            "name": "author",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterList",
                    "args": [
                        {
                            "name": "filter",
                            "type": "FilterComment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "FilterComment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "onClickRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "paginate",
                    "args": [
                        {
                            "name": "typeEventPagination",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeEventPagination",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectQueryTest",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testExtra",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Injector, OnInit, QueryList, ViewChild } from '@angular/core';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Store } from '@ngrx/store';\r\nimport { BaseComponent, TypeEventPagination } from 'my-lib-display';\r\nimport { delay, of, tap } from 'rxjs';\r\nimport { SortInfo } from 'src/app/services/models/filter.model';\r\nimport { NameLog } from 'src/app/services/utils/logger';\r\nimport { rxDestroy, rxlog, rxlogth } from 'src/app/services/utils/opersrx';\r\nimport { withDestroy, withForm } from 'src/app/shared/base/mixings-comp';\r\nimport { filterLoadingId } from 'src/app/store/selectors/loading.selectors';\r\nimport { InputFields } from 'src/app/users/components/users/users.component';\r\nimport { Comment, FilterComment } from '../../models/comment';\r\nimport * as CommentsActions from '../../store/actions/comments.actions';\r\nimport { selectorLoadingComments, selectorLoadingQuery, selectorsList } from '../../store/selectors/comments.selectors';\r\n\r\n@Component({\r\n  selector: 'app-list-comments',\r\n  templateUrl: './list-comments.component.html',\r\n  styleUrls: ['./list-comments.component.scss']\r\n})\r\n@NameLog('ListCommentsComponent')\r\nexport class ListCommentsComponent extends \r\nInputFields(\r\nwithForm(\r\nwithDestroy(\r\nBaseComponent)))  implements OnInit,AfterViewInit {\r\n\r\n  aux!:string;\r\n  comments$ = this.store.select(selectorsList.selectListData);\r\n  loading$ = this.store.select(selectorLoadingComments);\r\n  loadingGroup$ =this.store.select(selectorLoadingQuery);\r\n  filter$ = this.store.select(selectorsList.selectFilter);\r\n  linksStatus$ = this.store.select(selectorsList.selectLinksStatus);\r\n  sort$ = this.store.select(selectorsList.selectSort);\r\n\r\n\r\n  queryLoadings:{name:string,data:string|null}[]=[];\r\n\r\n\r\n\r\n  constructor( private store: Store,public override injector: Injector) {super(injector) }\r\n  \r\n\r\n  override ngOnInit(): void {\r\n    this.store.dispatch(CommentsActions.loadInitComments());\r\n    super.ngOnInit();\r\n    this.subjectFields$.pipe(rxDestroy(this),rxlogth(this)('fields form subject')).subscribe()\r\n  }\r\n\r\n \r\n  filterList(filter:FilterComment){\r\n    console.log('filter enter***********',filter);\r\n    this.store.dispatch(CommentsActions.filterComments({filter}));    \r\n  }\r\n\r\n  paginate(typeEventPagination:TypeEventPagination){\r\n    this.store.dispatch(CommentsActions.paginationComments({typeEventPagination}));    \r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.store.dispatch(CommentsActions.sortComments({sortInfo:sort as SortInfo}));    \r\n    \r\n  }\r\n\r\n  testExtra(){\r\n    this.store.dispatch(CommentsActions.extraComments({data:'OK extra'}));    \r\n  }\r\n\r\n  get validations():[]{\r\n    return []\r\n  }\r\n\r\n  onClickRow(row:Comment){\r\n    \r\n    this.store.dispatch(CommentsActions.editDialogComment({data:row}))\r\n\r\n    this.queryLoadings.push({name:row.author,data:null})\r\n    this.callQuery(row.author).pipe(\r\n      rxDestroy(this)\r\n    ).subscribe(()=>  (this.queryLoadings?.find(q=> q.name===row.author) as any).data='Finish query '+row.author)\r\n    \r\n  }\r\n  callQuery(author: any) {\r\n    function getRandomInt(min:number, max:number) {\r\n      return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n    const delayTime= 10000* getRandomInt(1,6)\r\n    return of(author).pipe(\r\n      tap(d=> this.store.dispatch(CommentsActions.queryBegin({data:author}))),\r\n      delay(delayTime),\r\n      tap(d=> this.store.dispatch(CommentsActions.queryEnd({data:author}))),\r\n    )\r\n  }\r\n\r\n  selectQueryTest(name:string):any{\r\n    // call selector direct\r\n   //return this.store.select(createSelectorLoading('querytest',name))\r\n   // call filter with selector obsevable\r\n    return filterLoadingId(this.loadingGroup$,name);\r\n  }\r\n\r\n  openDialog():void{\r\n    this.store.dispatch(CommentsActions.addDialogComment())\r\n    \r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.query{\r\n    display:inline-flex;\r\n    border: 2px solid red;\r\n    height: 100px;\r\n    min-width: 130px;\r\n}",
                    "styleUrl": "./list-comments.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                }
            },
            "templateData": "\r\n<h1>List comments</h1>\r\n<lib-button [label]=\"'Test extra'\" (onClick)=\"testExtra()\"></lib-button>\r\n<lib-button [label]=\"'Add Comment'\" (onClick)=\"openDialog()\"></lib-button>\r\n<app-form (onAccept)=\"filterList($event)\" >\r\n  <ng-container [formGroup]=\"group\" *formg=\"let group\">\r\n    <div class=\"flex flex-row\">\r\n      <app-text-field [name]=\"'comment'\" [label]=\"'Filter by comment'\" [value]=\"(filter$ | async)?.comment\" MatField [validations]=\"validations\">\r\n      </app-text-field>\r\n      <app-text-field [name]=\"'author'\" [label]=\"'Filter by author'\" [value]=\"(filter$ | async)?.author\" MatField>\r\n      </app-text-field>\r\n      <app-text-field [name]=\"'id'\" [label]=\"'Filter by Id'\" [value]=\"(filter$ | async)?.id\" MatField>\r\n      </app-text-field>\r\n    </div>\r\n  </ng-container>\r\n</app-form>\r\n<app-paginator [enablePrev]=\"linksStatus.prev\" [enableNext]=\"linksStatus.next\" [enableFirst]=\"linksStatus.first\" [enableLast]=\"linksStatus.last\"\r\n  (typeEvent)=\"paginate($event)\" *ngIf=\"linksStatus$ | async as linksStatus\"></app-paginator>\r\n\r\n  <ng-container *libLoading=\"(loading$ | async)\">\r\n  <app-table [dataSource]=\"comments$ |async\" (onSort)=\"sortData($event)\" [sortCurrent]=\"$any(sort$ | async)\" (onClickRow)=\"onClickRow($event)\">\r\n    <table-info>\r\n      <col-info [name]=\"'author'\" [header]=\"'Author Tpl'\" [typeCell]=\"'tpl'\" [sort]=\"true\">\r\n        <ng-template CellRender let-row>Author:{{ row.author }}</ng-template>\r\n      </col-info>\r\n      <col-info [name]=\"'comment'\" [header]=\"'Comment'\" [sort]=\"true\" [typeCell]=\"'extended'\"> </col-info>\r\n      <col-info [name]=\"'id'\" [header]=\"'Id'\" [sort]=\"true\"> </col-info>\r\n      <col-info [name]=\"'comment'\" [header]=\"'Comment'\" [sort]=\"true\"> </col-info>\r\n      <!-- <col-info [name]=\"'id'\" [header]=\"'Id'\" [typeCell]=\"'extended'\"> </col-info> -->\r\n    </table-info>\r\n  </app-table>\r\n</ng-container>\r\n\r\n<div *ngFor=\"let query of queryLoadings\" class=\"query\">\r\n  <div *libLoading=\"selectQueryTest(query.name) | async\">\r\n  name={{query.name}}\r\n  data={{query.data}}\r\n </div>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "ListPostsComponent",
            "id": "component-ListPostsComponent-78c63b9a82111263a1c4ca133317ed4ef9079e958163183bac0999213d9df02383d80d98aa3e4f91f39820593bc8d12ca5501ae1df9f4fc4a9daedb615ec9a44",
            "file": "src/app/posts/pages/list-posts/list-posts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-posts",
            "styleUrls": [
                "./list-posts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-posts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "aux",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "filter$",
                    "defaultValue": "this.store.select(selectorsList.selectFilter)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "injector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Injector",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123,
                        158
                    ]
                },
                {
                    "name": "linksStatus$",
                    "defaultValue": "this.store.select(selectorsList.selectLinksStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.store.select(selectorLoadingPosts)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "posts$",
                    "defaultValue": "this.store.select(selectorsList.selectListData)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "sort$",
                    "defaultValue": "this.store.select(selectorsList.selectSort)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "filterList",
                    "args": [
                        {
                            "name": "filter",
                            "type": "FilterPost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "FilterPost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "paginate",
                    "args": [
                        {
                            "name": "typeEventPagination",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeEventPagination",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector, OnInit } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Store } from '@ngrx/store';\r\nimport { BaseComponent, TypeEventPagination } from 'my-lib-display';\r\nimport { SortInfo } from 'src/app/services/models/filter.model';\r\nimport { NameLog } from 'src/app/services/utils/logger';\r\nimport { rxDestroy, rxlogth } from 'src/app/services/utils/opersrx';\r\nimport { withDestroy, withForm } from 'src/app/shared/base/mixings-comp';\r\nimport { FilterPost } from '../../models/models';\r\nimport  * as PostsActions from '../../store/actions/posts.actions';\r\nimport { selectorLoadingPosts, selectorsList } from '../../store/selectors/posts.selectors';\r\n\r\n@Component({\r\n  selector: 'app-list-posts',\r\n  templateUrl: './list-posts.component.html',\r\n  styleUrls: ['./list-posts.component.scss']\r\n})\r\n@NameLog('ListPostsComponent')\r\nexport class ListPostsComponent extends withForm(\r\n  withDestroy(\r\n  BaseComponent)) implements OnInit {\r\n\r\n  aux!:string;\r\n  posts$ = this.store.select(selectorsList.selectListData);\r\n  loading$ = this.store.select(selectorLoadingPosts);\r\n  filter$ = this.store.select(selectorsList.selectFilter);\r\n  linksStatus$ = this.store.select(selectorsList.selectLinksStatus);\r\n  sort$ = this.store.select(selectorsList.selectSort);\r\n\r\n  constructor( private store: Store, public override injector:Injector) {super(injector) }\r\n\r\n  override ngOnInit(): void {\r\n    this.store.dispatch(PostsActions.loadInitPosts());\r\n    this.subjectFields$.pipe(rxDestroy(this as any),rxlogth(this)('fields form subject')).subscribe()\r\n    super.ngOnInit();\r\n  }\r\n\r\n  filterList(filter:FilterPost){\r\n    this.store.dispatch(PostsActions.filterPosts({filter}));    \r\n  }\r\n\r\n  paginate(typeEventPagination:TypeEventPagination){\r\n    this.store.dispatch(PostsActions.paginationPosts({typeEventPagination}));    \r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.store.dispatch(PostsActions.sortPosts({sortInfo:sort as SortInfo}));    \r\n    \r\n  }\r\n\r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-posts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                }
            },
            "templateData": "<p>list-posts works!</p>\r\n\r\n\r\n<h1>List Posts</h1>\r\n\r\n<app-form (onAccept)=\"filterList($event)\">\r\n  <ng-container [formGroup]=\"group\" *formg=\"let group\">\r\n    <div class=\"flex flex-row\">\r\n      <app-text-field [name]=\"'title'\" [label]=\"'Filter by title'\" [value]=\"(filter$ | async)?.title\" MatField [validations]=\"validations\">\r\n      </app-text-field>\r\n      <app-text-field [name]=\"'author'\" [label]=\"'Filter by author'\" [value]=\"(filter$ | async)?.author\" MatField>\r\n      </app-text-field>\r\n    </div>\r\n  </ng-container>\r\n</app-form>\r\n<app-paginator [enablePrev]=\"linksStatus.prev\" [enableNext]=\"linksStatus.next\" [enableFirst]=\"linksStatus.first\" [enableLast]=\"linksStatus.last\"\r\n  (typeEvent)=\"paginate($event)\" *ngIf=\"linksStatus$ | async as linksStatus\"></app-paginator>\r\n\r\n  <ng-container *libLoading=\"(loading$ | async)\">\r\n  <app-table [dataSource]=\"posts$ | async\" (onSort)=\"sortData($event)\" [sortCurrent]=\"$any(sort$ | async)\">\r\n    <table-info>\r\n      <col-info [name]=\"'author'\" [header]=\"'Author Tpl'\" [typeCell]=\"'tpl'\" [sort]=\"true\">\r\n        <ng-template CellRender let-row>Author:{{ row.author }}</ng-template>\r\n      </col-info>\r\n      <col-info [name]=\"'title'\" [header]=\"'Title'\" [sort]=\"true\" [typeCell]=\"'extended'\"> </col-info>\r\n      <col-info [name]=\"'id'\" [header]=\"'Id'\" [sort]=\"true\"> </col-info>\r\n      <col-info [name]=\"'title'\" [header]=\"'Title'\" [sort]=\"true\"> </col-info>\r\n      <!-- <col-info [name]=\"'id'\" [header]=\"'Id'\" [typeCell]=\"'extended'\"> </col-info> -->\r\n    </table-info>\r\n  </app-table>\r\n</ng-container>\r\n\r\n"
        },
        {
            "name": "MaterialLayoutFieldComponent",
            "id": "component-MaterialLayoutFieldComponent-cdaa93c3a7de3f6de03410414ec9189824c1a51920b7ef68f088cbdb010dd779ca282f837f7aa1d02b5610db2455f90412e11c316b80020e7fbeaf9930dc65c7",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/material-layout-field/material-layout-field.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-material-layout-field",
            "styleUrls": [
                "./material-layout-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./material-layout-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatFormFieldControl<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "MatFormFieldControl, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_matFormField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatFormField",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatFormField, {static: true}"
                        }
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, ContentChild, Input, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-material-layout-field',\r\n  templateUrl: './material-layout-field.component.html',\r\n  styleUrls: ['./material-layout-field.component.scss'],\r\n  encapsulation:ViewEncapsulation.None\r\n})\r\nexport class MaterialLayoutFieldComponent implements OnInit {\r\n  @ContentChild(MatFormFieldControl, { static: true }) _control!: MatFormFieldControl<any>;\r\n  @ViewChild(MatFormField, { static: true }) _matFormField!: MatFormField;\r\n  control!: AbstractControl;\r\n\r\n  ngOnInit() {\r\n    this.control=this._control.ngControl as any;\r\n    this._matFormField._control = this._control;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./material-layout-field.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"fill\">\r\n  <mat-label><ng-content select=\"label\"></ng-content></mat-label>\r\n  <ng-content></ng-content>\r\n  <mat-error><app-mat-errors [control]=\"control\"></app-mat-errors></mat-error>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "MatErrorsComponent",
            "id": "component-MatErrorsComponent-0a6d4f0071584121aaaea969d871cfaa59d638ed20c84542d15326f97f21883405a3ee816435a5afe512ad38a5f432cd774ed33bf13e058f51acf86e20cc07ef",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/mat-errors/mat-errors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mat-errors",
            "styleUrls": [
                "./mat-errors.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mat-errors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormGroup, AbstractControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-mat-errors',\r\n  templateUrl: './mat-errors.component.html',\r\n  styleUrls: ['./mat-errors.component.scss']\r\n})\r\nexport class MatErrorsComponent implements OnInit {\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n  @Input()\r\n  control!: AbstractControl;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  get errors(){\r\n    return this.control?.errors?Object.keys(this.control?.errors as object):[];\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mat-errors.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                }
            },
            "templateData": "<div *ngFor=\"let err of errors\">{{err}}</div>   \r\n"
        },
        {
            "name": "MixComponent",
            "id": "component-MixComponent-e474e999a54bd7c82cf8ec10c1ec9f8831f5036ac3fb6fbafaf58e9ec65054b776e190f94230fa8795e011d1c8afb8ab3f6bb775f7509f15140c9d3d06716a63",
            "file": "src/app/users/components/mix/mix.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mix",
            "styleUrls": [
                "./mix.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mix.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataExtraInput",
                    "defaultValue": "'data Input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dataInput",
                    "defaultValue": "'data Input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { BaseComponent } from 'my-lib-display';\r\nimport { NameLog } from 'src/app/services/utils/logger';\r\nimport { withDestroy } from 'src/app/shared/base/mixings-comp';\r\nimport { InputExtraFields, InputFields } from '../users/users.component';\r\n\r\n@Component({\r\n  \r\n  selector: 'app-mix',\r\n  templateUrl: './mix.component.html',\r\n  styleUrls: ['./mix.component.scss'],\r\n // inputs:['dataInput']\r\n  \r\n})\r\n@NameLog('MixComponent')\r\nexport class MixComponent  extends InputExtraFields(InputFields(withDestroy(BaseComponent)))  implements OnInit {\r\n\r\n  @Input()  \r\n    override dataExtraInput: string='data Input';\r\n  @Input()  \r\n     override dataInput: string='data Input';\r\n\r\n\r\n  override ngOnInit(): void {\r\n    super.ngOnInit()\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mix.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>mix works!</p>\r\n<p>{{dataInput}}</p> \r\n<p>{{dataExtraInput}}</p>\r\n\r\ndataservice={{dataService |json}}\r\ndataExtraService={{dataExtraService |json}}\r\n"
        },
        {
            "name": "MyLibDisplayComponent",
            "id": "component-MyLibDisplayComponent-b19e82e444d73031602b44f6f0d4ab1e7b6b10c1aacf80e6ae85949e1f6dc191d98acb5c7d3403ecdc679d06de4c8ddceb491ff8a8ef9f9a9a9632286ea94b16",
            "file": "projects/my-lib-display/src/lib/my-lib-display.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-my-lib-display",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  my-lib-display works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-my-lib-display',\r\n  template: `\r\n    <p>\r\n      my-lib-display works!\r\n    </p>\r\n  `,\r\n  styles: [\r\n  ]\r\n})\r\nexport class MyLibDisplayComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "NumberFieldComponent",
            "id": "component-NumberFieldComponent-1d8451912a49a3ea4494e542568f10f0ead0fc1da55b1697a39dd6b7d535e63169ad5ed4e3dabe948d4ca07a299c0d1056c6a6794fabb1c797b1bce9551f5b67",
            "file": "projects/my-lib-display/src/lib/fields/components/number-field/number-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: FormField, useExisting: NumberFieldComponent }",
                    "type": "component"
                }
            ],
            "selector": "app-number-field",
            "styleUrls": [
                "./number-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./number-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormField } from '../../form-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-number-field',\r\n  templateUrl: './number-field.component.html',\r\n  styleUrls: ['./number-field.component.scss'],\r\n  providers:[{provide:FormField, useExisting: NumberFieldComponent}],\r\n})\r\nexport class NumberFieldComponent extends FormField  implements OnInit {\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./number-field.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "FormField",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n    <app-layout-field [parentFormGroup]=\"parentFormGroup\"  [labelTop]=\"labelTop\">\r\n      <label>{{ label }}</label>\r\n      <input type=\"number\" [formControlName]=\"name\" placeholder=\"'Insert number...'\"  />\r\n    </app-layout-field>\r\n  </ng-container>\r\n"
        },
        {
            "name": "NumberMatFieldComponent",
            "id": "component-NumberMatFieldComponent-616c840944b48758ec66175c84931a3c8d56752866d2df1d0acad4f1f19c3b93eda91f66795d8d270671e354b49961607b472625f17f890404bf7ec607578706",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/number-mat-field/number-mat-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: FormField, useExisting: NumberMatFieldComponent }",
                    "type": "component"
                }
            ],
            "selector": "lib-number-mat-field",
            "styleUrls": [
                "./number-mat-field.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./number-mat-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormField } from 'projects/my-lib-display/src/lib/fields/form-field.directive';\r\n\r\n@Component({\r\n  selector: 'lib-number-mat-field',\r\n  templateUrl: './number-mat-field.component.html',\r\n  styleUrls: ['./number-mat-field.component.css'],\r\n  providers:[{provide:FormField, useExisting: NumberMatFieldComponent}],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NumberMatFieldComponent extends FormField implements OnInit {\r\n\r\n  }\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./number-mat-field.component.css"
                }
            ],
            "stylesData": "",
            "extends": "FormField",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n    <app-material-layout-field >\r\n      <label>{{ label }}</label>\r\n      <input matInput [formControl]=\"control\" type=\"number\"  #con />\r\n     \r\n    </app-material-layout-field>\r\n    \r\n  \r\n  </ng-container>\r\n  \r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-10516e896f8c7c3d452a3aecd3f2d54eb0d4872c1e6a777f4ce99ef4150eb3a73e34f74d922cf8c681134d7b1955882bf7bc7cfa772fd6ecd46bc2a7fa588ec3",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Learn Storybook\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          docs\r\n        </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nh2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\np {\r\n  margin: 1em 0;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageErrorComponent",
            "id": "component-PageErrorComponent-e4bf70ab2e8d5f67c1f04f8f78e8f08e7b322493a64a604fff279c999b863a3941d9e5a2d59aa449be447bffa4d31cf5efcba8f6979d45de86d3d5fecbd6e0f7",
            "file": "src/app/page-error/page-error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-error",
            "styleUrls": [
                "./page-error.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error$",
                    "defaultValue": "this.store.select(selectError)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { selectError, selectErrorState } from '../store/selectors/error.selectors';\r\n\r\n@Component({\r\n  selector: 'app-page-error',\r\n  templateUrl: './page-error.component.html',\r\n  styleUrls: ['./page-error.component.scss']\r\n})\r\nexport class PageErrorComponent implements OnInit {\r\n\r\n  error$= this.store.select(selectError);\r\n\r\n  constructor(private store:Store) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-error.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>page-error works!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p>\r\n\r\nError Details:\r\n\r\n<div>\r\n    {{ error$ | async | json }}\r\n</div>\r\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-b5a0dbf54560bb4e247faf834d5d6e353fe9f6bfdf6e0be062541e309a05cbfa6fe12578783f45ed28992512a181d498ecb400d2c26ee5c80bdf91fcf51670d5",
            "file": "projects/my-lib-display/src/lib/material/paginator/paginator/paginator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-paginator",
            "styleUrls": [
                "./paginator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "enableFirst",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableLast",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableNext",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enablePrev",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "first",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "last",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "next",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                },
                {
                    "name": "prev",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "typeEvent",
                    "defaultValue": "new EventEmitter<TypeEventPagination>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onDestroy",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\r\nimport { Subject, takeUntil, tap } from 'rxjs';\r\n\r\nexport type TypeEventPagination='first' | 'last' | 'prev' | 'next';\r\n\r\n@Component({\r\n  selector: 'app-paginator',\r\n  templateUrl: './paginator.component.html',\r\n  styleUrls: ['./paginator.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaginatorComponent implements OnInit,OnDestroy {\r\n  @Output() next = new EventEmitter();\r\n  @Output() prev = new EventEmitter();\r\n  @Output() first = new EventEmitter();\r\n  @Output() last = new EventEmitter();\r\n\r\n  @Input() enableNext = true;\r\n  @Input() enableFirst = true;\r\n  @Input() enableLast = true;\r\n  @Input() enablePrev = true;\r\n\r\n  @Output() typeEvent = new EventEmitter<TypeEventPagination>();\r\n\r\n  onDestroy= new Subject();\r\n  \r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.typeEvent.pipe(\r\n      tap(type=> {\r\n        switch(type){\r\n          case 'first':\r\n            this.first.emit();\r\n            break;\r\n          case 'last':\r\n            this.last.emit();\r\n            break;\r\n          case 'next':\r\n            this.next.emit();\r\n            break;\r\n          case 'prev':       \r\n          this.prev.emit();\r\n          break;\r\n        }\r\n      }),\r\n      takeUntil(this.onDestroy)\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n///   this.onDestroy.next(true);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container-paginator{\r\n    mat-icon{\r\n    font-size: 3em; \r\n  } \r\n}",
                    "styleUrl": "./paginator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "\r\n<div class=\"container-paginator\">\r\n   <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\" (click)=\"typeEvent.emit('first')\" [disabled]=\"!enableFirst\">\r\n    <mat-icon>first_page</mat-icon>\r\n   </button>\r\n   <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\" (click)=\"typeEvent.emit('prev')\" [disabled]=\"!enablePrev\">\r\n    <mat-icon>chevron_left</mat-icon>\r\n   </button>\r\n   <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\" (click)=\"typeEvent.emit('next')\" [disabled]=\"!enableNext\">\r\n    <mat-icon>chevron_right</mat-icon>\r\n   </button>\r\n   <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\" (click)=\"typeEvent.emit('last')\" [disabled]=\"!enableLast\" >\r\n    <mat-icon>last_page</mat-icon>\r\n   </button>\r\n</div>  "
        },
        {
            "name": "SelectFieldComponent",
            "id": "component-SelectFieldComponent-9997919e2af104cd68a778cf4ccb94717b3bfa221dd58492b62719fd7f681b97f24263dfb62dcd9bc7fe886baf90522292f8c150227b10ee009f10319eb3d2ab",
            "file": "projects/my-lib-display/src/lib/fields/components/select-field/select-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: FormField, useExisting: SelectFieldComponent }",
                    "type": "component"
                }
            ],
            "selector": "app-select-field:not([MatField])",
            "styleUrls": [
                "./select-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "listItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_listItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[] | null",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { FormField } from '../../form-field.directive';\r\nimport { setDelay } from '../../utils';\r\n\r\nexport type Item= {value: string, desc:string};\r\n\r\n@Component({\r\n  selector: 'app-select-field:not([MatField])',\r\n  templateUrl: './select-field.component.html',\r\n  styleUrls: ['./select-field.component.scss'],\r\n  providers:[{provide:FormField, useExisting: SelectFieldComponent}],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SelectFieldComponent extends FormField  implements OnInit {\r\n  private _listItems: Item[] | null = [];\r\n  @Input()  \r\n  public set listItems(value: Item[] | null) {\r\n    this._listItems = value;\r\n    setDelay(()=>value && value?.length>1?this.control?.setValue(this.defaultValue):this.control?.setValue(value ?value[0]?.value:''))\r\n    \r\n   \r\n  } \r\n  public get listItems(): Item[] | null {\r\n    return this._listItems;\r\n  }\r\n\r\n  @Input()\r\n  defaultValue:string='';\r\n \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select-field.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "FormField",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "listItems": {
                    "name": "listItems",
                    "setSignature": {
                        "name": "listItems",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Item[] | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Item[] | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "listItems",
                        "type": "",
                        "returnType": "[] | null",
                        "line": 23
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n    <app-layout-field [parentFormGroup]=\"parentFormGroup\" [labelTop]=\"labelTop\">\r\n      <label>{{ label }}</label>\r\n      <select class=\"custos-select\" [formControlName]=\"name\">\r\n        <option value=\"\" disabled>Choose item...</option>\r\n        <option *ngFor=\"let item of listItems\" [ngValue]=\"item.value\">{{item.desc}}</option>\r\n     </select>\r\n    </app-layout-field>\r\n</ng-container>\r\n  \r\n"
        },
        {
            "name": "SelectFieldMaterialComponent",
            "id": "component-SelectFieldMaterialComponent-749623034a95486c460fa94a31ba81fa9427dbd8685bf816a349adbd66b955cee72c3f9a1899df845dabf75a0d13a5b02e68f4e79232657da04601167fefd6ab",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/select-field-material/select-field-material.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-field[MatField]",
            "styleUrls": [
                "./select-field-material.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-field-material.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "SelectFieldComponent"
                    }
                },
                {
                    "name": "listItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "",
                    "decorators": [],
                    "inheritance": {
                        "file": "SelectFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_listItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[] | null",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "SelectFieldComponent"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { SelectFieldComponent } from 'projects/my-lib-display/src/lib/fields/fields.module';\r\n\r\n\r\n@Component({\r\n  selector: 'app-select-field[MatField]',\r\n  templateUrl: './select-field-material.component.html',\r\n  styleUrls: ['./select-field-material.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n\r\n})\r\nexport class SelectFieldMaterialComponent extends SelectFieldComponent implements OnInit {\r\n\r\n \r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select-field-material.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "SelectFieldComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-material-layout-field >\r\n  <label>{{label}}</label>\r\n  <mat-select  [formControl]=\"control\" >\r\n    <mat-option value=\"\" disabled>Choose item...</mat-option>\r\n    <mat-option *ngFor=\"let item of listItems\" [value]=\"item.value\">{{ item.desc }}</mat-option>\r\n  </mat-select>  \r\n</app-material-layout-field>\r\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-d44e5ddcc71a852c6b367f673289aa1a8ef57f75e0de6edb2b5773757305ed54c1e2388fd69e1c5c8fb93c9fd1ffcc96310b16820ccf5960ef9bc2a74ebd4620",
            "file": "projects/my-lib-display/src/lib/material/spinner/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-spinner",
            "styleUrls": [
                "./spinner.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressSpinnerMode",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "value",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\r\n\r\n@Component({\r\n  selector: 'lib-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.css']\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n\r\n  color: ThemePalette = 'primary';\r\n  mode: ProgressSpinnerMode = 'indeterminate';\r\n  value = 50;\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./spinner.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-progress-spinner class=\"spin\" [color]=\"color\" [mode]=\"mode\"></mat-progress-spinner>\r\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-f327268fc6e9782ccdfc4117b96250465aaf910c5ef8310a5542f5d0fac3b2ee3c9288f3a50c11aaa75dd424e1ae2be6b2a08644ae9c00a492ff711b10d08bde",
            "file": "projects/my-lib-display/src/lib/tabs/tab/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tplTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'refTab'"
                        }
                    ]
                },
                {
                    "name": "tplTab2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'refTab2'"
                        }
                    ]
                },
                {
                    "name": "tplTabContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tab',\r\n  templateUrl: './tab.component.html',\r\n  styleUrls: ['./tab.component.scss']\r\n})\r\nexport class TabComponent implements OnInit {\r\n  @Input()\r\n  name!:string;\r\n\r\n  @Input()\r\n  value!:string;\r\n\r\n  @ContentChild(TemplateRef)\r\n  tplTabContainer!:TemplateRef<any>;\r\n\r\n  @ViewChild('refTab')\r\n  tplTab!:TemplateRef<any>;\r\n  \r\n  @ViewChild('refTab2')\r\n  tplTab2!:TemplateRef<any>;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tab{\r\n    border: 2px solid lightgrey;\r\n    padding: 30px;\r\n}",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>tab works!</p>\r\n\r\n\r\n<ng-template #refTab let-tpl>\r\n    <div class=\"tab\">\r\n     <h3>Tab marcoa {{value}}:</h3>   \r\n    <ng-container [ngTemplateOutlet]=\"tpl\"></ng-container>\r\n   </div>\r\n</ng-template>\r\n\r\n\r\n<ng-template #refTab2 let-tpl>\r\n    <div class=\"tab\">\r\n     <h3>Tab marcob {{value}}:</h3>   \r\n    <ng-container [ngTemplateOutlet]=\"tpl\"></ng-container>\r\n   </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-166cdda2a8bd6164cf0b383fd00dceaa94cb72fc57329e959cd963c5c69726aa6dcc70a4959ab7c4578cbc80d413d2a57f3bba315cea1e778b1c8d4222fbd48e",
            "file": "projects/my-lib-display/src/lib/material/table/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "sortCurrent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Sort | null | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickRow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSort",
                    "defaultValue": "new EventEmitter<Sort>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "expandedElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "msort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "tableInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableInfoComponent",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TableInfoComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "expand",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nameCol",
                    "args": [
                        {
                            "name": "inf",
                            "type": "ColInfoComponent | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inf",
                            "type": "ColInfoComponent | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nameColFromInfo",
                    "args": [
                        {
                            "name": "name",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatSort, Sort } from '@angular/material/sort';\r\nimport { ColInfoComponent } from '../col-info/col-info.component';\r\nimport { TableInfoComponent } from '../table-info/table-info.component';\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss'],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\r\n      state('expanded', style({height: '*'})),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableComponent implements OnInit {\r\n  @Input()\r\n  dataSource: any;\r\n  @Output()\r\n  onClickRow= new EventEmitter();\r\n\r\n  @ContentChild(TableInfoComponent)\r\n  tableInfo!: TableInfoComponent;\r\n  msort!: MatSort;\r\n  @Output()\r\n  onSort = new EventEmitter<Sort>();\r\n  @Input()\r\n  sortCurrent!:Sort|null|undefined;\r\n  @ViewChild(MatSort)\r\n  set matSort(matSort: MatSort) {\r\n    this.msort = matSort;\r\n    this.msort.sortChange.subscribe((s) => {\r\n    this.expandedElement=null;\r\n    this.onSort.emit({\r\n     direction:s.direction,\r\n     active: this.tableInfo.colsInfo.find(c=> this.nameCol(c)===s.active)?.name as string\r\n    })\r\n  });    \r\n  }\r\n  expandedElement:any;\r\n  constructor(private detect:ChangeDetectorRef) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  get displayedColumns() {\r\n    return this.tableInfo.colsInfo.map((c) => this.nameCol(c));\r\n  }\r\n\r\n  nameCol(inf: ColInfoComponent|undefined) {\r\n    return `${inf?.name}-${inf?.typeCell}`;\r\n  }\r\n\r\n  nameColFromInfo(name:string|null|undefined):string{\r\n    if(!name) return ''\r\n    return this.nameCol(this.tableInfo.colsInfo.find(c=> c.name===name))\r\n    \r\n  }\r\n  expand(row:any){\r\n    this.onClickRow.emit(row);\r\n    this.expandedElement=row;\r\n  \r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table {\r\n    width: 100%;\r\n  }\r\n\r\n  table {\r\n    width: 100%;\r\n  }\r\n  \r\n  tr.example-detail-row {\r\n    height: 0;\r\n  }\r\n  \r\n  tr.example-element-row:not(.example-expanded-row):hover {\r\n    background: #f5f5f5;\r\n  }\r\n  \r\n  tr.example-element-row:not(.example-expanded-row):active {\r\n    background: #efefef;\r\n  }\r\n  \r\n  .example-element-row td {\r\n    border-bottom-width: 0;\r\n  }\r\n  \r\n  .example-element-detail {\r\n    overflow: hidden;\r\n    display: flex;\r\n  }\r\n  \r\n  .example-element-diagram {\r\n    min-width: 80px;\r\n    border: 2px solid black;\r\n    padding: 8px;\r\n    font-weight: lighter;\r\n    margin: 8px 0;\r\n    height: 104px;\r\n  }\r\n  \r\n  .example-element-symbol {\r\n    font-weight: bold;\r\n    font-size: 40px;\r\n    line-height: normal;\r\n  }\r\n  \r\n  .example-element-description {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .example-element-description-attribution {\r\n    opacity: 0.5;\r\n  }\r\n  ",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "matSort": {
                    "name": "matSort",
                    "setSignature": {
                        "name": "matSort",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "matSort",
                                "type": "MatSort",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "matSort",
                                "type": "MatSort",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "displayedColumns": {
                    "name": "displayedColumns",
                    "getSignature": {
                        "name": "displayedColumns",
                        "type": "",
                        "returnType": "",
                        "line": 49
                    }
                }
            },
            "templateData": "<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort  multiTemplateDataRows\r\n[matSortActive]=\"nameColFromInfo(sortCurrent?.active)\"  [matSortDirection]=\"$any(sortCurrent?.direction)\" matSortDisableClear>\r\n  <!--- Note that these columns can be defined in any order.\r\n          The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n  <!-- Position Column -->\r\n\r\n  <ng-container *ngFor=\"let colInfo of tableInfo.colsInfo\" [matColumnDef]=\"nameCol(colInfo)\">\r\n    <ng-container *ngIf=\"colInfo.sort; else notsort\"\r\n      ><th mat-header-cell *matHeaderCellDef mat-sort-header>{{ colInfo.header }}</th>\r\n    </ng-container>\r\n\r\n    <ng-template #notsort>\r\n      <th mat-header-cell *matHeaderCellDef>{{ colInfo.header }}</th>\r\n    </ng-template>\r\n    <td mat-cell *matCellDef=\"let element\" [ngSwitch]=\"colInfo.typeCell\">\r\n      <ng-container *ngSwitchCase=\"'tpl'\" [ngTemplateOutlet]=\"colInfo.cellRender\" [ngTemplateOutletContext]=\"{ $implicit: element }\"></ng-container>\r\n      <div *ngSwitchCase=\"'normal'\">{{ element[colInfo.name] }}</div>\r\n      <div *ngSwitchCase=\"'extended'\">Extended:{{ element[colInfo.name] }}</div>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr\r\n    mat-row\r\n    *matRowDef=\"let row; columns: displayedColumns\"\r\n    class=\"example-element-row\"\r\n    [class.example-expanded-row]=\"expandedElement === row\"\r\n    (click)=\"expand(row)\"\r\n  ></tr>\r\n  <ng-container *ngIf=\"tableInfo.rowDetailTpl\">\r\n    <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\r\n    <ng-container matColumnDef=\"expandedDetail\">\r\n      <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"tableInfo.colsInfo.length\">\r\n        <!-- <div class=\"example-element-detail\" [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\"> -->\r\n          <div class=\"example-element-detail\" *ngIf=\"element === expandedElement\">\r\n          <ng-container [ngTemplateOutlet]=\"tableInfo.rowDetailTpl\" [ngTemplateOutletContext]=\"{ $implicit: element }\"></ng-container>\r\n        </div>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr>\r\n  </ng-container>\r\n</table>\r\n"
        },
        {
            "name": "TableInfoComponent",
            "id": "component-TableInfoComponent-97acc7386cfcbb749b834c75e531896f3778acb7bca4e3243c463418325338ddbed077cee22a9cffdddb0459fe3e154927fab697a9dfd4ec9df8c70cd61b787e",
            "file": "projects/my-lib-display/src/lib/material/table/table-info/table-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "table-info",
            "styleUrls": [
                "./table-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colsInfoComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ColInfoComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ColInfoComponent"
                        }
                    ]
                },
                {
                    "name": "rowDetailTpl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "RowDetailDirective, {read: TemplateRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, ContentChildren, OnInit, QueryList, TemplateRef } from '@angular/core';\r\nimport { ColInfoComponent } from '../col-info/col-info.component';\r\nimport { RowDetailDirective } from './row-detail.directive';\r\n\r\n@Component({\r\n  selector: 'table-info',\r\n  templateUrl: './table-info.component.html',\r\n  styleUrls: ['./table-info.component.scss']\r\n})\r\nexport class TableInfoComponent implements OnInit {\r\n\r\n  @ContentChildren(ColInfoComponent)\r\n  colsInfoComp!:QueryList<ColInfoComponent> ; \r\n  @ContentChild(RowDetailDirective,{read: TemplateRef})\r\n  rowDetailTpl!:TemplateRef<any>; \r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  get colsInfo(){\r\n    return this.colsInfoComp.toArray();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "colsInfo": {
                    "name": "colsInfo",
                    "getSignature": {
                        "name": "colsInfo",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                }
            },
            "templateData": "<p>table-info works!</p>\r\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-b443d7f86ca9242c18f1af66124aef271805b1cf5576012d0e9bb0556b31e8bbe6592e99ce0abe3d6f2b726b8380c3e7971dec70247479129ef09499a3300858",
            "file": "projects/my-lib-display/src/lib/tabs/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabComponent",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tabsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, ChangeDetectorRef, Component, ContentChildren, OnInit, QueryList } from '@angular/core';\r\nimport { setDelay } from '../../fields/utils';\r\nimport { TabComponent } from '../tab/tab.component';\r\n\r\n@Component({\r\n  selector: 'app-tabs',\r\n  templateUrl: './tabs.component.html',\r\n  styleUrls: ['./tabs.component.scss']\r\n})\r\nexport class TabsComponent implements OnInit,AfterContentInit {\r\n   \r\n  @ContentChildren(TabComponent)\r\n  tabsList!:QueryList<TabComponent>;\r\n\r\n  tabSelected!:TabComponent;\r\n\r\n  constructor(private detect:ChangeDetectorRef) { }\r\n  ngAfterContentInit(): void {\r\n \r\n  setDelay (()=>this.selectTab(this.tabs[0].name))\r\n//  this.detect.detectChanges();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n\r\n get tabs(){\r\n   return this.tabsList?.toArray()\r\n }\r\n\r\nselectTab(name:string){\r\n  this.tabSelected= this.tabs.find(t=>t.name===name) as TabComponent;\r\n}\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "accessors": {
                "tabs": {
                    "name": "tabs",
                    "getSignature": {
                        "name": "tabs",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "templateData": "<p>tabs works!</p>\r\n<ul>\r\n    <li *ngFor=\"let tab of tabs\" (click)=\"selectTab(tab.name)\">\r\n       {{tab.name}} \r\n    </li>\r\n</ul>\r\n\r\n<div *ngIf=\"tabSelected\">\r\n    <ng-container [ngTemplateOutlet]=\"tabSelected.tplTab\" [ngTemplateOutletContext]=\"{$implicit: tabSelected.tplTabContainer}\"></ng-container>\r\n    <ng-container [ngTemplateOutlet]=\"tabSelected.tplTab2\" [ngTemplateOutletContext]=\"{$implicit: tabSelected.tplTabContainer}\"></ng-container>\r\n\r\n</div>"
        },
        {
            "name": "TextFieldComponent",
            "id": "component-TextFieldComponent-50cb78d089d85144fc54eb8dd508780b9a19443ee5661800d7248a3267193d297118cfbc4671a0e572600445a180d9a33c7a2674c6f21de2ae10c49741f20a52",
            "file": "projects/my-lib-display/src/lib/fields/components/text-field/text-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: FormField, useExisting: TextFieldComponent }",
                    "type": "component"
                }
            ],
            "selector": "app-text-field:not([MatField])",
            "styleUrls": [
                "./text-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormField } from '../../form-field.directive';\r\n\r\n@Component({\r\n  //selector: 'app-text-field:not([MatField]):not([formg])', // for more exceptions \r\n  selector: 'app-text-field:not([MatField])',\r\n  templateUrl: './text-field.component.html',\r\n  styleUrls: ['./text-field.component.scss'],\r\n  providers:[{provide:FormField, useExisting: TextFieldComponent}], \r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TextFieldComponent  extends FormField implements OnInit {\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./text-field.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "FormField",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n  <app-layout-field [parentFormGroup]=\"parentFormGroup\" [labelTop]=\"labelTop\">\r\n    <label>{{ label }}</label>\r\n    <input type=\"text\" [formControlName]=\"name\" placeholder=\"'Insert ...'\"  />\r\n  </app-layout-field>\r\n</ng-container>\r\n"
        },
        {
            "name": "TextMatFieldComponent",
            "id": "component-TextMatFieldComponent-fc4e4536247dab718f94894cbd1be3feb74e355bbfe45b05cd4108b168d8b9d48174919496bfe289cf5bc0314efba74ac90d1080eea91d4ee6bf2fd93345b653",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/text-mat-field/text-mat-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: FormField, useExisting: TextMatFieldComponent }",
                    "type": "component"
                }
            ],
            "selector": "app-text-field[MatField]",
            "styleUrls": [
                "./text-mat-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-mat-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormField } from '../../../../fields/form-field.directive';\r\n\r\n@Component({\r\n  //selector: 'app-text-field[MatField][formg]', //for  more ibludes\r\n  selector: 'app-text-field[MatField]',\r\n  templateUrl: './text-mat-field.component.html',\r\n  styleUrls: ['./text-mat-field.component.scss'],\r\n  // take care wirh import , it musb realtive import base class\r\n  providers:[{provide:FormField, useExisting: TextMatFieldComponent}],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n  })\r\nexport class TextMatFieldComponent extends FormField  implements OnInit {\r\n\r\n  \r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./text-mat-field.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "FormField",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n  <app-material-layout-field >\r\n    <label>{{ label }}</label>\r\n    <input matInput [formControl]=\"control\" #con />\r\n   \r\n  </app-material-layout-field>\r\n  \r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "UsersComponent",
            "id": "component-UsersComponent-a30d064829cc82265c6a86f41ad82db4693b3fd79eb11eec04ccf9208194cd83aeea824e71b16e7fcf2cf9641ec4d6932facf0c9b9ac6db258f60d82871a1f93",
            "file": "src/app/users/components/users/users.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-users",
            "styleUrls": [
                "./users.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./users.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, Directive, Injector, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { BaseComponent, Constructor, IBaseMIxings } from 'my-lib-display';\r\nimport { interval } from 'rxjs';\r\nimport { NameLog } from 'src/app/services/utils/logger';\r\nimport { rxDestroy, rxlogth } from 'src/app/services/utils/opersrx';\r\nimport { ITest, withDestroy } from 'src/app/shared/base/mixings-comp';\r\nimport { MyService } from '../../my.service';\r\nimport { MixComponent } from '../mix/mix.component';\r\n\r\n\r\n\r\n\r\n\r\nfunction UserCompFields<TBase extends Constructor>(Base: TBase) {\r\n  return class extends Base implements ITest{\r\n    name: string = 'my name ';\r\n    email: string = 'my email'\r\n    dataServicexx: any;\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n      const inj: Injector = this.injector;\r\n      //consoleApp(this).log('inject UserCompFields=', inj, inj?.get(MyService))\r\n      this.dataServicexx = inj?.get(MyService).getData();\r\n    }\r\n    test!: () => void;\r\n\r\n  };\r\n}\r\n\r\n// join interfaces IBaseMIxings and ITest if we want specific, we must avoid this way. Couple between mixins\r\nfunction DataCompFields<TBase extends Constructor<IBaseMIxings>>(Base: TBase) {\r\n  return class extends Base {\r\n    dataExtra: string = 'my data extra ';\r\n    dataAux: string = 'my data Aux'\r\n    dataService: any;\r\n\r\n    constructor(...args: any[]) {\r\n      super(...args);\r\n      //args.forEach(a=> consoleApp(this).log('name 1', a.constructor.name))\r\n      //const inj:Injector=args.find(a=> a.constructor.name === 'NodeInjector')\r\n      const inj: Injector = this.injector;\r\n      //consoleApp(this).log('injector DataCompFields=', inj, inj?.get(MyService))\r\n      this.dataService = inj?.get(MyService).dataService;\r\n      // check if test exits. then we call it \r\n      if((this as any).test) (<any>this).test(); // check test, depends on other mixing\r\n\r\n    }\r\n  };\r\n}\r\n\r\nexport function InputFields<TBase extends Constructor>(Base: TBase) {\r\n  @Directive()\r\n  class Temporary extends Base implements OnInit {\r\n\r\n    @Input()\r\n    dataInput: string = 'data Input';\r\n\r\n    dataService: any;\r\n\r\n\r\n    override init(...args: any[]) {\r\n      super.init(...args)\r\n      const inj: Injector = this.injector;\r\n      //consoleApp(this).log('inject InputFields=', inj, inj?.get(MyService))\r\n      this.dataService = inj?.get(MyService).dataService;\r\n      \r\n      \r\n    }\r\n\r\n    override ngOnInit(): void {\r\n      //this.testObs().subscribe();\r\n      super.ngOnInit()\r\n    }\r\n\r\n    testObs() {\r\n      return interval(2000).pipe(\r\n        rxlogth(this)('Interval'),\r\n        rxDestroy(this as any)\r\n      )\r\n    }\r\n\r\n  };\r\n  return Temporary;\r\n}\r\n\r\nexport function InputExtraFields<TBase extends Constructor>(Base: TBase) {\r\n  @Directive()\r\n  class Temporary extends Base {\r\n\r\n    @Input()\r\n    dataExtraInput: string = 'data Input';\r\n\r\n    dataExtraService: any;\r\n\r\n\r\n    override init(...args: any[]) {\r\n      super.init(...args);\r\n      const inj: Injector = this.injector;\r\n      //consoleApp(this).log('inject InputExtraFields', inj, inj?.get(MyService))\r\n      this.dataExtraService = inj?.get(MyService).dataService;\r\n      \r\n    }\r\n\r\n  };\r\n  return Temporary;\r\n}\r\n\r\nexport function MixView<TBase extends Constructor>(Base: TBase) {\r\n  @Directive()\r\n  class Temporary extends Base implements AfterViewInit {\r\n\r\n    @ViewChild(MixComponent)\r\n    mixComponent!: MixComponent;\r\n    dataChild: any;\r\n    detect!: ChangeDetectorRef;\r\n\r\n    override init(...args: any[]) {\r\n      super.init(...args);\r\n      const inj: Injector = this.injector;\r\n      this.detect = inj.get(ChangeDetectorRef)\r\n      \r\n    }\r\n    override ngAfterViewInit(): void {\r\n      //consoleApp(this).log('MIx component', this.mixComponent);\r\n      this.dataChild = { extra: this.mixComponent.dataExtraService, data: this.mixComponent.dataService };\r\n      this.detect.detectChanges();\r\n      super.ngAfterViewInit();\r\n\r\n    }\r\n  };\r\n  return Temporary;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss']\r\n})\r\n@NameLog('UsersComponent')\r\nexport class UsersComponent extends UserCompFields(MixView(DataCompFields(withDestroy(BaseComponent)))) implements OnInit {\r\n\r\n  // constructor(){\r\n\r\n  // }\r\n\r\n  override ngOnInit(): void {\r\n    //consoleApp(this).log('router state', this.router?.routerState)\r\n    super.ngOnInit()\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./users.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>users works***************!</p>\r\n\r\n<p>{{dataBase}}</p>\r\n\r\n<!-- <p>email={{email}}</p> -->\r\n\r\n<p>dataExtra={{dataExtra}}</p>\r\n\r\n<p>dataService={{dataService | json}}</p>\r\n\r\n<p>dataService xx={{dataServicexx | json}}</p>\r\n\r\n<p>data child = {{dataChild | json}}</p>\r\n\r\n<app-mix [dataInput]=\"'Working data app mix'\" [dataExtraInput]=\"'working data input'\"></app-mix>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-7e34fac29195343df9ee57625fa40dc7a2a19c36ae77fac29dce199f421cb23562be9cc169d5fb1b0d33874320c134455758cdcba78e76ff9b1ea0b11b034b26",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { ErrorHandler, NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { MyLibDisplayModule } from 'my-lib-display';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { reducers, metaReducers } from './store/reducers';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { environment } from 'src/environments/environment';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { AppEffects } from './store/effects/app.effects';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport * as fromError from './store/reducers/error.reducer';\r\nimport { ErrorEffects } from './store/effects/error.effects';\r\nimport { GlobalErrorHandler } from './services/errorHandler';\r\nimport { PageErrorComponent } from './page-error/page-error.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    PageErrorComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    MyLibDisplayModule,\r\n    HttpClientModule,\r\n    StoreModule.forRoot(reducers, { metaReducers }),\r\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\r\n    EffectsModule.forRoot([AppEffects,ErrorEffects]),\r\n    StoreModule.forFeature(fromError.errorFeatureKey, fromError.reducer),    \r\n    \r\n  ],\r\n  providers: [{provide:ErrorHandler, useClass:GlobalErrorHandler}],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "PageErrorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "!environment"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "MyLibDisplayModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f02cbb197d63f35a857767ec8ff3a8dba178fe61067824029e48cb5c121b97b2f526dd49f5957e0c620db5c15c5a77beb1acc173f94494e28aaa36757ae53637",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageErrorComponent } from './page-error/page-error.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'demo', loadChildren: () => \"import('./demo-lib/demo-lib.module').then(m => m.DemoLibModule)\"},\r\n  { path: 'posts', loadChildren: () => \"import('./posts/posts.module').then(m => m.PostsModule)\"},\r\n  { path: 'users', loadChildren: () => \"import('./users/users.module').then(m => m.UsersModule)\"},\r\n  { path: 'error', component: PageErrorComponent}\r\n\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-d108eaaec80cebdcd6c9eed065fd3e2f419147c1a4766072fe44e66fa6b9c98c34eabe0021bcabf52a598a40b5146599d8b9fedba2c41713e4a1261a68fc4adb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport { ButtonComponent } from './button/button.component';\r\n\r\nexport {ButtonComponent};\r\n@NgModule({\r\n  declarations: [\r\n    ButtonComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule\r\n  ],\r\n  exports:[ButtonComponent]\r\n})\r\nexport class ButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComplexFieldsModule",
            "id": "module-ComplexFieldsModule-39d839e1ee2cc54a6944b9cbd9667da474ecdc35a83025779d9d445b47510793e02e111666e4ebbc9c0ad2a7b88177f0c8265e3379def18d31e105cea9f817e2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/complex-fields/complex-fields.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Complex2FieldComponent } from './complex2-field/complex2-field.component';\r\nimport { ComplexFieldComponent } from './complex-field/complex-field.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldsModule } from '../fields/fields.module';\r\nexport {Complex2FieldComponent,ComplexFieldComponent};\r\n\r\n\r\n@NgModule({\r\n  declarations: [Complex2FieldComponent,ComplexFieldComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FieldsModule\r\n  ],\r\n  exports: [Complex2FieldComponent,ComplexFieldComponent],\r\n})\r\nexport class ComplexFieldsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Complex2FieldComponent"
                        },
                        {
                            "name": "ComplexFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FieldsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Complex2FieldComponent"
                        },
                        {
                            "name": "ComplexFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemoLibModule",
            "id": "module-DemoLibModule-0c7af891ef5c521d299dcb974b65c8073cca5a12b6cecaaec20ce8cc78faef6a62a271dc039d66ccb488bda2b37039c079c5563ad2c280c178e014dee33e41e6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/demo-lib/demo-lib.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ComplexFieldsModule, FieldsModule, FormModule, MaterialFieldsModule, TableModule, TabsModule } from 'my-lib-display';\r\nimport { AppComponentDemo } from './app.component';\r\nimport { DemoLibRoutingModule } from './demo-lib-routing.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [AppComponentDemo],\r\n  imports: [\r\n    CommonModule,\r\n    DemoLibRoutingModule,\r\n    FormModule,\r\n    FieldsModule,\r\n     TableModule,\r\n     TabsModule,\r\n     MaterialFieldsModule,\r\n     ComplexFieldsModule\r\n   // BrowserAnimationsModule\r\n  ]\r\n})\r\nexport class DemoLibModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponentDemo"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ComplexFieldsModule"
                        },
                        {
                            "name": "DemoLibRoutingModule"
                        },
                        {
                            "name": "FieldsModule"
                        },
                        {
                            "name": "FormModule"
                        },
                        {
                            "name": "MaterialFieldsModule"
                        },
                        {
                            "name": "TableModule"
                        },
                        {
                            "name": "TabsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemoLibRoutingModule",
            "id": "module-DemoLibRoutingModule-ea67d3afac6d0447c356e606dda8c97ac854a39e579653d835515fc245541fa52962560551c35b58aeda6fd8f9305546dd0bad061fddb6c69ed8794273ca707d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/demo-lib/demo-lib-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AppComponentDemo } from './app.component';\r\n\r\nconst routes: Routes = [\r\n  {path:'',component: AppComponentDemo}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DemoLibRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogModule",
            "id": "module-DialogModule-25a4a2ff7d68d2b025a1cc5751e7f14cba6c8342486fc168e9236a939c7658d496debbdfb00ad7960f0b7c391b659c0e3e9233834a5c1c53f2c0c8b5a7cf11b0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/dialog/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { DialogService } from './dialog.service';\r\nimport { AbstractDialogComponent } from './abstract-dialog/abstract-dialog.component';\r\n\r\nexport {DialogService, AbstractDialogComponent};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DialogComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatIconModule\r\n  ],\r\n  providers:[DialogService]\r\n})\r\nexport class DialogModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FieldsModule",
            "id": "module-FieldsModule-b25adc7d2af4b086740ebb6e574bae580b0e7856e963d325ca462f479622981940d3cd399b345665da561458ea18e94d80188222bbc892ad962763661e15591d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/fields/fields.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { EmailFieldComponent } from './components/email-field/email-field.component';\r\nimport { GroupFieldComponent } from './components/group-field/group-field.component';\r\nimport { LayoutFieldComponent } from './components/layout-field/layout-field.component';\r\nimport { NumberFieldComponent } from './components/number-field/number-field.component';\r\nimport { Item, SelectFieldComponent } from './components/select-field/select-field.component';\r\nimport { TextFieldComponent } from './components/text-field/text-field.component';\r\nimport { FormField } from './form-field.directive';\r\n\r\n\r\nexport {TextFieldComponent,\r\n  GroupFieldComponent,\r\n  SelectFieldComponent,Item,\r\n  EmailFieldComponent,\r\n  NumberFieldComponent,\r\nLayoutFieldComponent,\r\nFormField};\r\n\r\n@NgModule({\r\n  declarations: [ \r\n    TextFieldComponent,\r\n    GroupFieldComponent,\r\n    LayoutFieldComponent,\r\n    SelectFieldComponent,\r\n    EmailFieldComponent,\r\n    NumberFieldComponent,\r\n  ],\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  exports: [\r\n    TextFieldComponent,\r\n    GroupFieldComponent,\r\n    SelectFieldComponent,\r\n    EmailFieldComponent,\r\n    NumberFieldComponent,\r\n    LayoutFieldComponent\r\n  ],\r\n})\r\nexport class FieldsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EmailFieldComponent"
                        },
                        {
                            "name": "GroupFieldComponent"
                        },
                        {
                            "name": "LayoutFieldComponent"
                        },
                        {
                            "name": "NumberFieldComponent"
                        },
                        {
                            "name": "SelectFieldComponent"
                        },
                        {
                            "name": "TextFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EmailFieldComponent"
                        },
                        {
                            "name": "GroupFieldComponent"
                        },
                        {
                            "name": "LayoutFieldComponent"
                        },
                        {
                            "name": "NumberFieldComponent"
                        },
                        {
                            "name": "SelectFieldComponent"
                        },
                        {
                            "name": "TextFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormCommentModule",
            "id": "module-FormCommentModule-4374518ecc7e830dcfecdc007fead951aa7ceee0873d187a1f4b59634a7422ce7d223752a656aa261546d33863162bb2e654fff108af0903ac16cf627fa5037b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/posts/components/form-comment/form.comment.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { ButtonModule, DialogModule, FormModule, MaterialFieldsModule } from \"my-lib-display\";\r\nimport { FormCommentComponent } from \"./form-comment.component\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n      FormCommentComponent\r\n    ],\r\n    imports: [\r\n      CommonModule,\r\n      FormModule,\r\n      MaterialFieldsModule,      \r\n      ButtonModule\r\n    ],\r\n    exports:[\r\n        FormCommentComponent\r\n    ]\r\n  })\r\n  export class FormCommentModule { }\r\n  ",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormCommentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "FormModule"
                        },
                        {
                            "name": "MaterialFieldsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormCommentComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormModule",
            "id": "module-FormModule-a044c59fff332aafe2b730688695c53536df1dbf4887ca5f38170dd0f1a8b417e6b4ff55ff81f9c6f5a44a9f7e5982e05a0a5624453c0f6ec3cb95be130d1179",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/form/form.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonModule } from '../button/button.module';\r\nimport { FormComponent } from './components/form.component';\r\nimport { FormgDirective } from './components/formg.directive';\r\n\r\n\r\nexport { FormComponent };\r\nexport { FormgDirective };\r\nexport * from './mixinsForm';\r\n@NgModule({\r\n  declarations: [\r\n    FormComponent, FormgDirective,\r\n\r\n  ],\r\n  imports: [CommonModule, ReactiveFormsModule, ButtonModule],\r\n  exports: [\r\n    ReactiveFormsModule,\r\n    FormComponent,\r\n    FormgDirective,\r\n  ],\r\n})\r\nexport class FormModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "FormgDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "FormgDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialFieldsModule",
            "id": "module-MaterialFieldsModule-16451825d192a0f38e2d0a1aadfdc78d824955ea604be68855c3a8760e7552f3ef3b77a3db2d3723f2a0deb9a2f3ad20771b093e9a0d2a45bbc51160e6955b1c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/material-fields/material-fields.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatErrorsComponent } from './components/mat-errors/mat-errors.component';\r\nimport { MatFieldDirective } from './components/mat-field.directive';\r\nimport { MaterialLayoutFieldComponent } from './components/material-layout-field/material-layout-field.component';\r\nimport { SelectFieldMaterialComponent } from './components/select-field-material/select-field-material.component';\r\nimport { TextMatFieldComponent } from './components/text-mat-field/text-mat-field.component';\r\nimport { NumberMatFieldComponent } from './components/number-mat-field/number-mat-field.component';\r\n\r\nexport { TextMatFieldComponent, MatFieldDirective, SelectFieldMaterialComponent,NumberMatFieldComponent };\r\n\r\n\r\n@NgModule({\r\n  declarations: [TextMatFieldComponent, MatFieldDirective, SelectFieldMaterialComponent, MatErrorsComponent, MaterialLayoutFieldComponent, NumberMatFieldComponent],\r\n  imports: [CommonModule,ReactiveFormsModule, MatFormFieldModule, MatInputModule, MatSelectModule],\r\n  exports: [TextMatFieldComponent, MatFieldDirective, SelectFieldMaterialComponent,NumberMatFieldComponent],\r\n})\r\nexport class MaterialFieldsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MatErrorsComponent"
                        },
                        {
                            "name": "MatFieldDirective"
                        },
                        {
                            "name": "MaterialLayoutFieldComponent"
                        },
                        {
                            "name": "NumberMatFieldComponent"
                        },
                        {
                            "name": "SelectFieldMaterialComponent"
                        },
                        {
                            "name": "TextMatFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MatFieldDirective"
                        },
                        {
                            "name": "NumberMatFieldComponent"
                        },
                        {
                            "name": "SelectFieldMaterialComponent"
                        },
                        {
                            "name": "TextMatFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MyLibDisplayModule",
            "id": "module-MyLibDisplayModule-acb8b30e1a2fa160d8d697881b40b74b2c3c653905ab15a64aa19a5c5f8df06a42b73cdfc4e88f472a72f6b1d6f1d7d67bef8cadb072fc289e6b345abe00783e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/my-lib-display.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MyLibDisplayComponent } from './my-lib-display.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MyLibDisplayComponent\r\n  ],\r\n  imports: [\r\n    BrowserAnimationsModule,\r\n  ],\r\n  exports: [\r\n    MyLibDisplayComponent\r\n    \r\n  ]\r\n})\r\nexport class MyLibDisplayModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MyLibDisplayComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MyLibDisplayComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaginatorModule",
            "id": "module-PaginatorModule-6d8141499bcf24b0fe31c77e5b8007c9906db35d61c833827963413d211ed33553f0f38fb7a4c98922d84b98bf6a08c4978ce6219a25b9338678ca6d1e8c2f16",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/paginator/paginator.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PaginatorComponent, TypeEventPagination } from './paginator/paginator.component';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nexport {PaginatorComponent,TypeEventPagination};\r\n\r\n@NgModule({\r\n  declarations: [PaginatorComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule\r\n  ],\r\n  exports:[PaginatorComponent]\r\n})\r\nexport class PaginatorModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostsModule",
            "id": "module-PostsModule-b2539b1bb11c4307a36115c6a5c281c5c65acf3cef6044c21cdd73d44d60930e81bb8da71e8264a465208f4130b2e5ffe7ad7f1b9d5e2ae065cdccf67d8d2c70",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/posts/posts.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { ButtonModule, ComplexFieldsModule, DialogModule, FieldsModule, FormModule, MaterialFieldsModule, PaginatorModule, SpinnerModule, TableModule } from 'my-lib-display';\r\nimport { ListPostsComponent } from './pages/list-posts/list-posts.component';\r\nimport { PostsRoutingModule } from './posts-routing.module';\r\nimport { CommentsService } from './services/comments.service';\r\nimport { PostsService } from './services/posts.service';\r\nimport { PostsEffects } from './store/effects/posts.effects';\r\nimport * as fromIndex from './store/reducers';\r\nimport { ListCommentsComponent } from './pages/list-comments/list-comments.component';\r\nimport { CommentsEffects } from './store/effects/comments.effects';\r\nimport { LoadingEffects } from './store/effects/loading.effects';\r\nimport { FormCommentModule } from './components/form-comment/form.comment.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ListPostsComponent,\r\n    ListCommentsComponent,\r\n  //  FormCommentComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PostsRoutingModule,\r\n    FormModule,\r\n    MaterialFieldsModule,\r\n    TableModule,\r\n    SpinnerModule,\r\n    PaginatorModule,\r\n    ButtonModule,\r\n    DialogModule,\r\n    FormCommentModule,\r\n    StoreModule.forFeature(fromIndex.postsStateFeatureKey, fromIndex.reducers),\r\n    EffectsModule.forFeature([PostsEffects,CommentsEffects,LoadingEffects])\r\n  ],\r\n  providers: [\r\n    PostsService,CommentsService\r\n\r\n  ],\r\n})\r\nexport class PostsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CommentsService"
                        },
                        {
                            "name": "PostsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ListCommentsComponent"
                        },
                        {
                            "name": "ListPostsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DialogModule"
                        },
                        {
                            "name": "FormCommentModule"
                        },
                        {
                            "name": "FormModule"
                        },
                        {
                            "name": "MaterialFieldsModule"
                        },
                        {
                            "name": "PaginatorModule"
                        },
                        {
                            "name": "PostsRoutingModule"
                        },
                        {
                            "name": "SpinnerModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostsRoutingModule",
            "id": "module-PostsRoutingModule-5a1c521ca15b248aa24a9d799f3352034a7eabb9575e9c1db37326e9c9b753caf41218f78123d894497d913c9c5910449dcacdc8520f79013d961f8eb2339e8e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/posts/posts-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ListCommentsComponent } from './pages/list-comments/list-comments.component';\r\nimport { ListPostsComponent } from './pages/list-posts/list-posts.component';\r\n\r\nconst routes: Routes = [\r\n  {path:'',component: ListPostsComponent},\r\n  {path:'comments',component: ListCommentsComponent},\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PostsRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpinnerModule",
            "id": "module-SpinnerModule-d95e12da60c6eb24eaf10e402a2dd1e974e8a014c9153e3a60bb56e00e8240ad083d450786365baac85c238c13d157fc189c2046aea105ef65fad9eeb344ebd6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/spinner/spinner.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SpinnerComponent } from './spinner/spinner.component';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { SpinnerLoadingDirective } from './spinner-loading.directive'\r\n\r\nexport {SpinnerComponent,SpinnerLoadingDirective};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SpinnerComponent,\r\n    SpinnerLoadingDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatProgressSpinnerModule\r\n  ],\r\n  exports:[\r\n    SpinnerComponent,\r\n    SpinnerLoadingDirective\r\n  ]\r\n})\r\nexport class SpinnerModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "SpinnerLoadingDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "SpinnerLoadingDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "id": "module-TableModule-339f6660804eb16d9b591ceefdbdfef69902d03ac57fe70d01d6b4c272cd52eec81bf238009439a89744a83b3934a5bb9544e99ef829fccf85364c67d5acd4e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport { TableComponent } from './table/table.component';\r\nimport { TableInfoComponent } from './table-info/table-info.component';\r\nimport { ColInfoComponent } from './col-info/col-info.component';\r\nimport { CellRenderDirective } from './col-info/cell-render.directive';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { RowDetailDirective } from './table-info/row-detail.directive';\r\n\r\n\r\nexport {TableComponent,TableInfoComponent,\r\n  ColInfoComponent,CellRenderDirective,RowDetailDirective};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TableComponent,\r\n    TableInfoComponent,\r\n    ColInfoComponent,\r\n    CellRenderDirective,\r\n    RowDetailDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatSortModule,\r\n    MatTableModule\r\n  ],\r\n  exports:[TableComponent,TableInfoComponent,\r\n    ColInfoComponent,CellRenderDirective,RowDetailDirective]\r\n})\r\nexport class TableModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CellRenderDirective"
                        },
                        {
                            "name": "ColInfoComponent"
                        },
                        {
                            "name": "RowDetailDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableInfoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CellRenderDirective"
                        },
                        {
                            "name": "ColInfoComponent"
                        },
                        {
                            "name": "RowDetailDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableInfoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsModule",
            "id": "module-TabsModule-f8a5563ad11a531e17a6ce8c81d70222a7966f534a6fbff7fb0eebac2866028d7d9e75592423e9d8b9cb4149db87ff486f2e1e2eb19be19d9700c5bf6d03c537",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TabComponent } from './tab/tab.component';\r\nimport { TabsComponent } from './tabs/tabs.component';\r\n\r\nexport { TabComponent,\r\n  TabsComponent};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TabComponent,\r\n    TabsComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports:[\r\n    TabComponent,\r\n    TabsComponent\r\n  ]\r\n})\r\nexport class TabsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersModule",
            "id": "module-UsersModule-acafd0231d779dcf0815c0b6b6ad6d454d0cee56bdf7982de21411ba561f80c32c45a4b5d80fa4efd2b09ca3c61da6d9ea8d8763932c11e77a838bf9571aa95c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/users/users.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MixComponent } from './components/mix/mix.component';\r\nimport { UsersComponent } from './components/users/users.component';\r\nimport { UsersRoutingModule } from './users-routing.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UsersComponent,\r\n    MixComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    UsersRoutingModule\r\n  ]\r\n})\r\nexport class UsersModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MixComponent"
                        },
                        {
                            "name": "UsersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UsersRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersRoutingModule",
            "id": "module-UsersRoutingModule-3308a527682fb23478c0303079bd5dbe3fc2199cbd896d9edca2b0e66e2b5b6e07b54c190825da8c1a6f72dce93f5df8181c46d329ad3234c35b52c13686a0f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/users/users-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UsersComponent } from './components/users/users.component';\r\n\r\nconst routes: Routes = [\r\n  {path:'',component:UsersComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addComment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Add Comment',\r\n  props<{data : Comment}>() \r\n)"
            },
            {
                "name": "addCommentFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Add Comment Failure',\r\n  props<{ error: any }>()             \r\n)"
            },
            {
                "name": "addCommentSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Add Commentss Success'  \r\n)"
            },
            {
                "name": "addDialogComment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Add Dialog Comments' \r\n)",
                "rawdescription": "End Actions for list",
                "description": "<p>End Actions for list</p>\n"
            },
            {
                "name": "CommentRespBodyXsd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/models/comment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.array(CommentXsd)"
            },
            {
                "name": "CommentRespXsd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/models/comment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\r\n  body:   CommentRespBodyXsd\r\n}\r\n)"
            },
            {
                "name": "CommentXsd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/models/comment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\r\n  id: (z.number().gt(0)),\r\n  comment: z.string(),\r\n  author: z.string()\r\n})"
            },
            {
                "name": "consoleAppx",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/utils/logger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IConsole",
                "defaultValue": "{\r\n log:(msg: string,...params:any[])=>  logApp('data',msg,params),\r\n debug:(msg: string,...params:any[])=>  logApp('info',msg,params),\r\n warn:(msg: string,...params:any[])=>  logApp('warn',msg,params),\r\n info:(msg: string,...params:any[])=>  logApp('info',msg,params),\r\n error:(msg: string,...params:any[])=>  logApp('error',msg,params)\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/my-lib-display/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "editDialogComment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Edit Dialog Comment' ,\r\n  props<{data : Comment}>()\r\n)",
                "rawdescription": "End",
                "description": "<p>End</p>\n"
            },
            {
                "name": "ELEMENT_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/demo-lib/app.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PeriodicElement[]",
                "defaultValue": "[\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n]"
            },
            {
                "name": "ELEMENT_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/formfields.normal.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PeriodicElement[]",
                "defaultValue": "[\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n]"
            },
            {
                "name": "ELEMENT_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/formfields.selects.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PeriodicElement[]",
                "defaultValue": "[\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n]"
            },
            {
                "name": "Enabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Enabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/main/app-form-comment.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  urlHostApi: 'http://localhost:5000',\r\n  urlHostCalendarApi: 'http://localhost:8000',\r\n  pathMonthDays:'month/formatbydays',\r\n  pathIssues:'issue',\r\n  pathWork:'month/work',\r\n  pathWorkTask:'month/work/task',\r\n  pathHollidays:'hollidays',\r\n  pathContents: '/confluence/content/search',\r\n  pathContent: '/confluence/content',\r\n  urlApiLogin: '/login',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  urlHostApi: 'http://localhost:5000',\r\n  urlHostCalendarApi: 'http://localhost:8000',\r\n  pathMonthDays:'month/formatbydays',\r\n  pathIssues:'issue',\r\n  pathWork:'month/work',\r\n  pathWorkTask:'month/work/task',\r\n  pathHollidays:'hollidays',\r\n  pathContents: '/confluence/content/search',\r\n  pathContent: '/confluence/content',\r\n  urlApiLogin: '/login',\r\n}"
            },
            {
                "name": "errorFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/error.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'error'"
            },
            {
                "name": "errorGeneral",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Error] Error general',\r\n  ({error}:ErrorAction)=> ({error,general:true}) \r\n)"
            },
            {
                "name": "errorHandlerAngular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Error] Error Handler Angular',\r\n  ({error}:ErrorAction)=> ({error}) \r\n)"
            },
            {
                "name": "errorHttp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Error] Error Http',\r\n  ({error}:ErrorAction)=> ({error}) \r\n)"
            },
            {
                "name": "extraComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Extra Comments',\r\n  props<{data : string}>()\r\n)",
                "rawdescription": "End",
                "description": "<p>End</p>\n"
            },
            {
                "name": "filterComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Filter Comments',\r\n  props<{filter:FilterComment}>()\r\n)"
            },
            {
                "name": "filterPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Posts] Filter Posts',\r\n  props<{filter:FilterPost}>()\r\n)"
            },
            {
                "name": "FormFieldsAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Form-normal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FormFieldsAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Form-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FormFieldsAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "hideLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/loading.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Loading] Hide Loading',\r\n  props<{ actionHide :string, idGroupLoading?: string,   idLoading?: string  }>()\r\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/error.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StateError",
                "defaultValue": "{\r\n  \r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/loading.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\r\n  stack:[]\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/comments.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StateComments",
                "defaultValue": "{\r\n  extra:{\r\n    data:'Hola'\r\n  },\r\n  data: [],\r\n  loading:false,\r\n  filterListInfo: {\r\n    page: {\r\n      pageSize: 4,\r\n      pageIndex: 1\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/posts.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StateList",
                "defaultValue": "{\r\n  data: [],\r\n  loading: false,\r\n  filterListInfo: {\r\n    page: {\r\n      pageSize: 4,\r\n      pageIndex: 1\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Load Commentss', \r\n  (data:LoadInfo<FilterComment>)=>({...data,SHOW_LOADING: 'SHOW_LOADING'})  \r\n)"
            },
            {
                "name": "loadCommentssFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Load Commentss Failure',\r\n  props<{ error: any }>()             \r\n)"
            },
            {
                "name": "loadCommentssSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Load Commentss Success',\r\n  props<LoadInfoSuccces<FilterComment,Comment>>()\r\n)"
            },
            {
                "name": "loadErrorsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Error] Load Errors Failure',\r\n  props<{ error: any }>()\r\n)"
            },
            {
                "name": "loadingFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/loading.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'loading'"
            },
            {
                "name": "loadInitComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Load Init Comments'\r\n)",
                "rawdescription": "Actions for list",
                "description": "<p>Actions for list</p>\n"
            },
            {
                "name": "loadInitPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MyAction",
                "defaultValue": "createAction(\r\n  '[Posts] Load Init Posts'\r\n)"
            },
            {
                "name": "loadLoadingsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/loading.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Loading] Load Loadings Failure',\r\n  props<{ error: any }>()\r\n)"
            },
            {
                "name": "loadPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Posts] Load Postss', \r\n  (data:LoadInfo<FilterPost>)=>({...data,SHOW_LOADING: 'SHOW_LOADING'})  \r\n)"
            },
            {
                "name": "loadPostssFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Posts] Load Postss Failure',\r\n  props<{ error: any }>()\r\n)"
            },
            {
                "name": "loadPostssSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MyActionExact",
                "defaultValue": "createAction(\r\n  '[Posts] Load Postss Success',\r\n // props<{ data: Post[],link:string,filter:FilterPost,sortInfo:SortInfo,pageRequest:PageRequest }>()\r\n props<LoadInfoSuccces<FilterPost,Post>>()\r\n)"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mapNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/utils/logger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<string, number>",
                "defaultValue": "new Map()"
            },
            {
                "name": "mapNamesLevels",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/utils/logger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<string, Level[]>",
                "defaultValue": "new Map()"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production ? [] : []"
            },
            {
                "name": "nameLogPrototype",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/utils/logger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'nameLog'"
            },
            {
                "name": "paginationComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Pagination Comments',\r\n  props<{typeEventPagination :TypeEventPagination}>()\r\n)"
            },
            {
                "name": "paginationPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Posts] Pagination Posts',\r\n  props<{typeEventPagination :TypeEventPagination}>()\r\n)"
            },
            {
                "name": "PaginatorEnable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PostRespXsd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/models/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\r\n  body:   z.array(PostXsd)\r\n}\r\n)"
            },
            {
                "name": "postsFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/comments.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'posts'"
            },
            {
                "name": "postsFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/posts.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'posts'"
            },
            {
                "name": "postsStateFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'postsState'"
            },
            {
                "name": "PostXsd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/models/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\r\n  id: (z.number().gt(0)),\r\n  title: z.string(),\r\n  author: z.string()\r\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "queryBegin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Query begin',\r\n  props<{data : string}>()\r\n)",
                "rawdescription": "End",
                "description": "<p>End</p>\n"
            },
            {
                "name": "queryEnd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Query end',\r\n  props<{data : string}>()\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/error.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(ErrorActions.errorGeneral, (state, {error}) => ({...state,error })),\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/loading.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(LoadingActions.showLoading, (state, action:any) => {\r\n    const inf= state.stack.find(l=> l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading )\r\n    if(!inf){\r\n      return  {stack: [...state.stack,{idLoading:action.idLoading, idGroupLoading: action.idGroupLoading, actionSource: action.actionSource} ]}\r\n    }\r\n    return {...state};\r\n  }),\r\n  on(LoadingActions.hideLoading, (state, action) => {\r\n      return  {stack: state.stack.filter(l=> !(l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading))}\r\n     }),\r\n\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/comments.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducerList(initialState,CommentsActions.loadComments,CommentsActions.loadCommentssSuccess,CommentsActions.loadCommentssFailure,\r\n  on(CommentsActions.extraComments, (state:any, action) => ({...state,extra:action.data}))  \r\n  )"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/posts.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducerList(initialState,PostsActions.loadPosts,PostsActions.loadPostssSuccess,PostsActions.loadPostssFailure)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\r\n  loading: fromLoading.reducer,\r\n  error: fromError.reducer\r\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  posts: fromPosts.reducer,\r\n  comments: fromComments.reducer\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/my-lib-display/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectCommentsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/comments.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCommentsStateAll,\r\n  (state)=> state.comments\r\n)"
            },
            {
                "name": "selectCommentsStateAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/comments.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromIndex.AppState>(\r\n  fromIndex.postsStateFeatureKey\r\n)"
            },
            {
                "name": "selectError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/error.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectErrorState,\r\n  (state)=> state.error )"
            },
            {
                "name": "selectErrorState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/error.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromError.StateError>(\r\n  fromError.errorFeatureKey\r\n)"
            },
            {
                "name": "selectLoadingState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/loading.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromLoading.State>(\r\n  fromLoading.loadingFeatureKey\r\n)"
            },
            {
                "name": "selectorLoadingComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/comments.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelectorLoading('loadComments')"
            },
            {
                "name": "selectorLoadingPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/posts.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelectorLoading('loadPost')"
            },
            {
                "name": "selectorLoadingQuery",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/comments.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelectorLoadingGroup('querytest')"
            },
            {
                "name": "selectorsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/comments.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelectorsList(selectCommentsState)"
            },
            {
                "name": "selectorsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/posts.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelectorsList(selectPostsState)"
            },
            {
                "name": "selectPostsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/posts.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectPostsStateAll,\r\n  (state)=> state.posts\r\n)"
            },
            {
                "name": "selectPostsStateAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/posts.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromIndex.AppState>(\r\n  fromIndex.postsStateFeatureKey\r\n)"
            },
            {
                "name": "showLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/loading.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Loading] Show Loading',\r\n  props<{ actionSource: string, idGroupLoading?: string ,   idLoading?: string  }>()\r\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "sortComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Sort Comments',\r\n  props<{sortInfo: SortInfo}>()\r\n)"
            },
            {
                "name": "sortPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Posts] Sort Posts',\r\n  props<{sortInfo: SortInfo}>()\r\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  component: Button,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  component: Header,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  component: Page,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n  component: ButtonComponent,\r\n  props: {\r\n    ...args\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Form-normal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormFieldsNormalComponent>",
                "defaultValue": "(args: FormFieldsNormalComponent) => ({\r\n  component: FormFieldsNormalComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Form-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormFieldsSelectsComponent>",
                "defaultValue": "(args: FormFieldsSelectsComponent) => ({\r\n  component: FormFieldsSelectsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/main/app-form-comment.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormCommentComponent>",
                "defaultValue": "(args: FormCommentComponent) => ({\r\n  component:FormCommentComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PaginatorComponent>",
                "defaultValue": "(args: PaginatorComponent) => ({\r\n  component: PaginatorComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormFieldsComponent>",
                "defaultValue": "(args: FormFieldsComponent) => ({\r\n  component: FormFieldsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "updateComment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Update Comment',\r\n  props<{data : Comment}>() \r\n)"
            },
            {
                "name": "updateCommentFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Update Comment Failure',\r\n  props<{ error: any }>()             \r\n)"
            },
            {
                "name": "updateCommentSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Comments] Update Commentss Success'  \r\n)"
            },
            {
                "name": "xsdLoadInfoSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/models/filter.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\r\n  data: z.array(\r\n    z.any()\r\n  ),\r\n  link: z.string(),\r\n  filter: (z.any()),\r\n  sortInfo: xsdSortInfo.optional(),\r\n  pageRequest: xsdPageRequest,\r\n  type: z.string().optional(),\r\n})"
            },
            {
                "name": "xsdPageRequest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/models/filter.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\r\n  requestLink: z.string().optional(),\r\n  pageIndex: z.number().optional(), pageSize: z.number().optional() })"
            },
            {
                "name": "xsdSortInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/models/filter.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({ direction: z.union([z.literal('asc'),z.literal('desc')])  , active: z.string() })"
            }
        ],
        "functions": [
            {
                "name": "addError",
                "file": "src/app/demo-lib/validatosapp.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "err",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errors_",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "err",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errors_",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clearError",
                "file": "src/app/demo-lib/validatosapp.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "err",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errors_",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "err",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errors_",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "consoleApp",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "source",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "IConsole",
                "jsdoctags": [
                    {
                        "name": "source",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createData",
                "file": "src/app/demo-lib/app.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "DataSelect[]"
            },
            {
                "name": "createData",
                "file": "src/stories/library/formfields.normal.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "DataSelect[]"
            },
            {
                "name": "createData",
                "file": "src/stories/library/formfields.selects.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "DataSelect[]"
            },
            {
                "name": "createData",
                "file": "projects/my-lib-display/src/lib/fields/components/data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "DataSelect[]"
            },
            {
                "name": "createReducerList",
                "file": "src/app/services/base/reducer.list.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "initS",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadAction",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadSuccess",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadFailure",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ons",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "initS",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadAction",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadSuccess",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadFailure",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ons",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createSelectorLoading",
                "file": "src/app/store/selectors/loading.selectors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "idGroupLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "idLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "idGroupLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "idLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createSelectorLoadingGroup",
                "file": "src/app/store/selectors/loading.selectors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "idGroupLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "idGroupLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createSelectorsList",
                "file": "src/app/services/base/selectors.list.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "selectListState",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "selectListState",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "DataCompFields",
                "file": "src/app/users/components/users/users.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dev",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "mes",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "mes",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "filterLoadingId",
                "file": "src/app/store/selectors/loading.selectors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "obsLoading",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "idLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<boolean>",
                "jsdoctags": [
                    {
                        "name": "obsLoading",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "idLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getActions",
                "file": "src/app/services/base/abstractNgRx.loading.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getActions",
                "file": "src/app/posts/store/effects/loading.effects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFilterListInfo",
                "file": "src/app/services/base/reducer.list.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "action",
                        "type": "LoadInfoSuccces",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "FilterListInfo",
                "jsdoctags": [
                    {
                        "name": "action",
                        "type": "LoadInfoSuccces",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLoadingInfo",
                "file": "src/app/services/base/abstractNgRx.loading.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionLoadingInfo",
                "jsdoctags": [
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLoadingInfo",
                "file": "src/app/posts/store/effects/loading.effects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionLoadingInfo",
                "jsdoctags": [
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLogger",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>End consoleApp</p>\n",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "IConsole",
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNameLevels",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "[] | undefined",
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNameLog",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getUrlLink",
                "file": "src/app/services/base/reducer.list.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "link",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string | undefined | null",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 866,
                            "end": 870,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "link"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 860,
                            "end": 865,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Helper to get partial url</p>\n"
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "indicate",
                "file": "src/app/services/utils/indicate.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "indicator",
                        "type": "Subject",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "indicator",
                        "type": "Subject",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "InputExtraFields",
                "file": "src/app/users/components/users/users.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "InputFields",
                "file": "src/app/users/components/users/users.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "logApp",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "typeLog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "source",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "typeLog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "source",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "MixView",
                "file": "src/app/users/components/users/users.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "NameLog",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "nameLog",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "nameLog",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "prepare",
                "file": "src/app/services/utils/indicate.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "callback",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "callback",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "refreshNamesLevels",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "rxDestroy",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "source",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "log",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "source",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "log",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxend",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "this",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "this",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxErrorRest",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "enable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "returnType": "Observable<any>",
                "jsdoctags": [
                    {
                        "name": "enable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxFilterNE",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "enable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "returnType": "Observable<any>",
                "jsdoctags": [
                    {
                        "name": "enable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxlog",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "this",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "this",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxlogth",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "source",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'rxlog'"
                    },
                    {
                        "name": "typeLog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'log'"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "source",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'rxlog'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "typeLog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'log'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxZod",
                "file": "src/app/services/utils/zodrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "schemaZod",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "typeValidation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'warning'"
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "schemaZod",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "typeValidation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'warning'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setDelay",
                "file": "projects/my-lib-display/src/lib/fields/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "fn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setNamesLevels",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "names",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "names",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortList",
                "file": "src/app/demo-lib/app.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "asc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortList",
                "file": "src/stories/library/formfields.normal.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "asc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortList",
                "file": "src/stories/library/formfields.selects.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "asc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "updateLevelLog",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "UserCompFields",
                "file": "src/app/users/components/users/users.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "withDestroy",
                "file": "src/app/shared/base/mixings-comp.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "withForm",
                "file": "src/app/shared/base/mixings-comp.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "withFormButtons",
                "file": "src/app/shared/base/mixings-comp.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "Base",
                        "type": "TBase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ActionLoadingInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/services/base/abstractNgRx.loading.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ActionLoadingInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/posts/store/effects/loading.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ActionsLoading",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type[]",
                "file": "src/app/services/base/abstractNgRx.loading.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "ActionsLoading",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type[]",
                "file": "src/app/posts/store/effects/loading.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "Comment",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "src/app/posts/models/comment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Constructor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/my-lib-display/src/lib/shared/modelMixing.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 179
            },
            {
                "name": "ErrorAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/store/actions/error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IResponseComments",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/posts/models/comment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IResponseData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/services/models/filter.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IResponsePosts",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/posts/models/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Item",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/my-lib-display/src/lib/fields/components/select-field/select-field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "LoadingInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/store/reducers/loading.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MyActinFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FunctionWithParametersType< | >",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "MyAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ActionCreator<any | TypedAction<any>>",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "MyActionExact",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ActionCreator<any | >",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "NameLevels",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/services/utils/logger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "PageRequest",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "src/app/services/models/filter.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Post",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "src/app/posts/models/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "SortInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "src/app/services/models/filter.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "TypeCell",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"normal\" | \"extended\" | \"tpl\"",
                "file": "projects/my-lib-display/src/lib/material/table/col-info/col-info.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TypeEventPagination",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"first\" | \"last\" | \"prev\" | \"next\"",
                "file": "projects/my-lib-display/src/lib/material/paginator/paginator/paginator.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [
            {
                "name": "NamesLog",
                "childs": [
                    {
                        "name": "UserStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "logged"
                    },
                    {
                        "name": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PostsService"
                    },
                    {
                        "name": "CommentsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CommentsService"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/utils/names-classes.ts"
            }
        ],
        "groupedVariables": {
            "src/app/posts/store/actions/comments.actions.ts": [
                {
                    "name": "addComment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Add Comment',\r\n  props<{data : Comment}>() \r\n)"
                },
                {
                    "name": "addCommentFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Add Comment Failure',\r\n  props<{ error: any }>()             \r\n)"
                },
                {
                    "name": "addCommentSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Add Commentss Success'  \r\n)"
                },
                {
                    "name": "addDialogComment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Add Dialog Comments' \r\n)",
                    "rawdescription": "End Actions for list",
                    "description": "<p>End Actions for list</p>\n"
                },
                {
                    "name": "editDialogComment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Edit Dialog Comment' ,\r\n  props<{data : Comment}>()\r\n)",
                    "rawdescription": "End",
                    "description": "<p>End</p>\n"
                },
                {
                    "name": "extraComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Extra Comments',\r\n  props<{data : string}>()\r\n)",
                    "rawdescription": "End",
                    "description": "<p>End</p>\n"
                },
                {
                    "name": "filterComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Filter Comments',\r\n  props<{filter:FilterComment}>()\r\n)"
                },
                {
                    "name": "loadComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Load Commentss', \r\n  (data:LoadInfo<FilterComment>)=>({...data,SHOW_LOADING: 'SHOW_LOADING'})  \r\n)"
                },
                {
                    "name": "loadCommentssFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Load Commentss Failure',\r\n  props<{ error: any }>()             \r\n)"
                },
                {
                    "name": "loadCommentssSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Load Commentss Success',\r\n  props<LoadInfoSuccces<FilterComment,Comment>>()\r\n)"
                },
                {
                    "name": "loadInitComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Load Init Comments'\r\n)",
                    "rawdescription": "Actions for list",
                    "description": "<p>Actions for list</p>\n"
                },
                {
                    "name": "paginationComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Pagination Comments',\r\n  props<{typeEventPagination :TypeEventPagination}>()\r\n)"
                },
                {
                    "name": "queryBegin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Query begin',\r\n  props<{data : string}>()\r\n)",
                    "rawdescription": "End",
                    "description": "<p>End</p>\n"
                },
                {
                    "name": "queryEnd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Query end',\r\n  props<{data : string}>()\r\n)"
                },
                {
                    "name": "sortComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Sort Comments',\r\n  props<{sortInfo: SortInfo}>()\r\n)"
                },
                {
                    "name": "updateComment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Update Comment',\r\n  props<{data : Comment}>() \r\n)"
                },
                {
                    "name": "updateCommentFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Update Comment Failure',\r\n  props<{ error: any }>()             \r\n)"
                },
                {
                    "name": "updateCommentSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Comments] Update Commentss Success'  \r\n)"
                }
            ],
            "src/app/posts/models/comment.ts": [
                {
                    "name": "CommentRespBodyXsd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/models/comment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.array(CommentXsd)"
                },
                {
                    "name": "CommentRespXsd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/models/comment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\r\n  body:   CommentRespBodyXsd\r\n}\r\n)"
                },
                {
                    "name": "CommentXsd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/models/comment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\r\n  id: (z.number().gt(0)),\r\n  comment: z.string(),\r\n  author: z.string()\r\n})"
                }
            ],
            "src/app/services/utils/logger.ts": [
                {
                    "name": "consoleAppx",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/utils/logger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConsole",
                    "defaultValue": "{\r\n log:(msg: string,...params:any[])=>  logApp('data',msg,params),\r\n debug:(msg: string,...params:any[])=>  logApp('info',msg,params),\r\n warn:(msg: string,...params:any[])=>  logApp('warn',msg,params),\r\n info:(msg: string,...params:any[])=>  logApp('info',msg,params),\r\n error:(msg: string,...params:any[])=>  logApp('error',msg,params)\r\n}"
                },
                {
                    "name": "mapNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/utils/logger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string, number>",
                    "defaultValue": "new Map()"
                },
                {
                    "name": "mapNamesLevels",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/utils/logger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string, Level[]>",
                    "defaultValue": "new Map()"
                },
                {
                    "name": "nameLogPrototype",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/utils/logger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'nameLog'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/my-lib-display/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/my-lib-display/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/my-lib-display/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/library/lib-Button.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Enabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n  component: ButtonComponent,\r\n  props: {\r\n    ...args\r\n  },\r\n})"
                }
            ],
            "src/app/demo-lib/app.component.ts": [
                {
                    "name": "ELEMENT_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/demo-lib/app.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PeriodicElement[]",
                    "defaultValue": "[\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n]"
                }
            ],
            "src/stories/library/formfields.normal.component.ts": [
                {
                    "name": "ELEMENT_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/formfields.normal.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PeriodicElement[]",
                    "defaultValue": "[\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n]"
                }
            ],
            "src/stories/library/formfields.selects.component.ts": [
                {
                    "name": "ELEMENT_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/formfields.selects.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PeriodicElement[]",
                    "defaultValue": "[\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n]"
                }
            ],
            "src/stories/main/app-form-comment.stories.ts": [
                {
                    "name": "Enabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/main/app-form-comment.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/main/app-form-comment.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormCommentComponent>",
                    "defaultValue": "(args: FormCommentComponent) => ({\r\n  component:FormCommentComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  urlHostApi: 'http://localhost:5000',\r\n  urlHostCalendarApi: 'http://localhost:8000',\r\n  pathMonthDays:'month/formatbydays',\r\n  pathIssues:'issue',\r\n  pathWork:'month/work',\r\n  pathWorkTask:'month/work/task',\r\n  pathHollidays:'hollidays',\r\n  pathContents: '/confluence/content/search',\r\n  pathContent: '/confluence/content',\r\n  urlApiLogin: '/login',\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  urlHostApi: 'http://localhost:5000',\r\n  urlHostCalendarApi: 'http://localhost:8000',\r\n  pathMonthDays:'month/formatbydays',\r\n  pathIssues:'issue',\r\n  pathWork:'month/work',\r\n  pathWorkTask:'month/work/task',\r\n  pathHollidays:'hollidays',\r\n  pathContents: '/confluence/content/search',\r\n  pathContent: '/confluence/content',\r\n  urlApiLogin: '/login',\r\n}"
                }
            ],
            "src/app/store/reducers/error.reducer.ts": [
                {
                    "name": "errorFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/error.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'error'"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/error.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateError",
                    "defaultValue": "{\r\n  \r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/error.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(ErrorActions.errorGeneral, (state, {error}) => ({...state,error })),\r\n)"
                }
            ],
            "src/app/store/actions/error.actions.ts": [
                {
                    "name": "errorGeneral",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Error] Error general',\r\n  ({error}:ErrorAction)=> ({error,general:true}) \r\n)"
                },
                {
                    "name": "errorHandlerAngular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Error] Error Handler Angular',\r\n  ({error}:ErrorAction)=> ({error}) \r\n)"
                },
                {
                    "name": "errorHttp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Error] Error Http',\r\n  ({error}:ErrorAction)=> ({error}) \r\n)"
                },
                {
                    "name": "loadErrorsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Error] Load Errors Failure',\r\n  props<{ error: any }>()\r\n)"
                }
            ],
            "src/app/posts/store/actions/posts.actions.ts": [
                {
                    "name": "filterPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Posts] Filter Posts',\r\n  props<{filter:FilterPost}>()\r\n)"
                },
                {
                    "name": "loadInitPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyAction",
                    "defaultValue": "createAction(\r\n  '[Posts] Load Init Posts'\r\n)"
                },
                {
                    "name": "loadPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Posts] Load Postss', \r\n  (data:LoadInfo<FilterPost>)=>({...data,SHOW_LOADING: 'SHOW_LOADING'})  \r\n)"
                },
                {
                    "name": "loadPostssFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Posts] Load Postss Failure',\r\n  props<{ error: any }>()\r\n)"
                },
                {
                    "name": "loadPostssSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyActionExact",
                    "defaultValue": "createAction(\r\n  '[Posts] Load Postss Success',\r\n // props<{ data: Post[],link:string,filter:FilterPost,sortInfo:SortInfo,pageRequest:PageRequest }>()\r\n props<LoadInfoSuccces<FilterPost,Post>>()\r\n)"
                },
                {
                    "name": "paginationPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Posts] Pagination Posts',\r\n  props<{typeEventPagination :TypeEventPagination}>()\r\n)"
                },
                {
                    "name": "sortPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Posts] Sort Posts',\r\n  props<{sortInfo: SortInfo}>()\r\n)"
                }
            ],
            "src/stories/library/lib-Form-normal.stories.ts": [
                {
                    "name": "FormFieldsAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Form-normal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Form-normal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormFieldsNormalComponent>",
                    "defaultValue": "(args: FormFieldsNormalComponent) => ({\r\n  component: FormFieldsNormalComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/library/lib-Form-select.stories.ts": [
                {
                    "name": "FormFieldsAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Form-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Form-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormFieldsSelectsComponent>",
                    "defaultValue": "(args: FormFieldsSelectsComponent) => ({\r\n  component: FormFieldsSelectsComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/library/lib-Form.stories.ts": [
                {
                    "name": "FormFieldsAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormFieldsComponent>",
                    "defaultValue": "(args: FormFieldsComponent) => ({\r\n  component: FormFieldsComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/actions/loading.actions.ts": [
                {
                    "name": "hideLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/loading.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Loading] Hide Loading',\r\n  props<{ actionHide :string, idGroupLoading?: string,   idLoading?: string  }>()\r\n)"
                },
                {
                    "name": "loadLoadingsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/loading.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Loading] Load Loadings Failure',\r\n  props<{ error: any }>()\r\n)"
                },
                {
                    "name": "showLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/loading.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Loading] Show Loading',\r\n  props<{ actionSource: string, idGroupLoading?: string ,   idLoading?: string  }>()\r\n)"
                }
            ],
            "src/app/store/reducers/loading.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/loading.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\r\n  stack:[]\r\n}"
                },
                {
                    "name": "loadingFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/loading.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'loading'"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/loading.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(LoadingActions.showLoading, (state, action:any) => {\r\n    const inf= state.stack.find(l=> l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading )\r\n    if(!inf){\r\n      return  {stack: [...state.stack,{idLoading:action.idLoading, idGroupLoading: action.idGroupLoading, actionSource: action.actionSource} ]}\r\n    }\r\n    return {...state};\r\n  }),\r\n  on(LoadingActions.hideLoading, (state, action) => {\r\n      return  {stack: state.stack.filter(l=> !(l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading))}\r\n     }),\r\n\r\n)"
                }
            ],
            "src/app/posts/store/reducers/comments.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/comments.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateComments",
                    "defaultValue": "{\r\n  extra:{\r\n    data:'Hola'\r\n  },\r\n  data: [],\r\n  loading:false,\r\n  filterListInfo: {\r\n    page: {\r\n      pageSize: 4,\r\n      pageIndex: 1\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "postsFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/comments.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'posts'"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/comments.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducerList(initialState,CommentsActions.loadComments,CommentsActions.loadCommentssSuccess,CommentsActions.loadCommentssFailure,\r\n  on(CommentsActions.extraComments, (state:any, action) => ({...state,extra:action.data}))  \r\n  )"
                }
            ],
            "src/app/posts/store/reducers/posts.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/posts.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateList",
                    "defaultValue": "{\r\n  data: [],\r\n  loading: false,\r\n  filterListInfo: {\r\n    page: {\r\n      pageSize: 4,\r\n      pageIndex: 1\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "postsFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/posts.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'posts'"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/posts.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducerList(initialState,PostsActions.loadPosts,PostsActions.loadPostssSuccess,PostsActions.loadPostssFailure)"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  component: Button,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  component: Header,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  component: Page,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/reducers/index.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production ? [] : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\r\n  loading: fromLoading.reducer,\r\n  error: fromError.reducer\r\n}"
                }
            ],
            "src/stories/library/lib-Paginator.stories.ts": [
                {
                    "name": "PaginatorEnable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PaginatorComponent>",
                    "defaultValue": "(args: PaginatorComponent) => ({\r\n  component: PaginatorComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/posts/models/models.ts": [
                {
                    "name": "PostRespXsd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/models/models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\r\n  body:   z.array(PostXsd)\r\n}\r\n)"
                },
                {
                    "name": "PostXsd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/models/models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\r\n  id: (z.number().gt(0)),\r\n  title: z.string(),\r\n  author: z.string()\r\n})"
                }
            ],
            "src/app/posts/store/reducers/index.ts": [
                {
                    "name": "postsStateFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'postsState'"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  posts: fromPosts.reducer,\r\n  comments: fromComments.reducer\r\n}"
                }
            ],
            "src/app/posts/store/selectors/comments.selectors.ts": [
                {
                    "name": "selectCommentsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/comments.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCommentsStateAll,\r\n  (state)=> state.comments\r\n)"
                },
                {
                    "name": "selectCommentsStateAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/comments.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromIndex.AppState>(\r\n  fromIndex.postsStateFeatureKey\r\n)"
                },
                {
                    "name": "selectorLoadingComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/comments.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelectorLoading('loadComments')"
                },
                {
                    "name": "selectorLoadingQuery",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/comments.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelectorLoadingGroup('querytest')"
                },
                {
                    "name": "selectorsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/comments.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelectorsList(selectCommentsState)"
                }
            ],
            "src/app/store/selectors/error.selectors.ts": [
                {
                    "name": "selectError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/error.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectErrorState,\r\n  (state)=> state.error )"
                },
                {
                    "name": "selectErrorState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/error.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromError.StateError>(\r\n  fromError.errorFeatureKey\r\n)"
                }
            ],
            "src/app/store/selectors/loading.selectors.ts": [
                {
                    "name": "selectLoadingState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/loading.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromLoading.State>(\r\n  fromLoading.loadingFeatureKey\r\n)"
                }
            ],
            "src/app/posts/store/selectors/posts.selectors.ts": [
                {
                    "name": "selectorLoadingPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/posts.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelectorLoading('loadPost')"
                },
                {
                    "name": "selectorsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/posts.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelectorsList(selectPostsState)"
                },
                {
                    "name": "selectPostsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/posts.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectPostsStateAll,\r\n  (state)=> state.posts\r\n)"
                },
                {
                    "name": "selectPostsStateAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/posts.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromIndex.AppState>(\r\n  fromIndex.postsStateFeatureKey\r\n)"
                }
            ],
            "src/app/services/models/filter.model.ts": [
                {
                    "name": "xsdLoadInfoSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/models/filter.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\r\n  data: z.array(\r\n    z.any()\r\n  ),\r\n  link: z.string(),\r\n  filter: (z.any()),\r\n  sortInfo: xsdSortInfo.optional(),\r\n  pageRequest: xsdPageRequest,\r\n  type: z.string().optional(),\r\n})"
                },
                {
                    "name": "xsdPageRequest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/models/filter.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\r\n  requestLink: z.string().optional(),\r\n  pageIndex: z.number().optional(), pageSize: z.number().optional() })"
                },
                {
                    "name": "xsdSortInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/models/filter.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({ direction: z.union([z.literal('asc'),z.literal('desc')])  , active: z.string() })"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/demo-lib/validatosapp.ts": [
                {
                    "name": "addError",
                    "file": "src/app/demo-lib/validatosapp.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "err",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errors_",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errors_",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearError",
                    "file": "src/app/demo-lib/validatosapp.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "err",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errors_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errors_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/utils/logger.ts": [
                {
                    "name": "consoleApp",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "source",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "IConsole",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLogger",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>End consoleApp</p>\n",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IConsole",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNameLevels",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "[] | undefined",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNameLog",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logApp",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "typeLog",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "source",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "typeLog",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "source",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "NameLog",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "nameLog",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "nameLog",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshNamesLevels",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "setNamesLevels",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "names",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "names",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLevelLog",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/demo-lib/app.component.ts": [
                {
                    "name": "createData",
                    "file": "src/app/demo-lib/app.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "DataSelect[]"
                },
                {
                    "name": "sortList",
                    "file": "src/app/demo-lib/app.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "asc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "asc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/stories/library/formfields.normal.component.ts": [
                {
                    "name": "createData",
                    "file": "src/stories/library/formfields.normal.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "DataSelect[]"
                },
                {
                    "name": "sortList",
                    "file": "src/stories/library/formfields.normal.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "asc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "asc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/stories/library/formfields.selects.component.ts": [
                {
                    "name": "createData",
                    "file": "src/stories/library/formfields.selects.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "DataSelect[]"
                },
                {
                    "name": "sortList",
                    "file": "src/stories/library/formfields.selects.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "asc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "asc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/my-lib-display/src/lib/fields/components/data.ts": [
                {
                    "name": "createData",
                    "file": "projects/my-lib-display/src/lib/fields/components/data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "DataSelect[]"
                }
            ],
            "src/app/services/base/reducer.list.ts": [
                {
                    "name": "createReducerList",
                    "file": "src/app/services/base/reducer.list.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "initS",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadAction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadSuccess",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadFailure",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ons",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "initS",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadAction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadSuccess",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadFailure",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ons",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFilterListInfo",
                    "file": "src/app/services/base/reducer.list.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "action",
                            "type": "LoadInfoSuccces",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "FilterListInfo",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "LoadInfoSuccces",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUrlLink",
                    "file": "src/app/services/base/reducer.list.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "link",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string | undefined | null",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 866,
                                "end": 870,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "link"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 860,
                                "end": 865,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Helper to get partial url</p>\n"
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/selectors/loading.selectors.ts": [
                {
                    "name": "createSelectorLoading",
                    "file": "src/app/store/selectors/loading.selectors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "idGroupLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "idLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "idGroupLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSelectorLoadingGroup",
                    "file": "src/app/store/selectors/loading.selectors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "idGroupLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "idGroupLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterLoadingId",
                    "file": "src/app/store/selectors/loading.selectors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "obsLoading",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<boolean>",
                    "jsdoctags": [
                        {
                            "name": "obsLoading",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/base/selectors.list.ts": [
                {
                    "name": "createSelectorsList",
                    "file": "src/app/services/base/selectors.list.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "selectListState",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectListState",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/users/components/users/users.component.ts": [
                {
                    "name": "DataCompFields",
                    "file": "src/app/users/components/users/users.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "InputExtraFields",
                    "file": "src/app/users/components/users/users.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "InputFields",
                    "file": "src/app/users/components/users/users.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "MixView",
                    "file": "src/app/users/components/users/users.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UserCompFields",
                    "file": "src/app/users/components/users/users.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/utils/opersrx.ts": [
                {
                    "name": "dev",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "mes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "mes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxDestroy",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "source",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "log",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "log",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxend",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "this",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "this",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxErrorRest",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "enable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "returnType": "Observable<any>",
                    "jsdoctags": [
                        {
                            "name": "enable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxFilterNE",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "enable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "returnType": "Observable<any>",
                    "jsdoctags": [
                        {
                            "name": "enable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxlog",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "this",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "this",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxlogth",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "source",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'rxlog'"
                        },
                        {
                            "name": "typeLog",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'log'"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'rxlog'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeLog",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'log'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/base/abstractNgRx.loading.ts": [
                {
                    "name": "getActions",
                    "file": "src/app/services/base/abstractNgRx.loading.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoadingInfo",
                    "file": "src/app/services/base/abstractNgRx.loading.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionLoadingInfo",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/posts/store/effects/loading.effects.ts": [
                {
                    "name": "getActions",
                    "file": "src/app/posts/store/effects/loading.effects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoadingInfo",
                    "file": "src/app/posts/store/effects/loading.effects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionLoadingInfo",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/utils/indicate.ts": [
                {
                    "name": "indicate",
                    "file": "src/app/services/utils/indicate.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "indicator",
                            "type": "Subject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "indicator",
                            "type": "Subject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepare",
                    "file": "src/app/services/utils/indicate.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "callback",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "callback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/utils/zodrx.ts": [
                {
                    "name": "rxZod",
                    "file": "src/app/services/utils/zodrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "schemaZod",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "typeValidation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'warning'"
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "schemaZod",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeValidation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'warning'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/my-lib-display/src/lib/fields/utils.ts": [
                {
                    "name": "setDelay",
                    "file": "projects/my-lib-display/src/lib/fields/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/base/mixings-comp.ts": [
                {
                    "name": "withDestroy",
                    "file": "src/app/shared/base/mixings-comp.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withForm",
                    "file": "src/app/shared/base/mixings-comp.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withFormButtons",
                    "file": "src/app/shared/base/mixings-comp.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "Base",
                            "type": "TBase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/services/utils/names-classes.ts": [
                {
                    "name": "NamesLog",
                    "childs": [
                        {
                            "name": "UserStoreService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "logged"
                        },
                        {
                            "name": "PostsService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PostsService"
                        },
                        {
                            "name": "CommentsService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CommentsService"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/utils/names-classes.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/services/base/abstractNgRx.loading.ts": [
                {
                    "name": "ActionLoadingInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/services/base/abstractNgRx.loading.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "ActionsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type[]",
                    "file": "src/app/services/base/abstractNgRx.loading.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ],
            "src/app/posts/store/effects/loading.effects.ts": [
                {
                    "name": "ActionLoadingInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/posts/store/effects/loading.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "ActionsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type[]",
                    "file": "src/app/posts/store/effects/loading.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ],
            "src/app/posts/models/comment.ts": [
                {
                    "name": "Comment",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "src/app/posts/models/comment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "IResponseComments",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/posts/models/comment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/my-lib-display/src/lib/shared/modelMixing.ts": [
                {
                    "name": "Constructor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/my-lib-display/src/lib/shared/modelMixing.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 179
                }
            ],
            "src/app/store/actions/error.actions.ts": [
                {
                    "name": "ErrorAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/store/actions/error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/services/models/filter.model.ts": [
                {
                    "name": "IResponseData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/services/models/filter.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "PageRequest",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "src/app/services/models/filter.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "SortInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "src/app/services/models/filter.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/posts/models/models.ts": [
                {
                    "name": "IResponsePosts",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/posts/models/models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Post",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "src/app/posts/models/models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/my-lib-display/src/lib/fields/components/select-field/select-field.component.ts": [
                {
                    "name": "Item",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/my-lib-display/src/lib/fields/components/select-field/select-field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/store/reducers/loading.reducer.ts": [
                {
                    "name": "LoadingInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/store/reducers/loading.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/posts/store/actions/posts.actions.ts": [
                {
                    "name": "MyActinFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FunctionWithParametersType< | >",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "MyAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ActionCreator<any | TypedAction<any>>",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "MyActionExact",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ActionCreator<any | >",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/services/utils/logger.ts": [
                {
                    "name": "NameLevels",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/services/utils/logger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/my-lib-display/src/lib/material/table/col-info/col-info.component.ts": [
                {
                    "name": "TypeCell",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"normal\" | \"extended\" | \"tpl\"",
                    "file": "projects/my-lib-display/src/lib/material/table/col-info/col-info.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/my-lib-display/src/lib/material/paginator/paginator/paginator.component.ts": [
                {
                    "name": "TypeEventPagination",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"first\" | \"last\" | \"prev\" | \"next\"",
                    "file": "projects/my-lib-display/src/lib/material/paginator/paginator/paginator.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "demo",
                        "loadChildren": "./demo-lib/demo-lib.module#DemoLibModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/demo-lib/demo-lib-routing.module.ts",
                                        "module": "DemoLibRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AppComponentDemo"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DemoLibModule"
                            }
                        ]
                    },
                    {
                        "path": "posts",
                        "loadChildren": "./posts/posts.module#PostsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/posts/posts-routing.module.ts",
                                        "module": "PostsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ListPostsComponent"
                                            },
                                            {
                                                "path": "comments",
                                                "component": "ListCommentsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "PostsModule"
                            }
                        ]
                    },
                    {
                        "path": "users",
                        "loadChildren": "./users/users.module#UsersModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/users/users-routing.module.ts",
                                        "module": "UsersRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "UsersComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UsersModule"
                            }
                        ]
                    },
                    {
                        "path": "error",
                        "component": "PageErrorComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "projects/my-lib-display/src/lib/complex-fields/complex-field/complex-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComplexFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/complex-fields/complex2-field/complex2-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Complex2FieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSelect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/data.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/email-field/email-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmailFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/group-field/group-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/layout-field/layout-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/number-field/number-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/select-field/select-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/text-field/text-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/form-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormField",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setDelay",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/button/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/dialog/abstract-dialog/abstract-dialog.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AbstractDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/dialog/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/dialog/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/dialog/dialog/modelDialog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDialog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/form/components/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/form/components/formg.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormgDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/form/mixinsForm.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWithForm",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/form/mixinsForm.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWithFormButtons",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/mat-errors/mat-errors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatErrorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/mat-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MatFieldDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/material-layout-field/material-layout-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MaterialLayoutFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/number-mat-field/number-mat-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberMatFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/select-field-material/select-field-material.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectFieldMaterialComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/text-mat-field/text-mat-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextMatFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/paginator/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/spinner/spinner-loading.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SpinnerLoadingDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/spinner/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/table/col-info/cell-render.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CellRenderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/table/col-info/col-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/table/table-info/row-detail.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RowDetailDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/table/table-info/table-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/table/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/my-lib-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyLibDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/my-lib-display.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyLibDisplayService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/shared/abstract-app.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/shared/modelMixing.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseMIxings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/shared/modelMixing.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInit",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/tabs/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/tabs/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponentDemo",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSelect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PeriodicElement",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ELEMENT_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/validatosapp.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ValidatorsApp",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/validatosapp.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/validatosapp.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clearError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/page-error/page-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/components/form-comment/form-comment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormCommentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/comment.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterComment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/comment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentRespBodyXsd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/comment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentRespXsd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/comment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentXsd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PostRespXsd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PostXsd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/pages/list-comments/list-comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListCommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/pages/list-posts/list-posts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListPostsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/services/comments.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommentsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/services/posts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addComment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addCommentFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addCommentSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addDialogComment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editDialogComment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "extraComments",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCommentssFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCommentssSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadInitComments",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paginationComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "queryBegin",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "queryEnd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateComment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateCommentFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateCommentSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadInitPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPostssFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPostssSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paginationPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/effects/comments.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommentsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/effects/loading.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/effects/loading.effects.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/effects/loading.effects.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getLoadingInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/effects/posts.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/comments.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateComments",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/comments.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/comments.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postsFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/comments.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postsStateFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/posts.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/posts.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postsFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/posts.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/comments.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCommentsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/comments.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCommentsStateAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/comments.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectorLoadingComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/comments.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectorLoadingQuery",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/comments.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectorsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/posts.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectorLoadingPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/posts.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectorsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/posts.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/posts.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostsStateAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstract.entity.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractEntityService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstract.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AbstractService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstractNgRx.loading.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AbstractLoadingEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstractNgRx.loading.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstractNgRx.loading.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getLoadingInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstractNgRx.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AbstractListNgRxService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/reducer.list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/reducer.list.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createReducerList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/reducer.list.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFilterListInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/reducer.list.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getUrlLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/selectors.list.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createSelectorsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/errorHandler.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalErrorHandler",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterListInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectorsList",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadInfoSuccces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageInfo",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "xsdLoadInfoSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "xsdPageRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "xsdSortInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Entity",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/indicate.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "indicate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/indicate.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "prepare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConsoleApp",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConsole",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "consoleApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getLogger",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getNameLevels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getNameLog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "logApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "NameLog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "refreshNamesLevels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setNamesLevels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "updateLevelLog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "consoleAppx",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapNamesLevels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nameLogPrototype",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dev",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxDestroy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxend",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxErrorRest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxFilterNE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxlog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxlogth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/zodrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxZod",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/base/mixings-comp.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITest",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/base/mixings-comp.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "withDestroy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/base/mixings-comp.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "withForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/base/mixings-comp.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "withFormButtons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/error.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorGeneral",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/error.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorHandlerAngular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/error.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorHttp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/error.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadErrorsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/loading.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hideLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/loading.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadLoadingsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/loading.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "showLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/app.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/error.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/loading.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/error.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateError",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/error.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/error.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/error.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/loading.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/loading.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/loading.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadingFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/loading.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/error.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/error.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/loading.selectors.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createSelectorLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/loading.selectors.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createSelectorLoadingGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/loading.selectors.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "filterLoadingId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/loading.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoadingState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/users/components/mix/mix.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MixComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/users/components/users/users.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/users/components/users/users.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "DataCompFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/users/components/users/users.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "InputExtraFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/users/components/users/users.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "InputFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/users/components/users/users.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "MixView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/users/components/users/users.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "UserCompFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/users/my.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldsComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/stories/library/formfields.normal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldsNormalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.normal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSelect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.normal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PeriodicElement",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.normal.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.normal.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.normal.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ELEMENT_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.selects.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldsSelectsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.selects.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSelect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.selects.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PeriodicElement",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.selects.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.selects.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.selects.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ELEMENT_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Enabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Form-normal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormFieldsAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Form-normal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Form-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormFieldsAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Form-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormFieldsAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PaginatorEnable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/main/app-form-comment.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Enabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/main/app-form-comment.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}