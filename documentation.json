{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-5f810a33c3acf6572641386a93d51cf8ea451dbe55e1fd2eedcc35a802260e6a0523f4a284e96143d57558cdca0d68e1de8f0acd2a56b450cab7594cc8b0b25a",
            "file": "src/app/posts/store/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap } from \"@ngrx/store\";\r\nimport * as fromPosts from './posts.reducer'; \r\nimport * as fromComments from './comments.reducer'; \r\nimport { StateList } from \"src/app/services/base/reducer.list\";\r\n\r\nexport const postsStateFeatureKey = 'postsState';\r\n\r\nexport interface AppState {\r\n  posts: StateList;\r\n  comments: fromComments.StateComments;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<AppState> = {\r\n  posts: fromPosts.reducer,\r\n  comments: fromComments.reducer\r\n};",
            "properties": [
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromComments.StateComments",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "posts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateList",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Comment",
            "id": "interface-Comment-ce2ed1514be15c3298877cd8bc9c797c0c197ccab129d652304140fc6d84793429a1c30ef225752b8f691047647fbf0b0e81f06e61d80f4f7c7e836e04584800",
            "file": "src/app/posts/models/comment.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Comment {\r\n  id: number;\r\n  comment: string;\r\n  author: string;\r\n}\r\n\r\nexport interface FilterComment {\r\n  author: string;\r\n  comment: string;\r\n  id:string;\r\n}\r\n\r\nexport type IResponseComments = { link: string; data: Comment[] };\r\n\r\n\r\n// export interface StateUiComments{\r\n//   filter?: FilterComment;\r\n//   order?: SortInfo;\r\n//   expandFilter?: boolean;\r\n// }\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSelect",
            "id": "interface-DataSelect-2601ffb4bafc3e0e3490ebb0a6cb6b40fa13ffbf6507202a2a1cdd2194295fb07bb4659ada18c1e48fea6a7154937f1f12e642f56d305fa88443ed3ace4bb532",
            "file": "src/app/demo-lib/app.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectorRef, Component } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { delay, map, tap } from 'rxjs/operators';\r\nimport { ValidatorsApp } from './validatosapp';\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n@Component({\r\n  selector: 'app-demo',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponentDemo {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n      this.dataSelect$= this.subject.pipe(\r\n        tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(2000)\r\n      ) as Observable<Item[]>;\r\n         \r\n    }\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSelect",
            "id": "interface-DataSelect-5f49f50d55269731d3370955c012988130999261159fbe47b519902ef0edb4e25d87bb1d141081a34bc15dc67340049726128ba06c1f281d320798f9afdee746-1",
            "file": "projects/my-lib-display/src/lib/fields/components/data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DataSelect{\r\n    key: string;\r\n    value:string,\r\n    desc: string;\r\n  }\r\n  \r\n  \r\n  export function createData():DataSelect[]{\r\n    return [\r\n      {key: '1', value: '11', desc:'desc data 11' },\r\n      {key: '1', value: '12', desc:'desc data 12' },\r\n      {key: '1', value: '13', desc:'desc data 13' },\r\n      {key: '2', value: '21', desc:'desc data 21' },\r\n      {key: '2', value: '22', desc:'desc data 22' },\r\n      {key: '2', value: '23', desc:'desc data 23' },\r\n      {key: '3', value: '31', desc:'desc data 31' },\r\n      {key: '3', value: '32', desc:'desc data 32' },\r\n      {key: '3', value: '33', desc:'desc data 33' },\r\n      \r\n    ];\r\n  }",
            "properties": [
                {
                    "name": "desc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DataSelect-1"
        },
        {
            "name": "Entity",
            "id": "interface-Entity-4dd3795c4ed99cecd67c203e5fdbbf2c02284c16fe529ed2b86c6ea3f5fb2e19027d8b64be3541a73a387b557df6f6a2e34b5db22f79a6917b41922400c20644",
            "file": "src/app/services/models/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Entity{\r\n   id:string|number;\r\n }",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterComment",
            "id": "interface-FilterComment-ce2ed1514be15c3298877cd8bc9c797c0c197ccab129d652304140fc6d84793429a1c30ef225752b8f691047647fbf0b0e81f06e61d80f4f7c7e836e04584800",
            "file": "src/app/posts/models/comment.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Comment {\r\n  id: number;\r\n  comment: string;\r\n  author: string;\r\n}\r\n\r\nexport interface FilterComment {\r\n  author: string;\r\n  comment: string;\r\n  id:string;\r\n}\r\n\r\nexport type IResponseComments = { link: string; data: Comment[] };\r\n\r\n\r\n// export interface StateUiComments{\r\n//   filter?: FilterComment;\r\n//   order?: SortInfo;\r\n//   expandFilter?: boolean;\r\n// }\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterListInfo",
            "id": "interface-FilterListInfo-a8246caf811048265eb06a6fa9644420faba442a43c84a11df919dd6dcd71f0ae3327b89a7422504fa85a3cb50894528d33e7c254b18d14e6468fcbbbb8a83a3",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string;\r\n    linkPrev: string;\r\n    linkLast: string;\r\n    linkFisrt: string;\r\n  };\r\n}\r\n\r\nexport interface SortInfo {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n  /** The sort direction. */\r\n  direction: 'asc' | 'desc' | '';\r\n}\r\n\r\nexport interface PageRequest {\r\n  requestLink:string;\r\n  pageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;     \r\n}\r\n\r\n\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n//export const OPTIONS_STATE_LIST = new InjectionToken<StateOptions>('options_state_list');\r\n\r\n// export interface StateListFilter<D,E=any> {\r\n//   ui: {\r\n//     expandFilter?: boolean;\r\n//   };\r\n//   filterList: FilterListInfo;\r\n//   selectionRows?:E[];\r\n//   extraData: D;\r\n// }\r\n\r\nexport type IResponseData<T=any> = { link: string; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "F",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortInfo",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PageInfo",
                    "optional": true,
                    "description": "",
                    "line": 79
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterPost",
            "id": "interface-FilterPost-f96d4b9e51e5492b957ca50ee36731ea9a598a07aba712aa916ffc973306182d55d287ee4d4b95d0aa32e212b3959548416c023e8f2f1357626c38383d6805e0",
            "file": "src/app/posts/models/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Post {\r\n  id: number;\r\n  title: string;\r\n  author: string;\r\n}\r\n\r\nexport interface FilterPost {\r\n  author: string;\r\n  title: string;\r\n}\r\n\r\nexport type IResponsePosts = { link: string; data: Post[] };\r\n\r\n\r\n// export interface StateUiPosts{\r\n//   filter?: FilterPost;\r\n//   order?: SortInfo;\r\n//   expandFilter?: boolean; \r\n// }\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IConsole",
            "id": "interface-IConsole-eae01badea1ba38eaa23271303be82bd222caae29c6c5d2e10d2be4821842ae7eb554bf1877f360bede41886b78808e89b761b6d84b72155f8dbfdbb788d594a",
            "file": "src/app/services/utils/logger.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Logger } from 'ng2-logger/browser';\r\nimport { Level,Log } from 'ng2-logger/browser';\r\n\r\nexport let mapNames: Map<string, number> = new Map();\r\nexport let mapNamesLevels: Map<string, Level[]> = new Map();\r\n\r\n\r\nexport function NameLog(nameLog:string) {\r\n  return function(constructor: any) {\r\n   // console.log('namelog')\r\n      //const orig = constructor.prototype.ngOnDestroy\r\n     // constructor.nameLog=nameLog;\r\n\r\n      if(constructor.prototype)constructor.prototype.nameLog=nameLog;\r\n      // constructor.prototype.ngOnDestroy = function() {\r\n      //     for(const prop in this) {\r\n      //         const property = this[prop]\r\n      //         if(typeof property.unsubscribe === \"function\" && !obs$.includes(property))\r\n      //             obs$.push(property)\r\n      //     }\r\n      //     for(const ob$ of obs$) {\r\n      //           ob$.unsubscribe()\r\n      //     }\r\n      //     orig.apply()\r\n      // }\r\n  }\r\n}\r\n\r\nexport interface IConsole {\r\n  log(msg: string, ...params:any[]):void;\r\n  debug(msg: string, ...params:any[]):void;\r\n  error(msg: string, ...params:any[]):void;\r\n  info(msg: string, ...params:any[]):void;\r\n  warn(msg: string, ...params:any[]):void;\r\n}\r\n\r\n\r\n\r\nexport function getLogger(name: string): IConsole {\r\n  return new ConsoleApp(name);\r\n}\r\n\r\nexport function updateLevelLog() {\r\n // if (environment.production) {\r\n    //  Log.setProductionMode();\r\n    //Log.onlyLevel(Level.ERROR, Level.INFO, Level.WARN);\r\n        \r\n // }\r\n}\r\n\r\nexport declare type NameLevels={\r\n  name:string;\r\n  levels:Level[];\r\n};\r\nexport function setNamesLevels(names:NameLevels[]){\r\n   names?.forEach(n=> mapNamesLevels.set(n.name,n.levels));  \r\n}\r\nexport function getNameLevels(name:string):Level[]{\r\n  return mapNamesLevels.get(Array.from(mapNamesLevels!.keys()).find(k=> name.startsWith(k)));\r\n  \r\n}\r\nexport function refreshNamesLevels(){\r\n  if(localStorage.getItem('namesLevels')){\r\n    setNamesLevels(JSON.parse(localStorage.getItem('namesLevels')))\r\n  }\r\n}\r\nexport function getNameLog(name: string): string {\r\n  if (mapNames.get(name) !== undefined) {\r\n    let id = mapNames.get(name);\r\n    mapNames.set(name, ++id);\r\n  } else {\r\n    mapNames.set(name, 0);\r\n  }\r\n  return `${name}_${mapNames.get(name)}`;\r\n}\r\n\r\nexport class ConsoleApp implements IConsole{\r\n  logN2: Logger;\r\n\r\n  constructor(name?: string) {\r\n    let nameLog: string;\r\n    if (name) {\r\n      nameLog = getNameLog(name);\r\n    } else {\r\n      nameLog = getNameLog(this.constructor.name);\r\n    }\r\n\r\n    if(getNameLevels(nameLog)){\r\n      this.logN2 = Log.create(nameLog,...getNameLevels(nameLog));  \r\n    }else{\r\n      this.logN2 = Log.create(nameLog);\r\n    }\r\n  }\r\n\r\n  log(msg: string, ...params: any[]) {\r\n    this.logN2.d(msg, ...params);\r\n  }\r\n  debug(msg: string, ...params: any[]) {\r\n    this.logN2.d(msg, ...params);\r\n  }\r\n  error(msg: string, ...params: any[]) {\r\n    this.logN2.error(msg, ...params);\r\n  }\r\n  info(msg: string, ...params: any[]) {\r\n    this.logN2.i(msg, ...params);\r\n  }\r\n  warn(msg: string, ...params: any[]) {\r\n    this.logN2.w(msg, ...params);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "debug",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ISelectorsList",
            "id": "interface-ISelectorsList-a8246caf811048265eb06a6fa9644420faba442a43c84a11df919dd6dcd71f0ae3327b89a7422504fa85a3cb50894528d33e7c254b18d14e6468fcbbbb8a83a3",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string;\r\n    linkPrev: string;\r\n    linkLast: string;\r\n    linkFisrt: string;\r\n  };\r\n}\r\n\r\nexport interface SortInfo {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n  /** The sort direction. */\r\n  direction: 'asc' | 'desc' | '';\r\n}\r\n\r\nexport interface PageRequest {\r\n  requestLink:string;\r\n  pageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;     \r\n}\r\n\r\n\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n//export const OPTIONS_STATE_LIST = new InjectionToken<StateOptions>('options_state_list');\r\n\r\n// export interface StateListFilter<D,E=any> {\r\n//   ui: {\r\n//     expandFilter?: boolean;\r\n//   };\r\n//   filterList: FilterListInfo;\r\n//   selectionRows?:E[];\r\n//   extraData: D;\r\n// }\r\n\r\nexport type IResponseData<T=any> = { link: string; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "selectFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "selectFilterListInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "selectFilterListRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "selectLinksStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "selectListData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "selectLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "selectSort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 107
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoadInfo",
            "id": "interface-LoadInfo-a8246caf811048265eb06a6fa9644420faba442a43c84a11df919dd6dcd71f0ae3327b89a7422504fa85a3cb50894528d33e7c254b18d14e6468fcbbbb8a83a3",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string;\r\n    linkPrev: string;\r\n    linkLast: string;\r\n    linkFisrt: string;\r\n  };\r\n}\r\n\r\nexport interface SortInfo {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n  /** The sort direction. */\r\n  direction: 'asc' | 'desc' | '';\r\n}\r\n\r\nexport interface PageRequest {\r\n  requestLink:string;\r\n  pageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;     \r\n}\r\n\r\n\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n//export const OPTIONS_STATE_LIST = new InjectionToken<StateOptions>('options_state_list');\r\n\r\n// export interface StateListFilter<D,E=any> {\r\n//   ui: {\r\n//     expandFilter?: boolean;\r\n//   };\r\n//   filterList: FilterListInfo;\r\n//   selectionRows?:E[];\r\n//   extraData: D;\r\n// }\r\n\r\nexport type IResponseData<T=any> = { link: string; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "pageRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PageRequest",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "sortInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortInfo",
                    "optional": false,
                    "description": "",
                    "line": 97
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoadInfoSuccces",
            "id": "interface-LoadInfoSuccces-a8246caf811048265eb06a6fa9644420faba442a43c84a11df919dd6dcd71f0ae3327b89a7422504fa85a3cb50894528d33e7c254b18d14e6468fcbbbb8a83a3",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string;\r\n    linkPrev: string;\r\n    linkLast: string;\r\n    linkFisrt: string;\r\n  };\r\n}\r\n\r\nexport interface SortInfo {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n  /** The sort direction. */\r\n  direction: 'asc' | 'desc' | '';\r\n}\r\n\r\nexport interface PageRequest {\r\n  requestLink:string;\r\n  pageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;     \r\n}\r\n\r\n\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n//export const OPTIONS_STATE_LIST = new InjectionToken<StateOptions>('options_state_list');\r\n\r\n// export interface StateListFilter<D,E=any> {\r\n//   ui: {\r\n//     expandFilter?: boolean;\r\n//   };\r\n//   filterList: FilterListInfo;\r\n//   selectionRows?:E[];\r\n//   extraData: D;\r\n// }\r\n\r\nexport type IResponseData<T=any> = { link: string; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "LoadInfo"
        },
        {
            "name": "PageInfo",
            "id": "interface-PageInfo-a8246caf811048265eb06a6fa9644420faba442a43c84a11df919dd6dcd71f0ae3327b89a7422504fa85a3cb50894528d33e7c254b18d14e6468fcbbbb8a83a3",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string;\r\n    linkPrev: string;\r\n    linkLast: string;\r\n    linkFisrt: string;\r\n  };\r\n}\r\n\r\nexport interface SortInfo {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n  /** The sort direction. */\r\n  direction: 'asc' | 'desc' | '';\r\n}\r\n\r\nexport interface PageRequest {\r\n  requestLink:string;\r\n  pageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;     \r\n}\r\n\r\n\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n//export const OPTIONS_STATE_LIST = new InjectionToken<StateOptions>('options_state_list');\r\n\r\n// export interface StateListFilter<D,E=any> {\r\n//   ui: {\r\n//     expandFilter?: boolean;\r\n//   };\r\n//   filterList: FilterListInfo;\r\n//   selectionRows?:E[];\r\n//   extraData: D;\r\n// }\r\n\r\nexport type IResponseData<T=any> = { link: string; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The current total number of items being paged</p>\n",
                    "line": 42,
                    "rawdescription": "\nThe current total number of items being paged"
                },
                {
                    "name": "pageIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The current page index.</p>\n",
                    "line": 33,
                    "rawdescription": "\nThe current page index."
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The current page size</p>\n",
                    "line": 40,
                    "rawdescription": "\nThe current page size"
                },
                {
                    "name": "previousPageIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Index of the page that was selected previously.</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nIndex of the page that was selected previously.\n",
                    "jsdoctags": [
                        {
                            "pos": 914,
                            "end": 978,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 915,
                                "end": 930,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "breaking-change"
                            },
                            "comment": "<p>8.0.0 To be made into a required property.</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PageInfo",
            "id": "interface-PageInfo-a8246caf811048265eb06a6fa9644420faba442a43c84a11df919dd6dcd71f0ae3327b89a7422504fa85a3cb50894528d33e7c254b18d14e6468fcbbbb8a83a3-1",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string;\r\n    linkPrev: string;\r\n    linkLast: string;\r\n    linkFisrt: string;\r\n  };\r\n}\r\n\r\nexport interface SortInfo {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n  /** The sort direction. */\r\n  direction: 'asc' | 'desc' | '';\r\n}\r\n\r\nexport interface PageRequest {\r\n  requestLink:string;\r\n  pageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;     \r\n}\r\n\r\n\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n//export const OPTIONS_STATE_LIST = new InjectionToken<StateOptions>('options_state_list');\r\n\r\n// export interface StateListFilter<D,E=any> {\r\n//   ui: {\r\n//     expandFilter?: boolean;\r\n//   };\r\n//   filterList: FilterListInfo;\r\n//   selectionRows?:E[];\r\n//   extraData: D;\r\n// }\r\n\r\nexport type IResponseData<T=any> = { link: string; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "linkInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "requestLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PageInfo-1"
        },
        {
            "name": "PageRequest",
            "id": "interface-PageRequest-a8246caf811048265eb06a6fa9644420faba442a43c84a11df919dd6dcd71f0ae3327b89a7422504fa85a3cb50894528d33e7c254b18d14e6468fcbbbb8a83a3",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string;\r\n    linkPrev: string;\r\n    linkLast: string;\r\n    linkFisrt: string;\r\n  };\r\n}\r\n\r\nexport interface SortInfo {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n  /** The sort direction. */\r\n  direction: 'asc' | 'desc' | '';\r\n}\r\n\r\nexport interface PageRequest {\r\n  requestLink:string;\r\n  pageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;     \r\n}\r\n\r\n\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n//export const OPTIONS_STATE_LIST = new InjectionToken<StateOptions>('options_state_list');\r\n\r\n// export interface StateListFilter<D,E=any> {\r\n//   ui: {\r\n//     expandFilter?: boolean;\r\n//   };\r\n//   filterList: FilterListInfo;\r\n//   selectionRows?:E[];\r\n//   extraData: D;\r\n// }\r\n\r\nexport type IResponseData<T=any> = { link: string; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "pageIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>The current page size</p>\n",
                    "line": 66,
                    "rawdescription": "\nThe current page size"
                },
                {
                    "name": "requestLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PeriodicElement",
            "id": "interface-PeriodicElement-2601ffb4bafc3e0e3490ebb0a6cb6b40fa13ffbf6507202a2a1cdd2194295fb07bb4659ada18c1e48fea6a7154937f1f12e642f56d305fa88443ed3ace4bb532",
            "file": "src/app/demo-lib/app.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectorRef, Component } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { delay, map, tap } from 'rxjs/operators';\r\nimport { ValidatorsApp } from './validatosapp';\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n@Component({\r\n  selector: 'app-demo',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponentDemo {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n      this.dataSelect$= this.subject.pipe(\r\n        tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(2000)\r\n      ) as Observable<Item[]>;\r\n         \r\n    }\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Post",
            "id": "interface-Post-f96d4b9e51e5492b957ca50ee36731ea9a598a07aba712aa916ffc973306182d55d287ee4d4b95d0aa32e212b3959548416c023e8f2f1357626c38383d6805e0",
            "file": "src/app/posts/models/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Post {\r\n  id: number;\r\n  title: string;\r\n  author: string;\r\n}\r\n\r\nexport interface FilterPost {\r\n  author: string;\r\n  title: string;\r\n}\r\n\r\nexport type IResponsePosts = { link: string; data: Post[] };\r\n\r\n\r\n// export interface StateUiPosts{\r\n//   filter?: FilterPost;\r\n//   order?: SortInfo;\r\n//   expandFilter?: boolean; \r\n// }\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SortInfo",
            "id": "interface-SortInfo-a8246caf811048265eb06a6fa9644420faba442a43c84a11df919dd6dcd71f0ae3327b89a7422504fa85a3cb50894528d33e7c254b18d14e6468fcbbbb8a83a3",
            "file": "src/app/services/models/filter.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PageInfo {\r\n  /** The current page index. */\r\n  pageIndex?: number;\r\n  /**\r\n   * Index of the page that was selected previously.\r\n   * @breaking-change 8.0.0 To be made into a required property.\r\n   */\r\n  previousPageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;\r\n  /** The current total number of items being paged */\r\n  length?: number;\r\n}\r\n\r\nexport interface PageInfo {\r\n  requestLink?: string;\r\n  linkInfo?: {\r\n    linkNext: string;\r\n    linkPrev: string;\r\n    linkLast: string;\r\n    linkFisrt: string;\r\n  };\r\n}\r\n\r\nexport interface SortInfo {\r\n  /** The id of the column being sorted. */\r\n  active: string;\r\n  /** The sort direction. */\r\n  direction: 'asc' | 'desc' | '';\r\n}\r\n\r\nexport interface PageRequest {\r\n  requestLink:string;\r\n  pageIndex?: number;\r\n  /** The current page size */\r\n  pageSize?: number;     \r\n}\r\n\r\n\r\n\r\n// export interface ResultList<E> {\r\n//   rows: E[];\r\n//   pageInfo: PageInfo;\r\n// }\r\n\r\nexport interface FilterListInfo<F = any> {\r\n  filter?: F;\r\n  order?: SortInfo;\r\n  page?: PageInfo;\r\n}\r\n\r\n//export const OPTIONS_STATE_LIST = new InjectionToken<StateOptions>('options_state_list');\r\n\r\n// export interface StateListFilter<D,E=any> {\r\n//   ui: {\r\n//     expandFilter?: boolean;\r\n//   };\r\n//   filterList: FilterListInfo;\r\n//   selectionRows?:E[];\r\n//   extraData: D;\r\n// }\r\n\r\nexport type IResponseData<T=any> = { link: string; data: T[] };\r\n\r\nexport interface LoadInfo<T=any>{\r\n  filter:T,\r\n  sortInfo:SortInfo,\r\n  pageRequest:PageRequest}\r\n\r\n  \r\n export interface LoadInfoSuccces<F=any,T=any> extends LoadInfo<F>,IResponseData<T>{\r\n    }\r\n  \r\n\r\n    export interface ISelectorsList\r\n      {\r\n        selectListData:any,selectLoading:any,selectFilterListInfo:any,selectFilterListRequest:any,selectLinksStatus:any, selectFilter:any,selectSort:any\r\n    }\r\n    ",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The id of the column being sorted.</p>\n",
                    "line": 57,
                    "rawdescription": "\nThe id of the column being sorted."
                },
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"asc\" | \"desc\" | string",
                    "optional": false,
                    "description": "<p>The sort direction.</p>\n",
                    "line": 59,
                    "rawdescription": "\nThe sort direction."
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-449ec4e5d49e213649c795a1ba3accbd502ffa7e48a7dcf6ce7e9fb2830ab3449fb4f51eb48f79b263d8155a10bc8d64a46b95ed70eb6c73732d88d9569c9236",
            "file": "src/app/store/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  ActionReducerMap, MetaReducer\r\n} from '@ngrx/store';\r\nimport { environment } from '../../../environments/environment';\r\nimport * as fromLoading from './loading.reducer';\r\nimport * as fromError from './error.reducer';\r\n\r\nexport interface State {\r\n  loading:fromLoading.State,\r\n  error: fromError.StateError\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  loading: fromLoading.reducer,\r\n  error: fromError.reducer\r\n};\r\n\r\n\r\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromError.StateError",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromLoading.State",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-70dd668ae6b25ea07c97d994c353b6fad516e8b6f124cbeb53c83a5e74bbb4f67b6469702d42dc02b093a44a80723f8f806a4724b953233c85e681fa8cdfb3fb-1",
            "file": "src/app/store/reducers/loading.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\nimport * as LoadingActions from '../actions/loading.actions';\n\nexport const loadingFeatureKey = 'loading';\n\nexport type LoadingInfo={\n  actionSource: string, idGroupLoading: string,   idLoading?: string\n} ;\n\nexport interface State {\n  stack: LoadingInfo[]\n}\n\nexport const initialState: State = {\n  stack:[]\n};\n\nexport const reducer = createReducer(\n  initialState,\n  on(LoadingActions.showLoading, (state, action) => {\n    const inf= state.stack.find(l=> l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading )\n    if(!inf){\n      return  {stack: [...state.stack,{idLoading:action.idLoading, idGroupLoading: action.idGroupLoading, actionSource: action.actionSource} ]}\n    }\n    return {...state};\n  }),\n  on(LoadingActions.hideLoading, (state, action) => {\n      return  {stack: state.stack.filter(l=> !(l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading))}\n     }),\n\n);\n",
            "properties": [
                {
                    "name": "stack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoadingInfo[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "StateComments",
            "id": "interface-StateComments-d7bdb2c10a1ce85a60f35550726b910f043226b698adc9b72833fa0db07e90097ba3c4f7e2ad29d93c7d716d13b44fbb1b4534efedf70cb5591011ac62477f2f",
            "file": "src/app/posts/store/reducers/comments.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { on } from '@ngrx/store';\nimport { createReducerList, StateList } from 'src/app/services/base/reducer.list';\nimport { Comment } from '../../models/comment';\nimport * as CommentsActions from '../actions/comments.actions';\n\nexport const postsFeatureKey = 'posts';\n\n\nexport interface StateComments extends StateList<Comment>{\n  extra:object;\n}\n\n\nexport const initialState: StateComments = {\n  extra:{\n    data:'Hola'\n  },\n  data: [],\n  loading:false,\n  filterListInfo: {\n    page: {\n      pageSize: 4,\n      pageIndex: 1\n    }\n  }\n};\n\n\n\n\nexport const reducer = createReducerList(initialState,CommentsActions.loadComments,CommentsActions.loadCommentssSuccess,CommentsActions.loadCommentssFailure,\n  on(CommentsActions.extraComments, (state:any, action) => ({...state,extra:action.data}))  \n  );\n  \n\n\n// createReducer(\n//   initialState,\n\n//   on(CommentsActions.loadComments, state => ({...state,loading:true})),\n//   on(CommentsActions.loadCommentssSuccess, (state, action) => ({...state,comments:[... action.data],filterListInfo:getFilterListInfo(action),loading:false})),\n//   on(CommentsActions.loadCommentssFailure, (state, action) => state),\n\n// );\n\n\n",
            "properties": [
                {
                    "name": "extra",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "StateList"
        },
        {
            "name": "StateError",
            "id": "interface-StateError-16e76759893bdaa9a6bc41024c57def2967759d57817c71c913ebcccd20c405dcc3bd56c7d8c1db7282e34c52962430e720ddfcf6a124da5a78442c7a70a4778",
            "file": "src/app/store/reducers/error.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { state } from '@angular/animations';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as ErrorActions from '../actions/error.actions';\n\nexport const errorFeatureKey = 'error';\n\nexport interface StateError {\n  error?: any;\n}\n\nexport const initialState: StateError = {\n  \n};\n\nexport const reducer = createReducer(\n  initialState,\n  on(ErrorActions.errorGeneral, (state, {error}) => ({...state,error })),\n);\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StateList",
            "id": "interface-StateList-7d7803d8cf7dd13829462d1ff25b83d6ebd2e307e9830365c18805724a318c08d322570c72f1bfcd0581138d4e288e5160eddeab8a84df70174992d0a07dfca6",
            "file": "src/app/services/base/reducer.list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from \"@ngrx/store\";\r\nimport { FilterListInfo, LoadInfoSuccces } from \"../models/filter.model\";\r\n\r\n\r\n\r\nexport interface StateList<T =any> {\r\n    data: T[];\r\n    loading:boolean;\r\n    filterListInfo:FilterListInfo;\r\n  }\r\n\r\n\r\nfunction getFilterListInfo(action: LoadInfoSuccces): FilterListInfo {\r\n    return {\r\n      filter: action.filter,\r\n      order: action.sortInfo,\r\n      page: {\r\n        pageIndex: action.pageRequest.pageIndex, \r\n        pageSize: action.pageRequest.pageSize,\r\n        requestLink: action.pageRequest.requestLink,\r\n        linkInfo: {\r\n          linkFisrt: getUrlLink(action.link, 'first'),\r\n          linkNext: getUrlLink(action.link, 'next'),\r\n          linkLast: getUrlLink(action.link, 'last'),\r\n          linkPrev: getUrlLink(action.link, 'prev'),\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   *\r\n   * @param link Helper to get partial url\r\n   * @param arg1\r\n   */\r\n   function getUrlLink(link: string, key: string): string {\r\n    let url;\r\n    if (!link) {\r\n      return null;\r\n    }\r\n    link.split(',').forEach((cad) => {\r\n      if (cad.split(';')[1].includes(`rel=\"${key}\"`)) {\r\n        url = cad.split(';')[0].replace('<', '').replace('>', '').trim();\r\n      }\r\n    });\r\n    return url;\r\n  }\r\n  \r\n\r\n\r\nexport function createReducerList<T extends StateList>(initS:T,loadAction:any,loadSuccess:any,loadFailure:any,...ons:any[]){\r\n    return createReducer(\r\n      initS,  \r\n      on(loadAction, state => ({...state,loading:true})),\r\n      on(loadSuccess, (state, action:LoadInfoSuccces) => ({...state,data:[... action.data],filterListInfo:getFilterListInfo(action),loading:false})),\r\n      on(loadFailure, (state, action) => state),\r\n      ...ons\r\n    );\r\n  }\r\n\r\n\r\n  ",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "filterListInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterListInfo",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AbstractListNgRxService",
            "id": "injectable-AbstractListNgRxService-888324a2dacafdec9381252666eb2ca1087700a684f359c553a9a1884df6e5f669c9ade874bca2c434d72e4468e2d56a308302cb41cf274a718c1801789291ba",
            "file": "src/app/services/base/abstractNgRx.service.ts",
            "properties": [
                {
                    "name": "actions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "createEffectFilter",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "createEffectLoad",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "createEffectLoadInit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "createEffectPagination",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "createEffectSort",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "console",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConsole",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "nameLog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NamesLog",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxend",
                    "defaultValue": "rxend.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxinfo",
                    "defaultValue": "rxinfo.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxlog",
                    "defaultValue": "rxlog.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxwarn",
                    "defaultValue": "rxwarn.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getLink",
                    "args": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Actions, concatLatestFrom, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { TypeEventPagination } from \"my-lib-display\";\r\nimport { catchError, concatMap, map, Observable, of } from \"rxjs\";\r\nimport { AbstractApp } from \"src/app/shared/base/abstract-app\";\r\nimport { FilterListInfo, IResponseData, ISelectorsList, LoadInfo, LoadInfoSuccces, PageInfo, SortInfo } from \"../models/filter.model\";\r\n\r\n@Injectable()\r\nexport  class AbstractListNgRxService extends AbstractApp implements OnDestroy {\r\n  protected store: Store;\r\n  protected actions$: Actions;\r\n\r\n  createEffectLoad = (actionLoad: any, actionLoadSuccess: any, actionLoadFailiure: any, fn: (loadInfo: LoadInfo) => Observable<IResponseData>) => createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(actionLoad),\r\n      concatMap((action: LoadInfo) =>\r\n        /** An EMPTY observable only emits completion. Replace with your own observable API request */\r\n        //this.postsService.getPosts(action.filterPost,action.sortInfo,action.pageRequest)\r\n        fn(action)\r\n          .pipe(\r\n            map((data: IResponseData) => actionLoadSuccess({ data: data.data, link: data.link, filter: action.filter, sortInfo: action.sortInfo, pageRequest: action.pageRequest } as LoadInfoSuccces)),\r\n            catchError(error => of(actionLoadFailiure({ error })))\r\n            )\r\n      )\r\n    );\r\n  });\r\n\r\n  createEffectLoadInit = (actionLoadInit: any, actionLoad: any, selectorsList :ISelectorsList) => createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(actionLoadInit),\r\n      concatMap((action) =>\r\n        /** An EMPTY observable only emits completion. Replace with your own observable API request */\r\n        of(action).pipe(\r\n          concatLatestFrom(action => this.store.select(selectorsList.selectFilterListRequest)),\r\n          map(([action, filterList]: [any, any]) => actionLoad({\r\n            ...filterList\r\n          } as LoadInfo)),\r\n        ))\r\n    );\r\n  });\r\n\r\n  createEffectFilter = (actionFilter: any, actionLoad: any, selectorsList :ISelectorsList) => createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(actionFilter),\r\n      concatMap((action:{filter:any}) =>\r\n        /** An EMPTY observable only emits completion. Replace with your own observable API request */\r\n        of(action).pipe(\r\n          concatLatestFrom(action => this.store.select(selectorsList.selectFilterListRequest)),\r\n          map(([action, filterList]) => actionLoad({\r\n            ...filterList as any,\r\n            filter: action.filter,\r\n          } as LoadInfo)),\r\n        ))\r\n    );\r\n  });\r\n\r\n  createEffectPagination = (actionPagination: any, actionLoad: any, selectorsList :ISelectorsList) => createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(actionPagination as any),\r\n      concatMap((action: {typeEventPagination:TypeEventPagination}) =>\r\n        /** An EMPTY observable only emits completion. Replace with your own observable API request */\r\n        of(action).pipe(\r\n          concatLatestFrom(action => this.store.select(selectorsList.selectFilterListInfo)),\r\n          map(([action, filterList]:[action:{typeEventPagination:TypeEventPagination},filterList:FilterListInfo]) => actionLoad({\r\n            filter: filterList.filter,\r\n            sortInfo: filterList.order,\r\n            pageRequest: {\r\n              requestLink: this.getLink(action.typeEventPagination, filterList.page),\r\n              pageSize: filterList.page.pageSize,\r\n              pageIndex: filterList.page.pageIndex\r\n            }\r\n          } as LoadInfo)),\r\n        ))\r\n    );\r\n  });\r\n\r\n  createEffectSort = (actionSort: any , actionLoad: any, selectorsList :ISelectorsList) => createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(actionSort as any),\r\n      concatMap((action: {sortInfo:SortInfo}) =>\r\n        /** An EMPTY observable only emits completion. Replace with your own observable API request */\r\n        of(action).pipe(\r\n          concatLatestFrom(action => this.store.select(selectorsList.selectFilterListRequest)),\r\n          map(([action, filterList] ) => actionLoad({\r\n            ...filterList as any,\r\n            sortInfo: action.sortInfo\r\n          } as LoadInfo)),\r\n        ))\r\n    );\r\n  });\r\n\r\n\r\n\r\n\r\n  protected getLink(event: TypeEventPagination, pageInfo: PageInfo): string {\r\n    switch (event) {\r\n      case 'first':\r\n        return pageInfo.linkInfo.linkFisrt;\r\n      case 'last':\r\n        return pageInfo.linkInfo.linkLast;\r\n      case 'prev':\r\n        return pageInfo.linkInfo.linkPrev;\r\n      case 'next':\r\n        return pageInfo.linkInfo.linkNext;\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //constructor(protected name: string) { super(name) } \r\n\r\n\r\n\r\n  ngOnDestroy(): void {\r\n    this.console.debug('Destroy service')\r\n  }\r\n\r\n}\r\n",
            "extends": "AbstractApp",
            "type": "injectable"
        },
        {
            "name": "AbstractLoadingEffects",
            "id": "injectable-AbstractLoadingEffects-79d71952faf2664c31922da67280ac978a32e1f7916e37f01e74e6a0c6b70a1ae11aa52b8e14eb716eac98c01482d3ca44d82e72ec3d7adc4fbd8389de854b8c",
            "file": "src/app/services/base/abstractNgRx.loading.ts",
            "properties": [
                {
                    "name": "createEffectLoadingHide",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "createEffectLoadingShow",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AbstractApp } from \"src/app/shared/base/abstract-app\";\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { createEffect, ofType, concatLatestFrom, Actions } from \"@ngrx/effects\";\r\nimport { concatMap, of, map, catchError, Observable, filter } from \"rxjs\";\r\nimport { Action } from '@ngrx/store';\r\n\r\nimport * as LoadingActions from '../../store/actions/loading.actions'; \r\n\r\nexport type ActionsLoading=  {actionType:string,fnLoadingInfo:(action:any)=> ActionLoadingInfo}[]\r\n\r\nexport type ActionLoadingInfo={\r\n  type: 'show' | 'hide';\r\n  idGroupLoading?: string;\r\n  idLoading?: string; \r\n} \r\n\r\nfunction getActions(actionsLoading:ActionsLoading){\r\n   return actionsLoading.map(ac=> ac.actionType);\r\n}\r\n\r\nfunction getLoadingInfo(action:Action,actionsLoading:ActionsLoading):ActionLoadingInfo{\r\n  return actionsLoading.find(ac=> ac.actionType===action.type).fnLoadingInfo(action);\r\n}\r\n\r\n@Injectable()\r\nexport  class AbstractLoadingEffects {\r\n\r\n\r\n  createEffectLoadingShow = (actionsLoading:ActionsLoading) => createEffect(() => {\r\n    return this.actions$.pipe( \r\n      ofType(...getActions(actionsLoading)),\r\n      concatMap((action) =>\r\n        of(getLoadingInfo(action,actionsLoading)).pipe(\r\n          filter(loadingInfo=>loadingInfo.type==='show'),\r\n          map(loadingInfo => LoadingActions.showLoading({actionSource:action.type,idGroupLoading:loadingInfo.idGroupLoading,idLoading:loadingInfo.idLoading })),\r\n          catchError(error => of(LoadingActions.loadLoadingsFailure({ error }))))\r\n      )\r\n    );\r\n  });\r\n\r\n\r\n  createEffectLoadingHide = (actionsLoading:ActionsLoading) => createEffect(() => {\r\n    return this.actions$.pipe( \r\n      ofType(...getActions(actionsLoading)),\r\n      concatMap((action) =>\r\n        of(getLoadingInfo(action,actionsLoading)).pipe(\r\n          filter(loadingInfo=>loadingInfo.type==='hide'),\r\n          map(loadingInfo => LoadingActions.hideLoading({actionHide:action.type,idGroupLoading:loadingInfo.idGroupLoading,idLoading:loadingInfo.idLoading })),\r\n          catchError(error => of(LoadingActions.loadLoadingsFailure({ error }))))\r\n      )\r\n    );\r\n  });\r\n\r\n  \r\n\r\n  constructor(private actions$: Actions) {}\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AbstractService",
            "id": "injectable-AbstractService-0deb049eb45ebf464921e5bbc131b217cbc5edcdbb359514db27abc9cd35d76afff360df156205969a41fd02fc429d66d5958bf756c86ddbdd0c988f6d691a87",
            "file": "src/app/services/base/abstract.service.ts",
            "properties": [
                {
                    "name": "console",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConsole",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "nameLog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NamesLog",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxend",
                    "defaultValue": "rxend.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxinfo",
                    "defaultValue": "rxinfo.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxlog",
                    "defaultValue": "rxlog.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxwarn",
                    "defaultValue": "rxwarn.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AbstractApp } from \"src/app/shared/base/abstract-app\";\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\n\r\n@Injectable()\r\nexport abstract class AbstractService extends AbstractApp implements OnDestroy{\r\n\r\n  //constructor(protected name: string) { super(name) } \r\n\r\n  ngOnDestroy(): void {\r\n    this.console.debug('Destroy service')\r\n  }\r\n\r\n}\r\n",
            "extends": "AbstractApp",
            "type": "injectable"
        },
        {
            "name": "AppEffects",
            "id": "injectable-AppEffects-4c653d8ee0aee14118d93aca4278b05bf34dbfa5192fe7ab0ee83d5ed8a77fdbc4119a023f9dba0c680c8c96460e374acb619d78bfa59486db17e93487db399c",
            "file": "src/app/store/effects/app.effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect } from '@ngrx/effects';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class AppEffects {\r\n\r\n\r\n\r\n  constructor(private actions$: Actions) {}\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CommentsEffects",
            "id": "injectable-CommentsEffects-f6c0997244ef477925e0eda77b78373ef88e2ed84807f180d089cbac083518e24c8176a9b0d795dff0756f32327b556a82302c98a85922fd76175f649c23307c",
            "file": "src/app/posts/store/effects/comments.effects.ts",
            "properties": [
                {
                    "name": "filterComments$",
                    "defaultValue": "this.createEffectFilter(CommentsActions.filterComments,CommentsActions.loadComments,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loadComments$",
                    "defaultValue": "this.createEffectLoad(CommentsActions.loadComments,CommentsActions.loadCommentssSuccess,CommentsActions.loadCommentssFailure,\r\n     ({filter,sortInfo,pageRequest}:LoadInfo<FilterComment>)=>this.commentsService.getComments(filter,sortInfo,pageRequest)  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loadInitComments$",
                    "defaultValue": "this.createEffectLoadInit(CommentsActions.loadInitComments,CommentsActions.loadComments,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "paginationComments$",
                    "defaultValue": "this.createEffectPagination(CommentsActions.paginationComments,CommentsActions.loadComments,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sortComments$",
                    "defaultValue": "this.createEffectSort(CommentsActions.sortComments,CommentsActions.loadComments,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "actions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectFilter",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectLoad",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectLoadInit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectPagination",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectSort",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "console",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConsole",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "nameLog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NamesLog",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxend",
                    "defaultValue": "rxend.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxinfo",
                    "defaultValue": "rxinfo.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxlog",
                    "defaultValue": "rxlog.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxwarn",
                    "defaultValue": "rxwarn.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getLink",
                    "args": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { AbstractListNgRxService } from 'src/app/services/base/abstractNgRx.service';\r\nimport { LoadInfo } from 'src/app/services/models/filter.model';\r\nimport { FilterComment } from '../../models/comment';\r\nimport { CommentsService } from '../../services/comments.service';\r\nimport * as CommentsActions from '../actions/comments.actions';\r\nimport { selectorsList } from '../selectors/comments.selectors';\r\n\r\n\r\n@Injectable()\r\nexport class CommentsEffects extends AbstractListNgRxService{\r\n\r\n\r\n  \r\n   loadComments$ = this.createEffectLoad(CommentsActions.loadComments,CommentsActions.loadCommentssSuccess,CommentsActions.loadCommentssFailure,\r\n     ({filter,sortInfo,pageRequest}:LoadInfo<FilterComment>)=>this.commentsService.getComments(filter,sortInfo,pageRequest)  )  ;\r\n  \r\n  loadInitComments$ = this.createEffectLoadInit(CommentsActions.loadInitComments,CommentsActions.loadComments,selectorsList);\r\n  filterComments$ = this.createEffectFilter(CommentsActions.filterComments,CommentsActions.loadComments,selectorsList);\r\n  paginationComments$ = this.createEffectPagination(CommentsActions.paginationComments,CommentsActions.loadComments,selectorsList);\r\n  sortComments$ = this.createEffectSort(CommentsActions.sortComments,CommentsActions.loadComments,selectorsList);  \r\n\r\n\r\n\r\n  constructor(protected override actions$: Actions,protected override store:Store, private commentsService:CommentsService ) {\r\n    super()\r\n  }\r\n\r\n}\r\n\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commentsService",
                        "type": "CommentsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commentsService",
                        "type": "CommentsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractListNgRxService",
            "type": "injectable"
        },
        {
            "name": "CommentsService",
            "id": "injectable-CommentsService-9ba7769356913e9f1fb6073707b73865b7789a9c0955a4121c7808db3c6945499daf3dd8f61a457861d9b8b79d6eb9fe98d7f2d4c84a55cc650cd6fb3d3a4819",
            "file": "src/app/posts/services/comments.service.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "console",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConsole",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "nameLog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NamesLog",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxend",
                    "defaultValue": "rxend.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxinfo",
                    "defaultValue": "rxinfo.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxlog",
                    "defaultValue": "rxlog.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxwarn",
                    "defaultValue": "rxwarn.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getComments",
                    "args": [
                        {
                            "name": "filterComment",
                            "type": "FilterComment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResponseData<Comment>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterComment",
                            "type": "FilterComment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "deleteEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "getEntities",
                    "args": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [
                        "F"
                    ],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "updateEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { NameLog } from 'src/app/services/utils/logger';\r\nimport { NamesLog } from 'src/app/services/utils/names-classes';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AbstractEntityService } from '../../services/base/abstract.entity.service';\r\nimport { IResponseData, PageRequest, SortInfo } from '../../services/models/filter.model';\r\nimport { Comment, FilterComment, IResponseComments } from '../models/comment';\r\n\r\n\r\n@Injectable()\r\n@NameLog(NamesLog.CommentsService)\r\nexport class CommentsService extends AbstractEntityService<Comment> {\r\n  constructor(injector: Injector) {\r\n    super(injector, environment.urlHostApi, '/comments');\r\n  }\r\n\r\n  getComments(filterComment:FilterComment,sortInfo:SortInfo,pageRequest:PageRequest): Observable<IResponseData<Comment>> {\r\n    \r\n    return this.getEntities(sortInfo,pageRequest, (params) => {\r\n      if (filterComment?.author) {\r\n        params = params.append('author_like', filterComment.author);\r\n      }\r\n      if (filterComment?.comment) {\r\n        params = params.append('comment_like', filterComment.comment);\r\n      }\r\n      if (filterComment?.id) {\r\n        params = params.append('id_like', filterComment.id);\r\n      }\r\n\r\n      return params;\r\n    }).pipe(map((resp) => ({ link: resp.headers.get('link'), data: resp.body })));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractEntityService",
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-646d0646ab16fd84b93aa6b61be7ecf9d1ee63ffaaf1f3e1e82b8ebaf2a707e2131b1ccd5794cf9270900cfb719a94bd40060217e81e8c8840259d7e99ea430c",
            "file": "projects/my-lib-display/src/lib/material/dialog/dialog.service.ts",
            "properties": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "compInsideDialog",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "compDialog",
                            "type": "ComponentType<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "DialogComponent"
                        },
                        {
                            "name": "data",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "componentFactoryResolver",
                            "type": "ComponentFactoryResolver",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<S>",
                    "typeParameters": [
                        "T",
                        "S"
                    ],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "compInsideDialog",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "compDialog",
                            "type": "ComponentType<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "DialogComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentFactoryResolver",
                            "type": "ComponentFactoryResolver",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialogRef",
                    "args": [
                        {
                            "name": "compDialog",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "componentFactoryResolver",
                            "type": "ComponentFactoryResolver",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<T>",
                    "typeParameters": [
                        "T",
                        "S"
                    ],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "compDialog",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentFactoryResolver",
                            "type": "ComponentFactoryResolver",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ComponentType } from '@angular/cdk/portal';\r\nimport { AbstractDialogComponent } from './abstract-dialog/abstract-dialog.component';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  constructor(public dialog: MatDialog) {}\r\n\r\n  openDialog<T extends AbstractDialogComponent, S>(\r\n    compInsideDialog : ComponentType<T>,\r\n    compDialog: ComponentType<any>= DialogComponent,\r\n    data?: object,\r\n    viewContainerRef?: ViewContainerRef,\r\n    componentFactoryResolver?: ComponentFactoryResolver\r\n  ): Observable<S> {\r\n    \r\n    const dialogRef = this.dialog.open(compDialog, {\r\n      data:{\r\n        compInsideDialog\r\n      },\r\n      viewContainerRef,\r\n      componentFactoryResolver,\r\n    });\r\n    return dialogRef.afterClosed();\r\n    //dialogRef.componentInstance.data\r\n    // dialogRef.afterClosed().subscribe((result) => {\r\n    //   console.log(`Dialog result: ${result}`);\r\n    // });\r\n  }\r\n\r\n\r\n  openDialogRef<T extends AbstractDialogComponent, S>(\r\n    compDialog: ComponentType<T>,\r\n    data?: object,\r\n    viewContainerRef?: ViewContainerRef,\r\n    componentFactoryResolver?: ComponentFactoryResolver\r\n  ): MatDialogRef<T>{\r\n    const dialogRef = this.dialog.open(compDialog, {\r\n      data,\r\n      viewContainerRef,\r\n      componentFactoryResolver,\r\n    });\r\n    return dialogRef;\r\n    //dialogRef.componentInstance.data\r\n    // dialogRef.afterClosed().subscribe((result) => {\r\n    //   console.log(`Dialog result: ${result}`);\r\n    // });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ErrorEffects",
            "id": "injectable-ErrorEffects-ace366a04846da53d8c74158e59cd46eb970913eefc9237d3d82e82c00ba37c99b305239520e6e840116f756235646d66a77540b39dce2bf4de2049519b2cf55",
            "file": "src/app/store/effects/error.effects.ts",
            "properties": [
                {
                    "name": "convertErrors$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe( \r\n      filter((action:any)=> !!action.error && !action.general),\r\n      concatMap((action:ErrorActions.ErrorAction & Action) =>\r\n        of(action).pipe(\r\n          map(action => ErrorActions.errorGeneral({error:action.error})),\r\n          )\r\n      )\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "generaErrors$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe( \r\n      ofType(ErrorActions.errorGeneral),\r\n      concatMap((action) =>\r\n        of(action).pipe(\r\n          tap(action=> {\r\n            // handle error,\r\n            // or propagate error handle error Angular ,throw action.error\r\n             this.router.navigate(['error'])\r\n          }),\r\n          //catchError(error => of(ErrorActions.loadErrorsFailure({ error }))\r\n          )\r\n      )\r\n    );\r\n  }, { dispatch: false })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, map, concatMap, filter, tap } from 'rxjs/operators';\r\nimport { Observable, EMPTY, of } from 'rxjs';\r\n\r\nimport * as ErrorActions from '../actions/error.actions';\r\nimport { Action } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class ErrorEffects {\r\n\r\n  convertErrors$ = createEffect(() => {\r\n    return this.actions$.pipe( \r\n      filter((action:any)=> !!action.error && !action.general),\r\n      concatMap((action:ErrorActions.ErrorAction & Action) =>\r\n        of(action).pipe(\r\n          map(action => ErrorActions.errorGeneral({error:action.error})),\r\n          )\r\n      )\r\n    );\r\n  });\r\n\r\n  // handle error general\r\n  generaErrors$ = createEffect(() => {\r\n    return this.actions$.pipe( \r\n      ofType(ErrorActions.errorGeneral),\r\n      concatMap((action) =>\r\n        of(action).pipe(\r\n          tap(action=> {\r\n            // handle error,\r\n            // or propagate error handle error Angular ,throw action.error\r\n             this.router.navigate(['error'])\r\n          }),\r\n          //catchError(error => of(ErrorActions.loadErrorsFailure({ error }))\r\n          )\r\n      )\r\n    );\r\n  }, { dispatch: false });\r\n\r\n\r\n\r\n\r\n  constructor(private actions$: Actions,private router:Router) {}\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GlobalErrorHandler",
            "id": "injectable-GlobalErrorHandler-1acd41d89a5fb94881bb908e24f820ac01f1d4b77e5e87be622cc2e203e1be45f0f81808628e79ff1a9b97c43950d7c2d49fb6e7304ca179c0cf805aeb9a8d19",
            "file": "src/app/services/errorHandler.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ErrorHandler, Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { errorHandlerAngular } from \"../store/actions/error.actions\";\r\n\r\n@Injectable()\r\nexport class GlobalErrorHandler implements ErrorHandler {\r\n    handleError(error: any) {\r\n        const store = this.injector.get(Store);\r\n        const router = this.injector.get(Router);\r\n        try {\r\n            store.dispatch(errorHandlerAngular({ error: error.message || error}))\r\n        }\r\n        catch (e) {\r\n            console.error('Error sending store',  e)\r\n        }\r\n        console.error('Erro in handler',error.message, error)\r\n        //router.navigate(['error']);  \r\n    }\r\n    constructor(private injector: Injector) {\r\n\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoadingEffects",
            "id": "injectable-LoadingEffects-da4078f381b25e4d1ed8d6cdfddf55cc717957c72e3df77036ae8ae1385b0e65299ced09441ad0eb561d238d93dc16014ca24b3546675b12261dbad7eda382a8",
            "file": "src/app/store/effects/loading.effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions } from '@ngrx/effects';\n\n\n\n\n@Injectable()\nexport class LoadingEffects {\n\n  \n\n  constructor(private actions$: Actions) {}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoadingEffects",
            "id": "injectable-LoadingEffects-685affee97ec7e7aa103deadc8190f37125072f3f67e10f0698cff779c5ce5db1473cb0a95b50c1b1f65403297be0741b15f071af98329c16278132d8cc1ebae-1",
            "file": "src/app/posts/store/effects/loading.effects.ts",
            "properties": [
                {
                    "name": "actionsLoading",
                    "defaultValue": "[\r\n    {actionType:PostsActions.loadPosts.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show', idGroupLoading:'loadPost',idLoading: action.filter?.author})},\r\n    {actionType:PostsActions.loadPostssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide', idGroupLoading:'loadPost', idLoading:action.filter?.author})},\r\n    {actionType:PostsActions.loadPostssFailure.type, fnLoadingInfo: (action)=> ({type: 'hide', idGroupLoading:'loadPost'})},\r\n    // {actionType:CommentsActions.sortComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show' })},\r\n    // {actionType:CommentsActions.loadComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show' })},\r\n    // {actionType:CommentsActions.loadCommentssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide'})},    \r\n    {actionType:CommentsActions.loadComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show', idGroupLoading:'loadComments',idLoading: action.filter?.author})},\r\n    {actionType:CommentsActions.loadCommentssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide', idGroupLoading:'loadComments', idLoading:action.filter?.author})},  \r\n    {actionType:CommentsActions.loadCommentssFailure.type, fnLoadingInfo: (action)=> ({type: 'hide', idGroupLoading:'loadComments'})},   \r\n    {actionType:CommentsActions.queryBegin.type, fnLoadingInfo: (action:any)=> ({type: 'show', idGroupLoading:'querytest', idLoading:action.data})},\r\n    {actionType:CommentsActions.queryEnd.type, fnLoadingInfo: (action:any)=> ({type: 'hide', idGroupLoading:'querytest', idLoading:action.data})}\r\n    \r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionsLoading",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "hideLoadings$",
                    "defaultValue": "this.createEffectLoadingHide(this.actionsLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "showLoadings$",
                    "defaultValue": "this.createEffectLoadingShow(this.actionsLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "createEffectLoadingHide",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "inheritance": {
                        "file": "AbstractLoadingEffects"
                    }
                },
                {
                    "name": "createEffectLoadingShow",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "AbstractLoadingEffects"
                    }
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, map, concatMap, filter } from 'rxjs/operators';\r\nimport { Observable, EMPTY, of } from 'rxjs';\r\n\r\nimport * as LoadingActions from '../../../store/actions/loading.actions';\r\nimport * as PostsActions from '../actions/posts.actions';\r\nimport * as CommentsActions from '../actions/comments.actions';\r\nimport { Action } from '@ngrx/store';\r\nimport { LoadInfo, LoadInfoSuccces } from 'src/app/services/models/filter.model';\r\nimport { AbstractLoadingEffects } from 'src/app/services/base/abstractNgRx.loading';\r\n\r\ntype ActionsLoading=  {actionType:string,fnLoadingInfo:(action:any)=> ActionLoadingInfo}[]\r\n\r\ntype ActionLoadingInfo={\r\n  type: 'show' | 'hide';\r\n  idGroupLoading?: string;\r\n  idLoading?: string; \r\n} \r\n\r\nfunction getActions(actionsLoading:ActionsLoading){\r\n   return actionsLoading.map(ac=> ac.actionType);\r\n}\r\n\r\nfunction getLoadingInfo(action:Action,actionsLoading:ActionsLoading):ActionLoadingInfo{\r\n  return actionsLoading.find(ac=> ac.actionType===action.type).fnLoadingInfo(action);\r\n}\r\n\r\n@Injectable()\r\nexport class LoadingEffects extends AbstractLoadingEffects{\r\n\r\n  actionsLoading:ActionsLoading=[\r\n    {actionType:PostsActions.loadPosts.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show', idGroupLoading:'loadPost',idLoading: action.filter?.author})},\r\n    {actionType:PostsActions.loadPostssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide', idGroupLoading:'loadPost', idLoading:action.filter?.author})},\r\n    {actionType:PostsActions.loadPostssFailure.type, fnLoadingInfo: (action)=> ({type: 'hide', idGroupLoading:'loadPost'})},\r\n    // {actionType:CommentsActions.sortComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show' })},\r\n    // {actionType:CommentsActions.loadComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show' })},\r\n    // {actionType:CommentsActions.loadCommentssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide'})},    \r\n    {actionType:CommentsActions.loadComments.type, fnLoadingInfo: (action:LoadInfo)=> ({type: 'show', idGroupLoading:'loadComments',idLoading: action.filter?.author})},\r\n    {actionType:CommentsActions.loadCommentssSuccess.type, fnLoadingInfo: (action:LoadInfoSuccces)=> ({type: 'hide', idGroupLoading:'loadComments', idLoading:action.filter?.author})},  \r\n    {actionType:CommentsActions.loadCommentssFailure.type, fnLoadingInfo: (action)=> ({type: 'hide', idGroupLoading:'loadComments'})},   \r\n    {actionType:CommentsActions.queryBegin.type, fnLoadingInfo: (action:any)=> ({type: 'show', idGroupLoading:'querytest', idLoading:action.data})},\r\n    {actionType:CommentsActions.queryEnd.type, fnLoadingInfo: (action:any)=> ({type: 'hide', idGroupLoading:'querytest', idLoading:action.data})}\r\n    \r\n  ];\r\n\r\n\r\n\r\n  showLoadings$ = this.createEffectLoadingShow(this.actionsLoading);\r\n \r\n  hideLoadings$ = this.createEffectLoadingHide(this.actionsLoading);\r\n\r\n \r\n\r\n}\r\n",
            "extends": "AbstractLoadingEffects",
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LoadingEffects-1"
        },
        {
            "name": "MyLibDisplayService",
            "id": "injectable-MyLibDisplayService-cb1baf34fc133ce9b04e1635c0875f59bb8e3fe796c363a4cec878440e9e179ac81f886df78b13f9538d402dfcc88f3bdf32f2e278a18d82e86f0e3b51cdc442",
            "file": "projects/my-lib-display/src/lib/my-lib-display.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MyLibDisplayService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "PostsEffects",
            "id": "injectable-PostsEffects-58d1048a6ebd87e2110d11d1a4b91b41eeb0bd19bdd737d9953c934d1b094224cf4a316d74837942071e38d4e4a52cc373ab5f2d43ff61a3df1c8575f51092ff",
            "file": "src/app/posts/store/effects/posts.effects.ts",
            "properties": [
                {
                    "name": "filterPosts$",
                    "defaultValue": "this.createEffectFilter(PostsActions.filterPosts,PostsActions.loadPosts,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loadInitPosts$",
                    "defaultValue": "this.createEffectLoadInit(PostsActions.loadInitPosts,PostsActions.loadPosts,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loadPosts$",
                    "defaultValue": "this.createEffectLoad(PostsActions.loadPosts,PostsActions.loadPostssSuccess,PostsActions.loadPostssFailure,\r\n    ({filter,sortInfo,pageRequest}:LoadInfo<FilterPost>)=>this.postsService.getPosts(filter,sortInfo,pageRequest)  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "paginationPosts$",
                    "defaultValue": "this.createEffectPagination(PostsActions.paginationPosts,PostsActions.loadPosts,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sortPosts$",
                    "defaultValue": "this.createEffectSort(PostsActions.sortPosts,PostsActions.loadPosts,selectorsList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "actions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectFilter",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectLoad",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectLoadInit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectPagination",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "createEffectSort",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "console",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConsole",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "nameLog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NamesLog",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxend",
                    "defaultValue": "rxend.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxinfo",
                    "defaultValue": "rxinfo.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxlog",
                    "defaultValue": "rxlog.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxwarn",
                    "defaultValue": "rxwarn.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getLink",
                    "args": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageInfo",
                            "type": "PageInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractListNgRxService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { AbstractListNgRxService } from 'src/app/services/base/abstractNgRx.service';\r\nimport { LoadInfo, PageRequest, SortInfo } from '../../../services/models/filter.model';\r\nimport { FilterPost } from '../../models/models';\r\nimport { PostsService } from '../../services/posts.service';\r\nimport * as PostsActions from '../actions/posts.actions';\r\nimport { selectorsList } from '../selectors/posts.selectors';\r\n\r\n\r\n\r\n\r\n@Injectable()\r\nexport class PostsEffects extends AbstractListNgRxService{\r\n\r\n  \r\n  loadPosts$ = this.createEffectLoad(PostsActions.loadPosts,PostsActions.loadPostssSuccess,PostsActions.loadPostssFailure,\r\n    ({filter,sortInfo,pageRequest}:LoadInfo<FilterPost>)=>this.postsService.getPosts(filter,sortInfo,pageRequest)  )  ;\r\n  loadInitPosts$ = this.createEffectLoadInit(PostsActions.loadInitPosts,PostsActions.loadPosts,selectorsList);\r\n  filterPosts$ = this.createEffectFilter(PostsActions.filterPosts,PostsActions.loadPosts,selectorsList);\r\n  paginationPosts$ = this.createEffectPagination(PostsActions.paginationPosts,PostsActions.loadPosts,selectorsList);\r\n  sortPosts$ = this.createEffectSort(PostsActions.sortPosts,PostsActions.loadPosts,selectorsList);  \r\n\r\n\r\n\r\n  constructor(protected override actions$: Actions,protected override store:Store, private postsService:PostsService ) {\r\n    super()\r\n  }\r\n\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractListNgRxService",
            "type": "injectable"
        },
        {
            "name": "PostsService",
            "id": "injectable-PostsService-3c290ca08895dafb896d6a05a3096ede82ca7ffe97e44f6c136c80769b1a89324b16514b4c3a1d2e1de0657e3d86856ab121a3dc97285d834f8ed38c586d0a71",
            "file": "src/app/posts/services/posts.service.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "console",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConsole",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "nameLog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NamesLog",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxend",
                    "defaultValue": "rxend.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxinfo",
                    "defaultValue": "rxinfo.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxlog",
                    "defaultValue": "rxlog.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxwarn",
                    "defaultValue": "rxwarn.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getPosts",
                    "args": [
                        {
                            "name": "filterPost",
                            "type": "FilterPost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResponseData<Post>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterPost",
                            "type": "FilterPost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "deleteEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "getEntities",
                    "args": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [
                        "F"
                    ],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "updateEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntityService"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { NameLog } from 'src/app/services/utils/logger';\r\nimport { NamesLog } from 'src/app/services/utils/names-classes';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AbstractEntityService } from '../../services/base/abstract.entity.service';\r\nimport { IResponseData, PageRequest, SortInfo } from '../../services/models/filter.model';\r\nimport { FilterPost, Post } from '../models/models';\r\n\r\n\r\n@Injectable()\r\n@NameLog(NamesLog.PostsService)\r\nexport class PostsService extends AbstractEntityService<Post> {\r\n  constructor(injector: Injector) {\r\n    super(injector, environment.urlHostApi, '/posts');\r\n  }\r\n\r\n  getPosts(filterPost:FilterPost,sortInfo:SortInfo,pageRequest:PageRequest): Observable<IResponseData<Post>> {\r\n    \r\n    return this.getEntities(sortInfo,pageRequest, (params) => {\r\n      if (filterPost?.author) {\r\n        params = params.append('author_like', filterPost.author);\r\n      }\r\n      if (filterPost?.title) {\r\n        params = params.append('title_like', filterPost.title);\r\n      }\r\n      return params;\r\n    }).pipe(map((resp) => ({ link: resp.headers.get('link'), data: resp.body })));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractEntityService",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AbstractApp",
            "id": "class-AbstractApp-8a420a6f563517d3e355b8de3a2ffed3d297316df866796202fea5b5d8c67a6c8ff0fc208cadae941e31786e57a8ebbee6153416dad2e8b09d551c04ba630313",
            "file": "src/app/shared/base/abstract-app.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injector, Optional } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { getLogger, IConsole } from \"src/app/services/utils/logger\";\r\nimport { rxlog, rxwarn } from \"src/app/services/utils/opersrx\";\r\nimport { rxinfo, rxend } from '../../services/utils/opersrx';\r\nimport { NamesLog } from '../../services/utils/names-classes';     \r\n\r\nexport abstract class AbstractApp {\r\n    console: IConsole;\r\n    rxlog:<T>(...vars:any[])=>(obsSrc: Observable<T>) => Observable<T>=rxlog.bind(this); \r\n    rxinfo:<T>(...vars:any[])=>(obsSrc: Observable<T>) => Observable<T>=rxinfo.bind(this); \r\n    rxwarn:<T>(...vars:any[])=>(obsSrc: Observable<T>) => Observable<T>=rxwarn.bind(this); \r\n    rxend:<T>(str:string)=>(obsSrc: Observable<T>) => Observable<T>=rxend.bind(this);\r\n\r\n    nameLog:NamesLog;\r\n\r\n    constructor(@Optional()  protected injector?: Injector,@Optional()  protected nameLogNew?: string){\r\n        //console.debug('nameLog',(this as any).nameLog,(this as any)?.prototype?.nameLog);\r\n        if(nameLogNew){\r\n            this.nameLog=nameLogNew as unknown as NamesLog;\r\n        }\r\n        this.console = getLogger(this.nameLog);\r\n        \r\n       \r\n        \r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "nameLogNew",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nameLogNew",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "console",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConsole",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "nameLog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NamesLog",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "rxend",
                    "defaultValue": "rxend.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "rxinfo",
                    "defaultValue": "rxinfo.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "rxlog",
                    "defaultValue": "rxlog.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "rxwarn",
                    "defaultValue": "rxwarn.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractEntityService",
            "id": "class-AbstractEntityService-cf089ca22028c49437bed8c9fccbf3f8bd47700a6d0b1e2a158cdd84ec4b9e792c1c9553f8e610e7318d5fcfaad1d25da301e35c6c7edb7bce75f2173d3e3a0b",
            "file": "src/app/services/base/abstract.entity.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { PageRequest, SortInfo } from 'src/app/services/models/filter.model';\r\nimport { Entity } from '../models/models';\r\nimport { AbstractService } from './abstract.service';\r\n\r\n\r\n\r\nexport abstract class AbstractEntityService<E extends Entity> extends AbstractService {\r\n  protected httpClient: HttpClient;\r\n  constructor(protected override injector: Injector, protected urlHost: string, protected pathEntity: string) {\r\n    super();\r\n    this.httpClient = this.injector.get(HttpClient);\r\n  }\r\n\r\n  getEntities<F>(sortInfo:SortInfo,pageRequest:PageRequest, fnParams: (params: HttpParams) => HttpParams): Observable<HttpResponse<any>> {\r\n    let urlPosts = this.urlEntity;\r\n\r\n    let params = new HttpParams();\r\n      if (pageRequest?.requestLink) {\r\n       // urlPosts = this.getLink(filterList.page);\r\n       urlPosts=pageRequest.requestLink;\r\n      } else {\r\n        params = fnParams(params);\r\n        if (pageRequest?.pageIndex) {\r\n          params = params.append('_page', pageRequest.pageIndex.toString());\r\n        }\r\n        if (pageRequest?.pageSize) {\r\n          params = params.append('_limit', pageRequest.pageSize.toString());\r\n        }\r\n\r\n        if (sortInfo) {\r\n          params = params.append('_sort', sortInfo.active);\r\n          params = params.append('_order', sortInfo.direction);\r\n        }\r\n      }\r\n   \r\n    return this.httpClient.get(urlPosts, { params, observe: 'response' });\r\n  \r\n  }\r\n\r\n\r\n  // getEntitiesList<F,R>(pathUrl?:string,filterList?: FilterListInfo<F>, fnParams?: (params: HttpParams) => HttpParams): Observable<R> {\r\n  //   let urlList = `${this.urlHost}${pathUrl || this.pathEntity}`;\r\n\r\n  //   let params = new HttpParams();\r\n  //   if (filterList) {\r\n  //     if (filterList.page && filterList.page.requestLink) {\r\n  //       urlList = this.getLink(filterList.page);\r\n  //     } else {\r\n  //       params = fnParams(params);\r\n  //       if (filterList.page && filterList.page.pageIndex) {\r\n  //         params = params.append('_page', filterList.page.pageIndex.toString());\r\n  //       }\r\n  //       if (filterList.page && filterList.page.pageSize) {\r\n  //         params = params.append('_limit', filterList.page.pageSize.toString());\r\n  //       }\r\n\r\n  //       if (filterList.order) {\r\n  //         params = params.append('_sort', filterList.order.active);\r\n  //         params = params.append('_order', filterList.order.direction);\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   return this.httpClient.get<R>(urlList, { params });\r\n  \r\n  // }\r\n\r\n \r\n\r\n  addEntity(entity: E): Observable<E> {\r\n    return this.httpClient.post<E>(this.urlEntity, entity);\r\n  }\r\n\r\n  updateEntity(entity: E): Observable<E> {\r\n    return this.httpClient.put<E>(`${this.urlEntity}/${entity.id}`, entity);\r\n  }\r\n\r\n  deleteEntity(entity: E): Observable<E> {\r\n    return this.httpClient.delete<E>(`${this.urlEntity}/${entity.id}`);\r\n  }\r\n\r\n  get urlEntity(): string {\r\n    return `${this.urlHost}${this.pathEntity}`;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "urlHost",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pathEntity",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "urlHost",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pathEntity",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "console",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConsole",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "nameLog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NamesLog",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxend",
                    "defaultValue": "rxend.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxinfo",
                    "defaultValue": "rxinfo.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxlog",
                    "defaultValue": "rxlog.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                },
                {
                    "name": "rxwarn",
                    "defaultValue": "rxwarn.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "AbstractApp"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEntities",
                    "args": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [
                        "F"
                    ],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortInfo",
                            "type": "SortInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageRequest",
                            "type": "PageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fnParams",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "params",
                                    "type": "HttpParams",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEntity",
                    "args": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "E",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractService",
            "accessors": {
                "urlEntity": {
                    "name": "urlEntity",
                    "getSignature": {
                        "name": "urlEntity",
                        "type": "string",
                        "returnType": "string",
                        "line": 85
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConsoleApp",
            "id": "class-ConsoleApp-eae01badea1ba38eaa23271303be82bd222caae29c6c5d2e10d2be4821842ae7eb554bf1877f360bede41886b78808e89b761b6d84b72155f8dbfdbb788d594a",
            "file": "src/app/services/utils/logger.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Logger } from 'ng2-logger/browser';\r\nimport { Level,Log } from 'ng2-logger/browser';\r\n\r\nexport let mapNames: Map<string, number> = new Map();\r\nexport let mapNamesLevels: Map<string, Level[]> = new Map();\r\n\r\n\r\nexport function NameLog(nameLog:string) {\r\n  return function(constructor: any) {\r\n   // console.log('namelog')\r\n      //const orig = constructor.prototype.ngOnDestroy\r\n     // constructor.nameLog=nameLog;\r\n\r\n      if(constructor.prototype)constructor.prototype.nameLog=nameLog;\r\n      // constructor.prototype.ngOnDestroy = function() {\r\n      //     for(const prop in this) {\r\n      //         const property = this[prop]\r\n      //         if(typeof property.unsubscribe === \"function\" && !obs$.includes(property))\r\n      //             obs$.push(property)\r\n      //     }\r\n      //     for(const ob$ of obs$) {\r\n      //           ob$.unsubscribe()\r\n      //     }\r\n      //     orig.apply()\r\n      // }\r\n  }\r\n}\r\n\r\nexport interface IConsole {\r\n  log(msg: string, ...params:any[]):void;\r\n  debug(msg: string, ...params:any[]):void;\r\n  error(msg: string, ...params:any[]):void;\r\n  info(msg: string, ...params:any[]):void;\r\n  warn(msg: string, ...params:any[]):void;\r\n}\r\n\r\n\r\n\r\nexport function getLogger(name: string): IConsole {\r\n  return new ConsoleApp(name);\r\n}\r\n\r\nexport function updateLevelLog() {\r\n // if (environment.production) {\r\n    //  Log.setProductionMode();\r\n    //Log.onlyLevel(Level.ERROR, Level.INFO, Level.WARN);\r\n        \r\n // }\r\n}\r\n\r\nexport declare type NameLevels={\r\n  name:string;\r\n  levels:Level[];\r\n};\r\nexport function setNamesLevels(names:NameLevels[]){\r\n   names?.forEach(n=> mapNamesLevels.set(n.name,n.levels));  \r\n}\r\nexport function getNameLevels(name:string):Level[]{\r\n  return mapNamesLevels.get(Array.from(mapNamesLevels!.keys()).find(k=> name.startsWith(k)));\r\n  \r\n}\r\nexport function refreshNamesLevels(){\r\n  if(localStorage.getItem('namesLevels')){\r\n    setNamesLevels(JSON.parse(localStorage.getItem('namesLevels')))\r\n  }\r\n}\r\nexport function getNameLog(name: string): string {\r\n  if (mapNames.get(name) !== undefined) {\r\n    let id = mapNames.get(name);\r\n    mapNames.set(name, ++id);\r\n  } else {\r\n    mapNames.set(name, 0);\r\n  }\r\n  return `${name}_${mapNames.get(name)}`;\r\n}\r\n\r\nexport class ConsoleApp implements IConsole{\r\n  logN2: Logger;\r\n\r\n  constructor(name?: string) {\r\n    let nameLog: string;\r\n    if (name) {\r\n      nameLog = getNameLog(name);\r\n    } else {\r\n      nameLog = getNameLog(this.constructor.name);\r\n    }\r\n\r\n    if(getNameLevels(nameLog)){\r\n      this.logN2 = Log.create(nameLog,...getNameLevels(nameLog));  \r\n    }else{\r\n      this.logN2 = Log.create(nameLog);\r\n    }\r\n  }\r\n\r\n  log(msg: string, ...params: any[]) {\r\n    this.logN2.d(msg, ...params);\r\n  }\r\n  debug(msg: string, ...params: any[]) {\r\n    this.logN2.d(msg, ...params);\r\n  }\r\n  error(msg: string, ...params: any[]) {\r\n    this.logN2.error(msg, ...params);\r\n  }\r\n  info(msg: string, ...params: any[]) {\r\n    this.logN2.i(msg, ...params);\r\n  }\r\n  warn(msg: string, ...params: any[]) {\r\n    this.logN2.w(msg, ...params);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "logN2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Logger",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methods": [
                {
                    "name": "debug",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IConsole"
            ]
        },
        {
            "name": "ValidatorsApp",
            "id": "class-ValidatorsApp-354e52afd5841a818f78ee13075075b7baa46791f834e32345743180496644657023bf7612f5adb17a38af383a639a5a1d89b15311759569ce0846c1ba716ace",
            "file": "src/app/demo-lib/validatosapp.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\n\r\nfunction addError(err:object, errors_:object|null){\r\n    return {\r\n       ...errors_,\r\n       ...err \r\n    }\r\n}\r\n\r\n\r\nfunction clearError(err:string, errors_:any){\r\n    if(errors_)(delete errors_[err]);\r\n\r\n    return errors_;\r\n}\r\n\r\n\r\n\r\nexport class ValidatorsApp extends Validators {\r\n  static compareFields(field1: string, field2: string): ValidatorFn {\r\n    let myFun = (cc: FormGroup): ValidationErrors | null => {\r\n      if(!cc.controls[field1] || !cc.controls[field2]) return null;  \r\n      if (cc.controls[field1].value === cc.controls[field2].value) {\r\n        cc.controls[field1].setErrors(addError({ Equal : true },cc.controls[field1].errors ));\r\n        //cc.controls[field2].setErrors({ Equal : true });\r\n      } else {\r\n        cc.controls[field1].setErrors(clearError('Equal',cc.controls[field1].errors));\r\n        //cc.controls[field2].setErrors(null);\r\n      }\r\n      return null;\r\n    };\r\n    return myFun as ValidatorFn;\r\n  }\r\n\r\n  static compareFieldsGroup(field1: string, field2: string): ValidatorFn {\r\n    let myFun = (cc: FormGroup): ValidationErrors | null => {\r\n      if(!cc.controls[field1] || !cc.controls[field2]) return null;  \r\n    //  console.log('enter compareFieldsGroup')\r\n      if (cc.controls[field1].value === cc.controls[field2].value) {\r\n        return {\r\n            Equal : true \r\n          };    \r\n        //cc.setErrors({ Equal : true });\r\n      } else {\r\n        return null;\r\n      }\r\n     \r\n    };\r\n    return myFun as ValidatorFn;\r\n  }\r\n\r\n  static compareFieldsGroupb(field1: string, field2: string): ValidatorFn {\r\n    let myFun = (cc: FormGroup): ValidationErrors | null => {\r\n      if(!cc.controls[field1] || !cc.controls[field2]) return null;  \r\n      //console.log('enter compareFieldsGroup')\r\n      if (cc.controls[field1].value === cc.controls[field2].value) {\r\n        return {\r\n            EqualBB : true \r\n          };    \r\n        //cc.setErrors({ Equal : true });\r\n      } else {\r\n        return null;\r\n      }\r\n     \r\n    };\r\n    return myFun as ValidatorFn;\r\n  }\r\n  \r\n\r\n  static compareFieldsOtherGroup(field1: string, field2: string,group1: string|null, group2: string|null): ValidatorFn {\r\n    let myFun = (cc: FormGroup): ValidationErrors | null => {\r\n     const control1=  group1? (cc.controls[group1] as FormGroup)?.controls[field1] :cc.controls[field1]; \r\n     const control2=  group2? (cc.controls[group2] as FormGroup)?.controls[field2] :cc.controls[field2]; \r\n\r\n      if(!control1 || !control2) return null;  \r\n      //console.log('enter compareFieldsGroup')\r\n      if (control1.value === control2.value) {\r\n        return {\r\n            EqualFieldsGroup : true \r\n          };    \r\n      } else {\r\n        return null;\r\n      }\r\n     \r\n    };\r\n    return myFun as ValidatorFn;\r\n  }\r\n\r\n  \r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "compareFields",
                    "args": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compareFieldsGroup",
                    "args": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compareFieldsGroupb",
                    "args": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compareFieldsOtherGroup",
                    "args": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "group1",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "group2",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "field1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "group1",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "group2",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Validators",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AbstractDialogComponent",
            "id": "directive-AbstractDialogComponent-2ded8f8c3b3d6dc05d69a4578595d43ce1cffa61211c77b161bfdc9341b7969408b95fd6121578c006e05fc8aa42afd728fefe33ef1ba6156ef8590f7ed2ed76",
            "file": "projects/my-lib-display/src/lib/material/dialog/abstract-dialog/abstract-dialog.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, EventEmitter, Injector, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { FormComponent } from '../../form/form.module';\r\n\r\n@Directive()\r\n//@NameLog(NamesLog.AbstractDialogComponent)\r\nexport abstract class AbstractDialogComponent<E = object, T = object> implements OnInit, AfterViewInit {\r\n  @Input() data: any;\r\n @Output() onAccept= new EventEmitter();\r\n  \r\n  @ViewChild(FormComponent)\r\n  formComponent: FormComponent;\r\n\r\n  @ViewChild('buttons')\r\n  templateButtons: TemplateRef<any>;\r\n\r\n\r\n  constructor(protected injector: Injector) {\r\n \r\n  }\r\n\r\n  ngOnInit(): void {\r\n    \r\n  }\r\n  ngAfterViewInit(): void {\r\n    \r\n  }\r\n\r\n  // onSubmit(): void {\r\n  //   if (this.formParent.valid) {\r\n  //     //this.authService.login(this.form.value).pipe(this.rxComp()).subscribe();\r\n  //   }\r\n  //   this.dialogRef.close(this.formParent.value);\r\n  //   // this.accept.emit(this.formParent.value);\r\n  // }\r\n}\r\n",
            "providers": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onAccept",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "formComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormComponent",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "FormComponent"
                        }
                    ]
                },
                {
                    "name": "templateButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'buttons'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "CellRenderDirective",
            "id": "directive-CellRenderDirective-8070d673b95f29c1a835b6b20b02668f177a6bce4eccbd25482f5a986810c8148a17ed63f691893383cdf12ee374a61e8095a43093985c7e5d5bbb5da1851912",
            "file": "projects/my-lib-display/src/lib/material/table/col-info/cell-render.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[CellRender]'\r\n})\r\nexport class CellRenderDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "selector": "[CellRender]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            }
        },
        {
            "name": "FormField",
            "id": "directive-FormField-e0da0ce94514c5aa57207bf999099be85848352c8889e76d29899454e19f198b89c0c6276e21c115d7b4c867dcc32489ed3aa9987fecdf2a0d1d2a00538a008a",
            "file": "projects/my-lib-display/src/lib/fields/form-field.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ChangeDetectorRef, Directive, EventEmitter, Input, Optional, Output } from '@angular/core';\r\nimport { AbstractControlOptions, ControlContainer, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { distinctUntilChanged, skip, tap } from 'rxjs/operators';\r\nimport { setDelay } from './utils';\r\n\r\n@Directive({\r\n  selector: '[appFormField]',\r\n})\r\nexport abstract class FormField {\r\n  @Input()\r\n  name!: string;\r\n  @Input()\r\n  value!: any;\r\n  @Output()\r\n  onChange = new EventEmitter();\r\n\r\n  @Input()\r\n  label!: string;\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n\r\n  @Input()\r\n  validations!: ValidatorFn | ValidatorFn[] | null;\r\n  @Input()\r\n  labelTop!: boolean;\r\n\r\n  control!: FormControl;\r\n\r\n  constructor(@Optional() private parentControl: ControlContainer, protected changeDet: ChangeDetectorRef) {\r\n    this.control = new FormControl();\r\n  }\r\n\r\n  ngOnInit() {\r\n   // console.log('parentcontrol', this.parentControl);\r\n    this.parentFormGroup = this.parentControl?.control as FormGroup;\r\n    if (this.value) this.control.setValue(this.value);\r\n    setDelay(() => {\r\n      if (this.validations) this.control.addValidators(this.validations);\r\n      this.control.updateValueAndValidity();\r\n    });\r\n\r\n    this.addControl();\r\n  }\r\n\r\n  updateField(formGroup: FormGroup) {\r\n    // this.parentFormGroup = formGroup;\r\n    // this.parentFormGroup.addControl(this.name, this.control);\r\n    // this.changeDet.detectChanges();\r\n  }\r\n\r\n  addControl() {\r\n    this.parentFormGroup.addControl(this.name, this.control);\r\n    this.control.valueChanges.pipe(tap((val) => this.onChange.emit(val))).subscribe();    \r\n    this.control.statusChanges.pipe(\r\n      skip(1),\r\n      distinctUntilChanged(),\r\n      tap((s)=> {\r\n        //if(s==='INVALID')\r\n        console.log('chang status errors',s) \r\n      }),\r\n      tap((s)=> {\r\n       this.changeDet.detectChanges()\r\n      }\r\n      )\r\n    ).subscribe()\r\n    \r\n  }\r\n}\r\n",
            "selector": "[appFormField]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FormgDirective",
            "id": "directive-FormgDirective-2530cac16a9e5717dea7e7316dfdc4b91ca570e7f2d375ddd9b66fb450a60f511d6a2faa0839ef42690e08539e8a2019a7c31c2272bf21ee2cb85e4aa2ee0966",
            "file": "projects/my-lib-display/src/lib/material/form/components/formg.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[formg]'\r\n})\r\nexport class FormgDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "selector": "[formg]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            }
        },
        {
            "name": "MatFieldDirective",
            "id": "directive-MatFieldDirective-84b5a80ec259f96867e1b78ceb676691f789e71c8e2050588d2b66775281bcce9949087cbc942684c40080d020d7e9135c998364189c38a14fc421f38291b672",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/mat-field.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[MatField]'\r\n})\r\nexport class MatFieldDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "selector": "[MatField]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            }
        },
        {
            "name": "RowDetailDirective",
            "id": "directive-RowDetailDirective-5f9b3b242416367cbf34e48e114e9e1d8d16113c4f9386fa8874da0bdfe176a6b6c8ce8a3aa34a73e3423deb8843006410c56d6a9607d7e7d011730d09123b19",
            "file": "projects/my-lib-display/src/lib/material/table/table-info/row-detail.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[RowDetail]'\r\n})\r\nexport class RowDetailDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n",
            "selector": "[RowDetail]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            }
        },
        {
            "name": "SpinnerLoadingDirective",
            "id": "directive-SpinnerLoadingDirective-8c61200147d2b3631c8b150a3cc2556383d5152fbec2d3654bf51efb79af8f4b86e94415bd3ca30a74658c763ba13260317ec4533c21ab2e4e335fbdf64b38d8",
            "file": "projects/my-lib-display/src/lib/material/spinner/spinner-loading.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnChanges, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { SpinnerComponent } from './spinner.module';\r\n\r\n@Directive({\r\n  selector: '[libLoading]'\r\n})\r\nexport class SpinnerLoadingDirective implements OnChanges {\r\n\r\n  @Input()\r\n  libLoading:boolean;\r\n\r\n  constructor(private viewContainer:ViewContainerRef,private templateRef:TemplateRef<any>) {\r\n\r\n   }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if(changes['libLoading']){\r\n        this.updateLoading(this.libLoading);\r\n    }\r\n  }\r\n\r\n   updateLoading(loading:boolean){\r\n      this.viewContainer.clear(); \r\n      if(loading){\r\n         this.viewContainer.createComponent(SpinnerComponent);\r\n      }else{\r\n         this.viewContainer.createEmbeddedView(this.templateRef); \r\n      }\r\n   }\r\n\r\n}\r\n",
            "selector": "[libLoading]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "libLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLoading",
                    "args": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f199839b6152e2c79fa4b99b213011773469640e1f06ffcf95e837d7a844d513f7cf70082e36ec7ce3dad598538648d22f6bc415d010cda1025ca106def6dac6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'ngrx-store'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'ngrx-store';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * and can be replaced. * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * End of Placeholder * * * * * * * * * * * -->\r\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\r\n\r\n<lib-my-lib-display></lib-my-lib-display>\r\n<button routerLink=\"/demo\">Customers</button> **\r\n<button routerLink=\"/posts\">Posts</button> **\r\n<button routerLink=\"/posts/comments\">Comments</button> **\r\n\r\n<button routerLink=\"/users\">Users</button> **\r\n\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "AppComponentDemo",
            "id": "component-AppComponentDemo-2601ffb4bafc3e0e3490ebb0a6cb6b40fa13ffbf6507202a2a1cdd2194295fb07bb4659ada18c1e48fea6a7154937f1f12e642f56d305fa88443ed3ace4bb532",
            "file": "src/app/demo-lib/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-demo",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataList$",
                    "defaultValue": "this.subjectList.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "dataSelect$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<DataSelect[]>(createData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "subjectList",
                    "defaultValue": "new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "title",
                    "defaultValue": "'app-dialog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "val",
                    "defaultValue": "'val1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "valueForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "valueSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "valueSelectComplex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "filterList",
                    "args": [
                        {
                            "name": "filter",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsInGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationsInOtherGroup",
                    "args": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f1g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "f2g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f1g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "f2g",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Item } from 'my-lib-display';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { delay, map, tap } from 'rxjs/operators';\r\nimport { ValidatorsApp } from './validatosapp';\r\n\r\nexport interface DataSelect{\r\n  key: string;\r\n  value:string,\r\n  desc: string;\r\n}\r\n\r\n\r\nexport function createData():DataSelect[]{\r\n  return [\r\n    {key: '1', value: '11', desc:'desc data 11' },\r\n    {key: '1', value: '12', desc:'desc data 12' },\r\n    {key: '1', value: '13', desc:'desc data 13' },\r\n    {key: '2', value: '21', desc:'desc data 21' },\r\n    {key: '2', value: '22', desc:'desc data 22' },\r\n    {key: '2', value: '23', desc:'desc data 23' },\r\n    {key: '3', value: '31', desc:'desc data 31' },\r\n    {key: '3', value: '32', desc:'desc data 32' },\r\n    {key: '3', value: '33', desc:'desc data 33' },\r\n    \r\n  ];\r\n}\r\n\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n];\r\n\r\n@Component({\r\n  selector: 'app-demo',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponentDemo {\r\n  title = 'app-dialog';\r\n  valueForm:any;\r\n  valueSelect: any;\r\n  valueSelectComplex: any;\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n  subjectList= new BehaviorSubject<PeriodicElement[]>(ELEMENT_DATA);\r\n\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n  dataList$= this.subjectList.asObservable();\r\n  val:string='val1';\r\n\r\n    constructor(private detect:ChangeDetectorRef){\r\n      this.dataSelect$= this.subject.pipe(\r\n        tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(2000)\r\n      ) as Observable<Item[]>;\r\n         \r\n    }\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.key===key))\r\n  }\r\n  \r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  validationsGroup(f1:string,f2:string){\r\n    return [ValidatorsApp.compareFields(f1,f2)]\r\n  }\r\n  validationsInGroup(f1:string,f2:string,f3:string){\r\n    return [ValidatorsApp.compareFieldsGroup(f1,f2),ValidatorsApp.compareFieldsGroupb(f1,f3)]\r\n  }\r\n\r\n  validationsInOtherGroup(f1:string,f2:string,f1g:string|null,f2g:string|null){\r\n    return [ValidatorsApp.compareFieldsOtherGroup(f1,f2,f1g,f2g)]\r\n  }\r\n\r\n  get dataTable(){\r\n    return ELEMENT_DATA;\r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.subjectList.next([...sortList(ELEMENT_DATA,sort.active,sort.direction)]) ;\r\n    \r\n  }\r\n\r\n  filterList(filter:{name:string,position:number}){\r\n    this.subjectList.next([...ELEMENT_DATA.filter(e=> e.position===filter.position && e.name.includes(filter.name))]) ;\r\n    \r\n  }\r\n\r\n}\r\n\r\n\r\nfunction sortList(list:any[],key:string,asc:'asc' | 'desc' | ''){\r\n  return list.sort((a,b)=> {\r\n    if(a[key]===b[key]) return 0;\r\n    if(asc==='asc'){\r\n     return (a[key]> b[key])?1:-1;\r\n    }else{\r\n     return (a[key]> b[key])?-1:1;\r\n    }\r\n  });\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 84
                    }
                },
                "dataTable": {
                    "name": "dataTable",
                    "getSignature": {
                        "name": "dataTable",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                }
            },
            "templateData": "<h1>Examples Dialog with components</h1>\r\n\r\n<h2>Filter list</h2>\r\n<app-form (onAccept)=\"filterList($event)\" >\r\n  <ng-container [formGroup]=\"group\" *formg=\"let group\">\r\n    <div class=\"flex flex-row\">\r\n      <app-text-field [name]=\"'name'\" [label]=\"'Filte by name'\" [validations]=\"validations\" MatField></app-text-field>\r\n      <app-number-field [name]=\"'position'\" [label]=\"'Filte by position'\" ></app-number-field>\r\n    </div>\r\n  </ng-container>\r\n</app-form>\r\n\r\n\r\n<app-table [dataSource]=\"dataList$ | async\" (onSort)=\"sortData($event)\">\r\n  <table-info>\r\n    <col-info [name]=\"'name'\" [header]=\"'Name Tpl'\" [typeCell]=\"'tpl'\" [sort]=\"true\">\r\n      <ng-template CellRender let-row>Tpl:{{ row.name }}</ng-template>\r\n    </col-info>\r\n    <col-info [name]=\"'name'\" [header]=\"'Name Normal'\" [sort]=\"true\"> </col-info>\r\n    <col-info [name]=\"'name'\" [header]=\"'Name Extend'\" [typeCell]=\"'extended'\" [sort]=\"true\"> </col-info>\r\n    <col-info [name]=\"'position'\" [header]=\"'Position'\" [typeCell]=\"'tpl'\" [sort]=\"true\">\r\n      <ng-template CellRender let-row>Tpl:{{ row.position }}</ng-template>\r\n    </col-info>\r\n    <col-info [name]=\"'positionkey'\" [header]=\"'Position'\" [typeCell]=\"'tpl'\" [sort]=\"true\">\r\n      <ng-template CellRender let-row>Tpl-key:{{ row.position }}</ng-template>\r\n    </col-info>\r\n    <col-info [name]=\"'position'\" [header]=\"'Position'\" [sort]=\"true\"> </col-info>\r\n    <col-info [name]=\"'symbol'\" [header]=\"'Symbol'\"> </col-info>\r\n    <col-info [name]=\"'weight'\" [header]=\"'Weight'\" [typeCell]=\"'extended'\" [sort]=\"true\"> </col-info>\r\n    <ng-template RowDetail let-row>\r\n      <p>\r\n        {{row |json}}\r\n      </p>\r\n    </ng-template>\r\n  </table-info>\r\n</app-table>\r\n\r\n<app-tabs>\r\n  <app-tab [name]=\"'TAb1'\" [value]=\"val\">\r\n    <ng-template> This is Tab1 ******* </ng-template>\r\n  </app-tab>\r\n  <app-tab [name]=\"'TAb2'\" [value]=\"val\">\r\n    <ng-template> This is Tab2 ******* </ng-template>\r\n  </app-tab>\r\n</app-tabs>\r\n<button (click)=\"val = 'new val'\">chnge val</button>\r\n\r\n<app-form (onAccept)=\"valueForm = $event\" [validations]=\"validationsInOtherGroup('texttest-other', 'text-group-other', null, 'mygroup')\">\r\n  <ng-container [formGroup]=\"group\" *formg=\"let group\">\r\n    <div class=\"flex flex-column\">\r\n      <app-text-field [name]=\"'texttest'\" [label]=\"'text test'\"></app-text-field>\r\n      <app-text-field [name]=\"'texttest-other'\" [label]=\"'text test other *'\" [validations]=\"validations\" MatField></app-text-field>\r\n      <app-text-field [name]=\"'text-mat'\" [label]=\"'text material'\" [validations]=\"validations\" MatField></app-text-field>\r\n      <app-group-field [name]=\"'mygroup'\" [columnFields]=\"true\" [validations]=\"validationsGroup('text-group', 'text-group-other')\">\r\n        <ng-container [formGroup]=\"group2\" *formg=\"let group2\">\r\n          <app-text-field [name]=\"'text-group'\" [label]=\"'text group'\" [validations]=\"validations\"></app-text-field>\r\n          <app-text-field [name]=\"'text-group-other'\" [label]=\"'text group other'\" MatField></app-text-field>\r\n          <app-complex-field\r\n            [name]=\"'complexfield'\"\r\n            [label]=\"'complex field'\"\r\n            (onChange)=\"valueSelectComplex = $event\"\r\n            class=\"m-1\"\r\n          ></app-complex-field>\r\n          <app-complex2-field\r\n            [name]=\"'complexfield2'\"\r\n            [label]=\"'complex field 2'\"\r\n            (onChange)=\"valueSelectComplex = $event\"\r\n            class=\"m-1\"\r\n          ></app-complex2-field>\r\n          <app-text-field [name]=\"'text-mat'\" [label]=\"'text material'\" [validations]=\"validations\" MatField></app-text-field>\r\n          <app-email-field [name]=\"'email'\" [label]=\"'Email *'\"></app-email-field>\r\n          <app-group-field\r\n            [name]=\"'mygroup2'\"\r\n            class=\"flex flex-wrap\"\r\n            [validations]=\"validationsInGroup('text-group-other', 'text-group-other-2', 'text-group-other-3')\"\r\n          >\r\n            <ng-container [formGroup]=\"group3\" *formg=\"let group3\">\r\n              <app-text-field [name]=\"'text-group-other'\" [label]=\"'text test other'\" class=\"w-6\"></app-text-field>\r\n              <app-text-field [name]=\"'text-group-other-2'\" [label]=\"'text test other 2'\" class=\"w-6\"></app-text-field>\r\n              <app-text-field [name]=\"'text-group-other-3'\" [label]=\"'text test other 3'\" class=\"w-6\"></app-text-field>\r\n              <app-select-field\r\n                [name]=\"'myselect'\"\r\n                [label]=\"'My select *'\"\r\n                [listItems]=\"[\r\n                  { value: '1', desc: 'desc 1' },\r\n                  { value: '2', desc: 'desc 2' },\r\n                  { value: '3', desc: 'desc 3' }\r\n                ]\"\r\n                (onChange)=\"updateData($event)\"\r\n                [validations]=\"validations\"\r\n                MatField\r\n                class=\"w-6\"\r\n              ></app-select-field>\r\n              <app-select-field\r\n                [name]=\"'myselect2'\"\r\n                [label]=\"'My select 2 *'\"\r\n                [listItems]=\"dataSelect$ | async\"\r\n                [value]=\"'22'\"\r\n                (onChange)=\"valueSelect = $event\"\r\n                MatField\r\n                class=\"w-6\"\r\n              ></app-select-field>\r\n            </ng-container>\r\n          </app-group-field>\r\n        </ng-container>\r\n      </app-group-field>\r\n      <app-group-field [name]=\"'lastgroup'\" class=\"flex flex-wrap\">\r\n        <ng-container [formGroup]=\"group4\" *formg=\"let group4\">\r\n          <app-text-field [name]=\"'text-group-last'\" [label]=\"'last '\" [value]=\"'Value last'\" class=\"w-6\" [labelTop]=\"true\" MatField></app-text-field>\r\n          <app-text-field [name]=\"'text-group-last-2'\" [label]=\"'last 2'\" class=\"w-6\" [labelTop]=\"true\" MatField></app-text-field>\r\n          <div class=\"w-12 flex justify-content-center\">\r\n            <app-number-field [name]=\"'number field'\" [label]=\"'Number field'\" [value]=\"10\" class=\"w-6\"></app-number-field>\r\n            <app-text-field [name]=\"'text-group-last-cent'\" [label]=\"'last 3'\" class=\"w-6\" [value]=\"'center field'\"></app-text-field>\r\n          </div>\r\n        </ng-container>\r\n      </app-group-field>\r\n    </div>\r\n  </ng-container>\r\n</app-form>\r\n\r\n<h3>Change list:</h3>\r\n{{ valueSelect | json }}\r\n\r\n<h3>Change complex list:</h3>\r\n{{ valueSelectComplex | json }}\r\n\r\n<h3>Value Form</h3>\r\n{{ valueForm | json }}\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-8ceaf520f96e5437b08eeda244d84efb29effe62ddca4fc38eaa229085c2a1126c5715e61445bae741505aca1e4d377b350cb05fadd1dc45d9b2bbf7527029f1",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 748,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-7e610f76b7e0c0b4d80ebfee2aba204751c205e007a5bfd8b416005a8db09e6e844e23529f29a5278d3e3b8bf0fe2834a7d92d852976f0e0fac617610a214bee-1",
            "file": "projects/my-lib-display/src/lib/material/button/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'lib-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent implements OnInit {\n\n  @Input() label:string;\n  @Input() disabled=false;\n  @Output() onClick= new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "\n<button mat-raised-button  (click)=\"onClick.emit($event)\" [disabled]=\"disabled\" color=\"primary\">{{label}}</button>"
        },
        {
            "name": "ColInfoComponent",
            "id": "component-ColInfoComponent-66e83c2c70af9ecd1ce13cd69f0d59340b220670aca7d342dd59d6556ed2185787f0d4eaed3818b74844d424b438e0f51b86ba77d45e4a145f236cfa2d33fad6",
            "file": "projects/my-lib-display/src/lib/material/table/col-info/col-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "col-info",
            "styleUrls": [
                "./col-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./col-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sort",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "typeCell",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "TypeCell",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cellRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "CellRenderDirective, {read: TemplateRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\r\nimport { CellRenderDirective } from './cell-render.directive';\r\n\r\n\r\ntype TypeCell= 'normal' | 'extended' | 'tpl' ;\r\n\r\n@Component({\r\n  selector: 'col-info',\r\n  templateUrl: './col-info.component.html',\r\n  styleUrls: ['./col-info.component.scss']\r\n})\r\nexport class ColInfoComponent implements OnInit {\r\n  @Input()\r\n  header!:string;\r\n\r\n  @Input()\r\n  name!:string;\r\n\r\n  @Input()\r\n  sort:boolean=false;\r\n  \r\n\r\n  @Input()\r\n  typeCell:TypeCell='normal';\r\n\r\n  \r\n  @ContentChild(CellRenderDirective,{read: TemplateRef})\r\n  cellRender!:TemplateRef<any>; \r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./col-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>col-info works!</p>\r\n"
        },
        {
            "name": "Complex2FieldComponent",
            "id": "component-Complex2FieldComponent-1779f41cd54fa6943278470d01ae9c00d4dd4610bbaf61a36cc0c9e331352c1320ecd483c5bef8bce55322c3b933c40567cafcc5b1c4a3dbd19df4a5f437b21f",
            "file": "projects/my-lib-display/src/lib/complex-fields/complex2-field/complex2-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-complex2-field",
            "styleUrls": [
                "./complex2-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./complex2-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlAux",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "dataSelect$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<DataSelect[]>(createData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "addChildGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addTextSimple",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Optional, Output, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormControl, ControlContainer, Validators, FormBuilder } from '@angular/forms';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap, map, delay } from 'rxjs/operators';\r\nimport { DataSelect, createData } from '../../fields/components/data';\r\nimport { Item } from '../../fields/fields.module';\r\n\r\n@Component({\r\n  selector: 'app-complex2-field',\r\n  templateUrl: './complex2-field.component.html',\r\n  styleUrls: ['./complex2-field.component.scss']\r\n})\r\nexport class Complex2FieldComponent implements OnInit {\r\n\r\n  @Input()\r\n  name!: string;\r\n  @Input()\r\n  value!: any;\r\n  @Output()\r\n  onChange = new EventEmitter();\r\n\r\n  @Input()\r\n  label!: string;\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n  group!: FormGroup;\r\n\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n\r\n   controlAux=new FormControl();\r\n\r\n      \r\n    constructor(@Optional() private parentControl: ControlContainer, protected changeDet: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n      this.group =this.formBuilder.group({}) ;\r\n      this.dataSelect$= this.subject.pipe(\r\n       // tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(1000)\r\n      ) as Observable<Item[]>;\r\n      \r\n  }\r\n  ngAfterViewInit(): void {\r\n    \r\n  }\r\n  ngAfterContentInit(): void {\r\n   \r\n  }\r\n\r\n  ngOnInit() {\r\n    //console.log('parentcontrol', this.parentControl);\r\n    this.parentFormGroup = this.parentControl?.control as FormGroup;\r\n    this.addChildGroup();\r\n    this.addTextSimple();\r\n   \r\n  }\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.desc.includes(key)))\r\n  }\r\n\r\n  \r\n  addTextSimple(){\r\n    this.group.addControl('mytext',this.controlAux);    \r\n  }\r\n\r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n\r\n  addChildGroup() {\r\n    this.parentFormGroup.addControl(this.name, this.group);  \r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./complex2-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n      <ng-container [formGroup]=\"group\" >\r\n        <app-layout-field>\r\n          <label>{{ label }}</label>\r\n          <app-text-field [name]=\"'search'\" (onChange)=\"updateData($event)\" [label]=\"'Search *'\" [validations]=\"validations\"></app-text-field>\r\n          <app-select-field\r\n            [name]=\"'listsearch'\"\r\n            [listItems]=\"dataSelect$ | async\"\r\n            [label]=\"'Items'\"\r\n            (onChange)=\"onChange.emit($event)\"  ></app-select-field>\r\n        </app-layout-field>\r\n        <app-layout-field>\r\n          <label>Aux field:</label>\r\n          <input type=\"text\" [formControl]=\"controlAux\" placeholder=\"'Insert ...'\"  /> \r\n        </app-layout-field>\r\n      </ng-container>    \r\n  </ng-container>\r\n"
        },
        {
            "name": "ComplexFieldComponent",
            "id": "component-ComplexFieldComponent-599bb040112486934d1366214dca56b71bca524854e9c4e84d5d800900e6850cb7784eac16d66dd154365c13b2453f65a76d4db4f4a8edc5536b1afa5d412651",
            "file": "projects/my-lib-display/src/lib/complex-fields/complex-field/complex-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-complex-field",
            "styleUrls": [
                "./complex-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./complex-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlAux",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "dataSelect$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Item[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "groupComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "GroupFieldComponent"
                        }
                    ]
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<DataSelect[]>(createData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "addTextSimple",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Optional, Output, ViewChild } from '@angular/core';\r\nimport { ControlContainer, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { delay, map, tap } from 'rxjs/operators';\r\nimport { DataSelect, createData } from '../../fields/components/data';\r\nimport { GroupFieldComponent, Item } from '../../fields/fields.module';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-complex-field',\r\n  templateUrl: './complex-field.component.html',\r\n  styleUrls: ['./complex-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ComplexFieldComponent implements OnInit,AfterContentInit,AfterViewInit {\r\n  @Input()\r\n  name!: string;\r\n  @Input()\r\n  value!: any;\r\n  @Output()\r\n  onChange = new EventEmitter();\r\n\r\n  @Input()\r\n  label!: string;\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n\r\n  subject= new BehaviorSubject<DataSelect[]>(createData());\r\n\r\n  dataSelect$: Observable<Item[]>;\r\n\r\n   controlAux=new FormControl();\r\n\r\n   @ViewChild(GroupFieldComponent)\r\n   groupComp!:GroupFieldComponent;\r\n   \r\n    constructor(@Optional() private parentControl: ControlContainer, protected changeDet: ChangeDetectorRef) {\r\n      this.dataSelect$= this.subject.pipe(\r\n      //  tap(values=> console.log('values',values)),\r\n        map(data=> data.map( d => d as Item)),\r\n        delay(1000)\r\n      ) as Observable<Item[]>;\r\n      \r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.addTextSimple()\r\n  }\r\n  ngAfterContentInit(): void {\r\n   \r\n  }\r\n\r\n  ngOnInit() {\r\n    //console.log('parentcontrol', this.parentControl);\r\n    this.parentFormGroup = this.parentControl?.control as FormGroup;\r\n   \r\n   \r\n  }\r\n\r\n  updateData(key:string){\r\n    if(!key) return;\r\n    this.subject.next(createData().filter(d=> d.desc.includes(key)))\r\n  }\r\n\r\n  \r\n  addTextSimple(){\r\n    this.groupComp.group.addControl('mytext',this.controlAux);\r\n    //this.changeDet.markForCheck();\r\n  }\r\n\r\n  get validations(){\r\n    return [Validators.required]\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./complex-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "AfterViewInit"
            ],
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 72
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n  <app-group-field [name]=\"name\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\">\r\n      <app-layout-field>\r\n        <label>{{ label }}</label>\r\n        <app-text-field [name]=\"'search'\" (onChange)=\"updateData($event)\" [label]=\"'Search *'\" [validations]=\"validations\"></app-text-field>\r\n        <app-select-field\r\n          [name]=\"'listsearch'\"\r\n          [listItems]=\"dataSelect$ | async\"\r\n          [label]=\"'Items'\"\r\n          (onChange)=\"onChange.emit($event)\"\r\n        ></app-select-field>\r\n      </app-layout-field>\r\n      <app-layout-field>\r\n        <label>Aux field:</label>\r\n        <input type=\"text\" [formControl]=\"controlAux\" placeholder=\"'Insert ...'\"  /> \r\n      </app-layout-field>\r\n    </ng-container>\r\n  </app-group-field>\r\n</ng-container>\r\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-c818f831f56d21f5c4288160846def38152d16cb4fda72ff18b5f218419722247a739980f39b3c6a52ac57f355a399f4d89ec2cc65a07cf41aca08369a4bd42d",
            "file": "projects/my-lib-display/src/lib/material/dialog/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-dialog",
            "styleUrls": [
                "./dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<object>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "compInside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<AbstractDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "dataDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "detect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<any | any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "formInside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "submitEmit",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "templateButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "viewContainerInside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dialogInside', {read: ViewContainerRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createInside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal';\r\nimport { ChangeDetectorRef, Component, ComponentRef, EventEmitter, Injector, Input, OnInit, Output, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { AbstractDialogComponent } from '../dialog.module';\r\n\r\n@Component({\r\n  selector: 'lib-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.css']\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\r\n  @Input() filters: any;\r\n  submitEmit: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Input() title: string;\r\n  @Output() accept: EventEmitter<object>=new EventEmitter();\r\n\r\n  @ViewChild('dialogInside',{read:ViewContainerRef})\r\n  viewContainerInside:ViewContainerRef;\r\n\r\n  \r\n  dialogRef: MatDialogRef<any, any>;\r\n  dataDialog: {\r\n    compInsideDialog: ComponentType<any>\r\n  };\r\n  detect: ChangeDetectorRef;\r\n  compInside: ComponentRef<AbstractDialogComponent>;\r\n  formInside:FormGroup;\r\n  templateButtons:TemplateRef<any>;\r\n\r\n  //abstract getFormGroup(): FormGroup;\r\n\r\n  constructor(protected injector: Injector) {\r\n    this.dialogRef = this.injector.get(MatDialogRef);\r\n    this.dataDialog = this.injector.get(MAT_DIALOG_DATA);\r\n    this.detect=this.injector.get(ChangeDetectorRef);\r\n    //  console.log('Abstract filter created **')\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    \r\n    //this.formParent = this.getFormGroup();\r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.createInside();\r\n    //this.displayDialog.accept.subscribe(() => this.onSubmit());\r\n  }\r\n\r\n  onSubmit(): void {\r\n    // if (this.formParent.valid) {\r\n    //   //this.authService.login(this.form.value).pipe(this.rxComp()).subscribe();\r\n    // }\r\n     this.dialogRef.close(this.formInside?.value);\r\n    // // this.accept.emit(this.formParent.value);\r\n  }\r\n\r\n\r\n  createInside(){\r\n    this.compInside=this.viewContainerInside.createComponent(this.dataDialog.compInsideDialog);\r\n    // detect changes  to refresh the component inside\r\n    this.detect.detectChanges();\r\n\r\n    this.compInside.instance.onAccept.subscribe(data=> this.dialogRef.close(data));\r\n    console.log('Form comp inside---------',this.compInside.instance.formComponent);\r\n    this.formInside=this.compInside.instance?.formComponent?.group;\r\n    this.templateButtons=this.compInside.instance?.templateButtons;\r\n    // detect to refresh these proterties   \r\n    this.detect.detectChanges();\r\n\r\n  }\r\n \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>dialog works!</p>\n<div>\n    <h2 mat-dialog-title>{{title }}</h2>\n    \n      <mat-dialog-content>\n      <ng-container #dialogInside></ng-container>\n      </mat-dialog-content>\n      <mat-dialog-actions>\n        <ng-container [ngTemplateOutlet]=\"templateButtons || buttons\"  [ngTemplateOutletContext]=\"{ $implicit: formInside }\"></ng-container>\n      </mat-dialog-actions>\n</div>\n\n\n<ng-template #buttons let-form>\n  <button mat-raised-button mat-dialog-close><mat-icon>cancel</mat-icon> {{'CANCEL' }}</button>\n  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\n  <button mat-raised-button  color=\"primary\" type=\"submit\"  (click)=\"onSubmit()\"  [disabled]=\"form?.invalid || form?.pristine\" >\n    <mat-icon>check</mat-icon> {{'ACCEPT'}}\n  </button>\n</ng-template>\n    \n"
        },
        {
            "name": "EmailFieldComponent",
            "id": "component-EmailFieldComponent-fd3a17ee070dbf43a6098d7cc079fc1d85c6bfaf686bf3d2cca530caa164d72692e61e9cf2b3f0d7ae2dac36df470075394fe788d1a7c35ae175c8e220ac7953",
            "file": "projects/my-lib-display/src/lib/fields/components/email-field/email-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-email-field",
            "styleUrls": [
                "./email-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./email-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Optional, Output } from '@angular/core';\r\nimport { FormGroup, ControlContainer, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-email-field',\r\n  templateUrl: './email-field.component.html',\r\n  styleUrls: ['./email-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EmailFieldComponent implements OnInit {\r\n\r\n  @Input()\r\n  name!: string;\r\n  @Input()\r\n  value!: any;\r\n  @Output()\r\n  onChange = new EventEmitter();\r\n\r\n  @Input()\r\n  label!: string;\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n     \r\n   constructor(@Optional() private parentControl: ControlContainer, protected changeDet: ChangeDetectorRef) {\r\n      \r\n  }\r\n\r\n  ngOnInit() {\r\n   // console.log('parentcontrol', this.parentControl);\r\n    this.parentFormGroup = this.parentControl?.control as FormGroup;\r\n   \r\n  }\r\n\r\n  get validations(){\r\n    return [Validators.required,Validators.email]\r\n  }\r\n  \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./email-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n  <app-text-field [name]=\"name\" [label]=\"label\" [validations]=\"validations\"></app-text-field>\r\n</ng-container>\r\n"
        },
        {
            "name": "FormCommentComponent",
            "id": "component-FormCommentComponent-82124accdcd208f347a33c93a6e7469e2cf24d8a5f3c0ab90a7c47a66079020b1d626db70202b165625f5c9a498079e98823508280b8aa7c5af471ee523e9186",
            "file": "src/app/posts/components/form-comment/form-comment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-comment",
            "styleUrls": [
                "./form-comment.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-comment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "AbstractDialogComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onAccept",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "AbstractDialogComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "formComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormComponent",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "FormComponent"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractDialogComponent"
                    }
                },
                {
                    "name": "templateButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'buttons'"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractDialogComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractDialogComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "AbstractDialogComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { AbstractDialogComponent } from 'my-lib-display';\n\n@Component({\n  selector: 'app-form-comment',\n  templateUrl: './form-comment.component.html',\n  styleUrls: ['./form-comment.component.scss']\n})\nexport class FormCommentComponent  \nextends AbstractDialogComponent \n//implements OnInit\n {\n  get validations():any[]{\n    return [Validators.required]\n  }\n  \n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-comment.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "AbstractDialogComponent",
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 14
                    }
                }
            },
            "templateData": "<p></p>\r\n<app-form  #formfilter [showButtons]=\"false\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\" >\r\n      <div class=\"flex flex-row\">\r\n        <app-text-field [name]=\"'comment'\" [label]=\"'Filter by comment'\" [validations]=\"validations\"  MatField>\r\n        </app-text-field>\r\n        <app-text-field [name]=\"'author'\" [label]=\"'Filter by author'\"  MatField>\r\n        </app-text-field>\r\n        <app-text-field [name]=\"'id'\" [label]=\"'Filter by Id'\" MatField>\r\n        </app-text-field>\r\n      </div>\r\n    </ng-container>\r\n  </app-form>\r\n\r\n\r\n  <ng-template #buttons let-form>\r\n    <lib-button [label]=\"'MY CLOSE'\" [disabled]=\"form?.invalid || form?.pristine\" (onClick)=\"onAccept.emit(form.value)\"></lib-button>\r\n    \r\n  </ng-template>\r\n  \r\n\r\n  \r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-d6f67bffd50a07dc27cd847af949b7b4c597e9ce8c4112efeac592418857164652069f4ff112346458c2f5428d926ada05a33840549d9b8d5df2acbc4493fc60",
            "file": "projects/my-lib-display/src/lib/material/form/components/form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [
                "./form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showButtons",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onAccept",
                    "defaultValue": "new EventEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "detect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FormField>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FormField, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "templateFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "accept",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateFields",
                    "args": [
                        {
                            "name": "fields",
                            "type": "QueryList<FormField>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "QueryList<FormField>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, Input, OnInit, Output, QueryList, TemplateRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { FormField } from '../../../fields/form-field.directive';\r\nimport {tap} from 'rxjs/operators'\r\nimport { setDelay } from '../../../fields/utils';\r\n\r\n@Component({\r\n  selector: 'app-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormComponent implements OnInit,AfterContentInit,AfterViewInit {\r\n\r\n  @ContentChild(TemplateRef) templateFields!:TemplateRef<any>;\r\n  group!: FormGroup;\r\n\r\n  @ContentChildren(FormField,{descendants:true})\r\n  fields!: QueryList<FormField>;\r\n\r\n  @Output()\r\n  onAccept:EventEmitter<any>= new EventEmitter;\r\n\r\n  @Input()\r\n  validations!: ValidatorFn | ValidatorFn[] | null;\r\n  @Input()\r\n  showButtons=true;\r\n\r\n  constructor(private formBuilder: FormBuilder,public detect:ChangeDetectorRef) {\r\n    this.createForm();\r\n   }\r\n   \r\n  ngAfterViewInit(): void {\r\n    // the group is all updated after view init\r\n    //console.log('group parent after view ',this.group, Object.keys(this.group.controls).length );        \r\n  }\r\n  \r\n   ngAfterContentInit(): void {\r\n     //console.log('group parent ',this.group,Object.keys(this.group.controls).length );\r\n  //    this.fields.changes.pipe(\r\n  //      tap((val) => this.updateFields(val))\r\n  //    ).subscribe();\r\n   }\r\n\r\n\r\n\r\n  updateFields(fields: QueryList<FormField>){\r\n    fields.forEach(field=>{\r\n     // console.log('field',field.name,field.control,field);      \r\n    })\r\n  }  \r\n\r\n\r\n\r\n  createForm(){\r\n    this.group= this.formBuilder.group({});\r\n    setDelay(()=>{\r\n      if(this.validations){\r\n        this.group.setValidators(this.validations);\r\n        this.group.updateValueAndValidity();\r\n      }\r\n    })\r\n  }\r\n\r\n  get errors(){\r\n    return Object.keys(this.group.errors as object);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  accept(){\r\n    this.onAccept.emit(this.group.value);\r\n  }\r\n\r\n  validShow(){\r\n   this.group.markAllAsTouched();\r\n   //(this.group.controls['mygroup'] as FormGroup).controls['email'].updateValueAndValidity();\r\n   \r\n  }\r\n\r\n  get isValid(){\r\n    return this.group.valid;\r\n  }\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "AfterViewInit"
            ],
            "accessors": {
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "",
                        "returnType": "",
                        "line": 83
                    }
                }
            },
            "templateData": "<!-- <p>form works!</p> -->\r\n<form [formGroup]=\"group\">\r\n  <div class=\"flex\">\r\n    <ng-container *ngTemplateOutlet=\"templateFields || empty; context: { $implicit: group }\"></ng-container>\r\n  </div>\r\n  <div *ngIf=\"group?.errors && (group.dirty || group.touched)\" class=\"error\">\r\n    Form Errors;   \r\n    <div *ngFor=\"let err of errors\">{{ err }}</div>\r\n  </div>\r\n  <lib-button (onClick)=\"accept()\" [disabled]=\"!isValid\" [label]=\"'Aceptar'\" *ngIf=\"showButtons\"></lib-button>\r\n  <lib-button (onClick)=\"validShow()\" [label]=\"'Show validations'\"  *ngIf=\"showButtons\"></lib-button>\r\n  *****************************************\r\n  <ng-template #empty> Fields empty </ng-template>\r\n</form>\r\n"
        },
        {
            "name": "FormFieldsComponent",
            "id": "component-FormFieldsComponent-8418808fe7fb786849e2862e5db0709c8ecc980b1b3e5a1ad93151336083a5ad369e681fb6e1cc65675f298a8c95333640bb2627f97f1d8e5bf9fb290511edad",
            "file": "src/stories/library/formfields.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [],
            "styles": [],
            "template": " <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\n  <ng-container [formGroup]=\"group\" *formg=\"let group\" >\n    <div class=\"flex flex-row\">\n      <app-text-field [name]=\"'comment'\" [label]=\"'Filter by comment'\" [validations]=\"validations\"  MatField>\n      </app-text-field>\n      <app-text-field [name]=\"'author'\" [label]=\"'Filter by author'\"  MatField>\n      </app-text-field>\n      <app-text-field [name]=\"'id'\" [label]=\"'Filter by Id'\" MatField>\n      </app-text-field>\n    </div>\n  </ng-container>\n</app-form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onAccept",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "accept",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` \r\n  <app-form  #formfilter [showButtons]=\"true\" (onAccept)=\"accept($event)\">\r\n    <ng-container [formGroup]=\"group\" *formg=\"let group\" >\r\n      <div class=\"flex flex-row\">\r\n        <app-text-field [name]=\"'comment'\" [label]=\"'Filter by comment'\" [validations]=\"validations\"  MatField>\r\n        </app-text-field>\r\n        <app-text-field [name]=\"'author'\" [label]=\"'Filter by author'\"  MatField>\r\n        </app-text-field>\r\n        <app-text-field [name]=\"'id'\" [label]=\"'Filter by Id'\" MatField>\r\n        </app-text-field>\r\n      </div>\r\n    </ng-container>\r\n  </app-form>\r\n  `  \r\n})\r\nexport default class FormFieldsComponent {\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onAccept = new EventEmitter();\r\n\r\n  \r\n  accept(data:any){\r\n    console.log('passsssssssssss accept',data)\r\n    this.onAccept.emit(data)\r\n  }\r\n\r\n  get validations():any[]{\r\n    return [Validators.required]\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 34
                    }
                }
            }
        },
        {
            "name": "GroupFieldComponent",
            "id": "component-GroupFieldComponent-a0ffee6662a8887fecff41056f7ed1804125657f9b9c4a35146ba34c98df5cd30226a7cea697f4a85ab9172eac25c634650dd9540ba892543ec3c96116223c65",
            "file": "projects/my-lib-display/src/lib/fields/components/group-field/group-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-field",
            "styleUrls": [
                "./group-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columnFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "templateFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Input, TemplateRef } from '@angular/core';\r\nimport { ControlContainer, FormBuilder, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { setDelay } from '../../utils';\r\n\r\n@Component({\r\n  selector: 'app-group-field',\r\n  templateUrl: './group-field.component.html',\r\n  styleUrls: ['./group-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GroupFieldComponent   {\r\n  \r\n  @Input()\r\n  name!: string;\r\n  @Input()\r\n  label!: string;\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n\r\n  @Input()\r\n  columnFields!: boolean;\r\n\r\n  group!: FormGroup;\r\n  @ContentChild(TemplateRef) templateFields!:TemplateRef<any>;\r\n\r\n  @Input()\r\n  validations!: ValidatorFn | ValidatorFn[] | null;\r\n\r\n  constructor( private parentControl: ControlContainer, private formBuilder: FormBuilder, protected changeDet: ChangeDetectorRef) {\r\n    this.group =this.formBuilder.group({}) ;\r\n  }\r\n\r\n  ngOnInit() {\r\n   // console.log('parentcontrol', this.parentControl);\r\n    this.parentFormGroup = this.parentControl?.control as FormGroup;\r\n    this.addControl();\r\n  }\r\n  \r\n  addControl() {\r\n    this.parentFormGroup.addControl(this.name, this.group);  \r\n    setDelay(()=>{\r\n      if(this.validations){\r\n        this.group.setValidators(this.validations);\r\n        this.group.updateValueAndValidity();\r\n      }\r\n    })\r\n  }\r\n\r\n  get errors(){\r\n    return Object.keys(this.group.errors as object);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: block; \r\n  border: 1px solid lightgrey;  \r\n  margin: 6px;\r\n  \r\n}",
                    "styleUrl": "./group-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "parentControl",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDet",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n  <ng-container [formGroup]=\"group\">\r\n    <!-- <div class=\"flex flex-wrap\" [class.flex-column]=\"columnFields\">  -->\r\n    <ng-container *ngTemplateOutlet=\"templateFields; context: { $implicit: group }\"></ng-container>\r\n    <div *ngIf=\"group?.errors && (group.dirty || group.touched)\" class=\"error\">\r\n      Group Errors;   \r\n      <div *ngFor=\"let err of errors\">{{ err }}</div>\r\n    </div>\r\n    <!-- </div> -->\r\n  </ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-260da370a7fe3424df2fc9508dacfbef400cbff6290b3e60eb202d98f8b8b3fc5c659ebe8b6cfb28926b99a6d57ba2ba67a6aae37674abd156b592e6012452ad",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LayoutFieldComponent",
            "id": "component-LayoutFieldComponent-61966508ccbabec7effcba573119df498c6c5094b0bd087c771c5605a635badf8f92d33e2cd61889865f40e047aea76aa1ffb19cc67f949136a76afb8c5eb209",
            "file": "projects/my-lib-display/src/lib/fields/components/layout-field/layout-field.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout-field",
            "styleUrls": [
                "./layout-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contrlx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "NgControl, {static: true}"
                        }
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { AbstractControl, FormGroup, NgControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-layout-field',\r\n  templateUrl: './layout-field.component.html',\r\n  styleUrls: ['./layout-field.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class LayoutFieldComponent implements OnInit {\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n  control!: AbstractControl;\r\n  @Input()\r\n  labelTop!:boolean;\r\n  @ContentChild(NgControl,{static:true}) contrlx!:NgControl;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    //console.log('ngcontrol',this.contrlx);\r\n    this.control=this.contrlx as any;\r\n  }\r\n  get errors(){\r\n    return Object.keys(this.control.errors as object);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".error{\r\n    font-weight: bolder;\r\n    color: lightpink;\r\n    margin-left:10px;\r\n}\r\n\r\n\r\nlabel{\r\n    font-weight: bolder;\r\n    margin-right: 13px;;\r\n    }",
                    "styleUrl": "./layout-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "templateData": "<div class=\"flex\" [class.flex-column]=\"labelTop\">\r\n    <ng-content select=\"label,mat-label\"></ng-content>\r\n    <ng-content></ng-content>     \r\n    <div *ngIf=\"control?.errors && (control.dirty || control.touched)\" class=\"error\">\r\n        <div *ngFor=\"let err of errors\">{{err}}</div>   \r\n   </div>\r\n</div>    \r\n"
        },
        {
            "name": "ListCommentsComponent",
            "id": "component-ListCommentsComponent-5cb911a5e8a8b50777884a3ad0c1ed461fae15643dc5c485304e6544ddd50e65b9ea953cfaf49c10130094f056794ba1fb62e30a64355949ab881e04075ffe87",
            "file": "src/app/posts/pages/list-comments/list-comments.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-comments",
            "styleUrls": [
                "./list-comments.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-comments.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "aux",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "comments$",
                    "defaultValue": "this.store.select(selectorsList.selectListData)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "filter$",
                    "defaultValue": "this.store.select(selectorsList.selectFilter)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "formComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormComponent",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formfilter'"
                        }
                    ]
                },
                {
                    "name": "linksStatus$",
                    "defaultValue": "this.store.select(selectorsList.selectLinksStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.store.select(selectorLoadingComments)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loadingGroup$",
                    "defaultValue": "this.store.select(selectorLoadingQuery)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "queryLoadings",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sort$",
                    "defaultValue": "this.store.select(selectorsList.selectSort)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "callQuery",
                    "args": [
                        {
                            "name": "author",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterList",
                    "args": [
                        {
                            "name": "filter",
                            "type": "FilterComment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "FilterComment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "paginate",
                    "args": [
                        {
                            "name": "typeEventPagination",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeEventPagination",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectQueryTest",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testExtra",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateFields",
                    "args": [
                        {
                            "name": "fields",
                            "type": "QueryList<FormField>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "QueryList<FormField>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ContentChild, OnInit, QueryList, ViewChild } from '@angular/core';\r\nimport { FormGroup, Validators } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { Store } from '@ngrx/store';\r\nimport { DialogService, TypeEventPagination } from 'my-lib-display';\r\nimport { FilterComment } from '../../models/comment';\r\nimport { selectorsList,selectorLoadingComments, selectorLoadingQuery } from '../../store/selectors/comments.selectors';\r\nimport * as CommentsActions from '../../store/actions/comments.actions';\r\nimport { FormComponent } from 'projects/my-lib-display/src/public-api';\r\nimport { delay, of, tap } from 'rxjs';\r\nimport { FormField } from 'projects/my-lib-display/src/lib/fields/form-field.directive';\r\nimport { createSelectorLoading, createSelectorLoadingGroup, filterLoadingId } from 'src/app/store/selectors/loading.selectors';\r\nimport { FormCommentComponent } from '../../components/form-comment/form-comment.component';\r\n\r\n@Component({\r\n  selector: 'app-list-comments',\r\n  templateUrl: './list-comments.component.html',\r\n  styleUrls: ['./list-comments.component.scss']\r\n})\r\nexport class ListCommentsComponent implements OnInit,AfterViewInit {\r\n\r\n  aux:string;\r\n  comments$ = this.store.select(selectorsList.selectListData);\r\n  loading$ = this.store.select(selectorLoadingComments);\r\n  loadingGroup$ =this.store.select(selectorLoadingQuery);\r\n  filter$ = this.store.select(selectorsList.selectFilter);\r\n  linksStatus$ = this.store.select(selectorsList.selectLinksStatus);\r\n  sort$ = this.store.select(selectorsList.selectSort);\r\n\r\n\r\n  queryLoadings:{name:string,data:string}[]=[];\r\n\r\n\r\n  @ViewChild('formfilter') formComponent:FormComponent;\r\n\r\n  constructor( private store: Store, private dialogSerice:DialogService) { }\r\n  \r\n\r\n  ngOnInit(): void {\r\n    this.store.dispatch(CommentsActions.loadInitComments());\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    console.log('form Comments controls', this.formComponent.fields.length, Object.keys(this.formComponent.group.controls).length) ;\r\n   //(this.formComponent.group.controls['lastgroup'] as FormGroup)?.controls['text-group-last-2'].setValue('My val from comments')\r\n   // this.formComponent.detect.detectChanges();\r\n\r\n    // this.formComponent.fields.changes.pipe(\r\n    //   tap((val) => this.updateFields(val))\r\n    // ) .subscribe();\r\n\r\n  }\r\n\r\n  updateFields(fields: QueryList<FormField>){\r\n    fields.forEach(field=>{\r\n      console.log('field Comment Filter=',field.name,field.control,field);\r\n      // if(field.name==='text-group-last-cent'){\r\n      //   field.control.setValue('change from list comments  XXX')\r\n      // }          \r\n    })\r\n  }  \r\n\r\n\r\n\r\n  filterList(filter:FilterComment){\r\n    console.log('filter enter***********',filter);\r\n    this.store.dispatch(CommentsActions.filterComments({filter}));    \r\n  }\r\n\r\n  paginate(typeEventPagination:TypeEventPagination){\r\n    this.store.dispatch(CommentsActions.paginationComments({typeEventPagination}));    \r\n  }\r\n\r\n  sortData(sort:Sort){\r\n    this.store.dispatch(CommentsActions.sortComments({sortInfo:sort}));    \r\n    \r\n  }\r\n\r\n  testExtra(){\r\n    this.store.dispatch(CommentsActions.extraComments({data:'OK extra'}));    \r\n  }\r\n\r\n  get validations():[]{\r\n    return []\r\n  }\r\n\r\n  onClickRow(row:any){\r\n    console.log('clicked row', row)\r\n    this.queryLoadings.push({name:row.author,data:null})\r\n    this.callQuery(row.author).subscribe(()=>      this.queryLoadings.find(q=> q.name===row.author).data='Finish query '+row.author)\r\n    \r\n  }\r\n  callQuery(author: any) {\r\n    function getRandomInt(min:number, max:number) {\r\n      return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n    const delayTime= 10000* getRandomInt(1,6)\r\n    return of(author).pipe(\r\n      tap(d=> this.store.dispatch(CommentsActions.queryBegin({data:author}))),\r\n      delay(delayTime),\r\n      tap(d=> this.store.dispatch(CommentsActions.queryEnd({data:author}))),\r\n    )\r\n  }\r\n\r\n  selectQueryTest(name:string):any{\r\n    // call selector direct\r\n   //return this.store.select(createSelectorLoading('querytest',name))\r\n   // call filter with selector obsevable\r\n    return filterLoadingId(this.loadingGroup$,name);\r\n  }\r\n\r\n  openDialog():void{\r\n    this.dialogSerice.openDialog(FormCommentComponent).subscribe((d)=> console.log('data Dialog ',d));\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.query{\r\n    display:inline-flex;\r\n    border: 2px solid red;\r\n    height: 100px;\r\n    min-width: 130px;\r\n}",
                    "styleUrl": "./list-comments.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogSerice",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogSerice",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 84
                    }
                }
            },
            "templateData": "\r\n<h1>List comments</h1>\r\n<lib-button [label]=\"'Test extra'\" (onClick)=\"testExtra()\"></lib-button>\r\n<lib-button [label]=\"'Add Comment'\" (onClick)=\"openDialog()\"></lib-button>\r\n<app-form (onAccept)=\"filterList($event)\" #formfilter >\r\n  <ng-container [formGroup]=\"group\" *formg=\"let group\">\r\n    <div class=\"flex flex-row\">\r\n      <app-text-field [name]=\"'comment'\" [label]=\"'Filter by comment'\" [value]=\"(filter$ | async)?.comment\" MatField [validations]=\"validations\">\r\n      </app-text-field>\r\n      <app-text-field [name]=\"'author'\" [label]=\"'Filter by author'\" [value]=\"(filter$ | async)?.author\" MatField>\r\n      </app-text-field>\r\n      <app-text-field [name]=\"'id'\" [label]=\"'Filter by Id'\" [value]=\"(filter$ | async)?.id\" MatField>\r\n      </app-text-field>\r\n    </div>\r\n  </ng-container>\r\n</app-form>\r\n<app-paginator [enablePrev]=\"linksStatus.prev\" [enableNext]=\"linksStatus.next\" [enableFirst]=\"linksStatus.first\" [enableLast]=\"linksStatus.last\"\r\n  (typeEvent)=\"paginate($event)\" *ngIf=\"linksStatus$ | async as linksStatus\"></app-paginator>\r\n\r\n  <ng-container *libLoading=\"loading$ | async\">\r\n  <app-table [dataSource]=\"comments$ |async\" (onSort)=\"sortData($event)\" [sortCurrent]=\"sort$ | async\" (onClickRow)=\"onClickRow($event)\">\r\n    <table-info>\r\n      <col-info [name]=\"'author'\" [header]=\"'Author Tpl'\" [typeCell]=\"'tpl'\" [sort]=\"true\">\r\n        <ng-template CellRender let-row>Author:{{ row.author }}</ng-template>\r\n      </col-info>\r\n      <col-info [name]=\"'comment'\" [header]=\"'Comment'\" [sort]=\"true\" [typeCell]=\"'extended'\"> </col-info>\r\n      <col-info [name]=\"'id'\" [header]=\"'Id'\" [sort]=\"true\"> </col-info>\r\n      <col-info [name]=\"'comment'\" [header]=\"'Comment'\" [sort]=\"true\"> </col-info>\r\n      <!-- <col-info [name]=\"'id'\" [header]=\"'Id'\" [typeCell]=\"'extended'\"> </col-info> -->\r\n    </table-info>\r\n  </app-table>\r\n</ng-container>\r\n\r\n<div *ngFor=\"let query of queryLoadings\" class=\"query\">\r\n  <div *libLoading=\"selectQueryTest(query.name) | async\">\r\n  name={{query.name}}\r\n  data={{query.data}}\r\n </div>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "ListPostsComponent",
            "id": "component-ListPostsComponent-62aaf372a86ee18ad6a953ee77017e4e02432dfa6d421ccb8fc6897d25977b3baff4be2d877a72dff64e4c52b2fff30b2571572403297fff3c2ccf0e5c6aaee8",
            "file": "src/app/posts/pages/list-posts/list-posts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-posts",
            "styleUrls": [
                "./list-posts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-posts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "aux",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "filter$",
                    "defaultValue": "this.store.select(selectorsList.selectFilter)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "linksStatus$",
                    "defaultValue": "this.store.select(selectorsList.selectLinksStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.store.select(selectorLoadingPosts)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "posts$",
                    "defaultValue": "this.store.select(selectorsList.selectListData)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "sort$",
                    "defaultValue": "this.store.select(selectorsList.selectSort)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "filterList",
                    "args": [
                        {
                            "name": "filter",
                            "type": "FilterPost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "FilterPost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "paginate",
                    "args": [
                        {
                            "name": "typeEventPagination",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "typeEventPagination",
                            "type": "TypeEventPagination",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Sort } from '@angular/material/sort';\nimport { Store } from '@ngrx/store';\nimport { TypeEventPagination } from 'my-lib-display';\nimport { FilterPost } from '../../models/models';\nimport  * as PostsActions from '../../store/actions/posts.actions';\nimport { selectorLoadingPosts, selectorsList } from '../../store/selectors/posts.selectors';\n\n@Component({\n  selector: 'app-list-posts',\n  templateUrl: './list-posts.component.html',\n  styleUrls: ['./list-posts.component.scss']\n})\nexport class ListPostsComponent implements OnInit {\n\n  aux:string;\n  posts$ = this.store.select(selectorsList.selectListData);\n  loading$ = this.store.select(selectorLoadingPosts);\n  filter$ = this.store.select(selectorsList.selectFilter);\n  linksStatus$ = this.store.select(selectorsList.selectLinksStatus);\n  sort$ = this.store.select(selectorsList.selectSort);\n\n  constructor( private store: Store) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(PostsActions.loadInitPosts());\n\n  }\n\n  filterList(filter:FilterPost){\n    this.store.dispatch(PostsActions.filterPosts({filter}));    \n  }\n\n  paginate(typeEventPagination:TypeEventPagination){\n    this.store.dispatch(PostsActions.paginationPosts({typeEventPagination}));    \n  }\n\n  sortData(sort:Sort){\n    this.store.dispatch(PostsActions.sortPosts({sortInfo:sort}));    \n    \n  }\n\n  get validations(){\n    return [Validators.required]\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-posts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "validations": {
                    "name": "validations",
                    "getSignature": {
                        "name": "validations",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            },
            "templateData": "<p>list-posts works!</p>\n\n\n<h1>List Posts</h1>\n\n<app-form (onAccept)=\"filterList($event)\">\n  <ng-container [formGroup]=\"group\" *formg=\"let group\">\n    <div class=\"flex flex-row\">\n      <app-text-field [name]=\"'title'\" [label]=\"'Filter by title'\" [value]=\"(filter$ | async)?.title\" MatField [validations]=\"validations\">\n      </app-text-field>\n      <app-text-field [name]=\"'author'\" [label]=\"'Filter by author'\" [value]=\"(filter$ | async)?.author\" MatField>\n      </app-text-field>\n    </div>\n  </ng-container>\n</app-form>\n<app-paginator [enablePrev]=\"linksStatus.prev\" [enableNext]=\"linksStatus.next\" [enableFirst]=\"linksStatus.first\" [enableLast]=\"linksStatus.last\"\n  (typeEvent)=\"paginate($event)\" *ngIf=\"linksStatus$ | async as linksStatus\"></app-paginator>\n\n  <ng-container *libLoading=\"loading$ | async\">\n  <app-table [dataSource]=\"posts$ | async\" (onSort)=\"sortData($event)\" [sortCurrent]=\"sort$ | async\">\n    <table-info>\n      <col-info [name]=\"'author'\" [header]=\"'Author Tpl'\" [typeCell]=\"'tpl'\" [sort]=\"true\">\n        <ng-template CellRender let-row>Author:{{ row.author }}</ng-template>\n      </col-info>\n      <col-info [name]=\"'title'\" [header]=\"'Title'\" [sort]=\"true\" [typeCell]=\"'extended'\"> </col-info>\n      <col-info [name]=\"'id'\" [header]=\"'Id'\" [sort]=\"true\"> </col-info>\n      <col-info [name]=\"'title'\" [header]=\"'Title'\" [sort]=\"true\"> </col-info>\n      <!-- <col-info [name]=\"'id'\" [header]=\"'Id'\" [typeCell]=\"'extended'\"> </col-info> -->\n    </table-info>\n  </app-table>\n</ng-container>\n\n"
        },
        {
            "name": "MaterialLayoutFieldComponent",
            "id": "component-MaterialLayoutFieldComponent-cdaa93c3a7de3f6de03410414ec9189824c1a51920b7ef68f088cbdb010dd779ca282f837f7aa1d02b5610db2455f90412e11c316b80020e7fbeaf9930dc65c7",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/material-layout-field/material-layout-field.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-material-layout-field",
            "styleUrls": [
                "./material-layout-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./material-layout-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatFormFieldControl<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "MatFormFieldControl, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_matFormField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatFormField",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatFormField, {static: true}"
                        }
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, ContentChild, Input, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-material-layout-field',\r\n  templateUrl: './material-layout-field.component.html',\r\n  styleUrls: ['./material-layout-field.component.scss'],\r\n  encapsulation:ViewEncapsulation.None\r\n})\r\nexport class MaterialLayoutFieldComponent implements OnInit {\r\n  @ContentChild(MatFormFieldControl, { static: true }) _control!: MatFormFieldControl<any>;\r\n  @ViewChild(MatFormField, { static: true }) _matFormField!: MatFormField;\r\n  control!: AbstractControl;\r\n\r\n  ngOnInit() {\r\n    this.control=this._control.ngControl as any;\r\n    this._matFormField._control = this._control;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./material-layout-field.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"fill\">\r\n  <mat-label><ng-content select=\"label\"></ng-content></mat-label>\r\n  <ng-content></ng-content>\r\n  <mat-error><app-mat-errors [control]=\"control\"></app-mat-errors></mat-error>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "MatErrorsComponent",
            "id": "component-MatErrorsComponent-0a6d4f0071584121aaaea969d871cfaa59d638ed20c84542d15326f97f21883405a3ee816435a5afe512ad38a5f432cd774ed33bf13e058f51acf86e20cc07ef",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/mat-errors/mat-errors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mat-errors",
            "styleUrls": [
                "./mat-errors.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mat-errors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "AbstractControl",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormGroup, AbstractControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-mat-errors',\r\n  templateUrl: './mat-errors.component.html',\r\n  styleUrls: ['./mat-errors.component.scss']\r\n})\r\nexport class MatErrorsComponent implements OnInit {\r\n\r\n  @Input()\r\n  parentFormGroup!: FormGroup;\r\n  @Input()\r\n  control!: AbstractControl;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  get errors(){\r\n    return this.control?.errors?Object.keys(this.control?.errors as object):[];\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mat-errors.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                }
            },
            "templateData": "<div *ngFor=\"let err of errors\">{{err}}</div>   \r\n"
        },
        {
            "name": "MyLibDisplayComponent",
            "id": "component-MyLibDisplayComponent-b19e82e444d73031602b44f6f0d4ab1e7b6b10c1aacf80e6ae85949e1f6dc191d98acb5c7d3403ecdc679d06de4c8ddceb491ff8a8ef9f9a9a9632286ea94b16",
            "file": "projects/my-lib-display/src/lib/my-lib-display.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-my-lib-display",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  my-lib-display works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-my-lib-display',\r\n  template: `\r\n    <p>\r\n      my-lib-display works!\r\n    </p>\r\n  `,\r\n  styles: [\r\n  ]\r\n})\r\nexport class MyLibDisplayComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "NumberFieldComponent",
            "id": "component-NumberFieldComponent-270c59dd734a854bcce8928489a84705a25134b1b5717a5d7a5199e315f97258968118bad9318af59ff743f3b74c31f8865f8cc1efc349c70ec2ce5ea278e09b",
            "file": "projects/my-lib-display/src/lib/fields/components/number-field/number-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-number-field",
            "styleUrls": [
                "./number-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./number-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormField } from '../../form-field.directive';\r\n\r\n@Component({\r\n  selector: 'app-number-field',\r\n  templateUrl: './number-field.component.html',\r\n  styleUrls: ['./number-field.component.scss']\r\n})\r\nexport class NumberFieldComponent extends FormField  implements OnInit {\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./number-field.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "FormField",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n    <app-layout-field [parentFormGroup]=\"parentFormGroup\"  [labelTop]=\"labelTop\">\r\n      <label>{{ label }}</label>\r\n      <input type=\"number\" [formControlName]=\"name\" placeholder=\"'Insert number...'\"  />\r\n    </app-layout-field>\r\n  </ng-container>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-10516e896f8c7c3d452a3aecd3f2d54eb0d4872c1e6a777f4ce99ef4150eb3a73e34f74d922cf8c681134d7b1955882bf7bc7cfa772fd6ecd46bc2a7fa588ec3",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Learn Storybook\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          docs\r\n        </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nh2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\np {\r\n  margin: 1em 0;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageErrorComponent",
            "id": "component-PageErrorComponent-961cdab4a3874926e553c35f29b8a6964e004e3f995323bdff7b0683970e403fd60f0038f2e13da2194dd2b7eb13c0a7feab561d28b25274bc68071e480af4bf",
            "file": "src/app/page-error/page-error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-error",
            "styleUrls": [
                "./page-error.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error$",
                    "defaultValue": "this.store.select(selectError)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { selectError, selectErrorState } from '../store/selectors/error.selectors';\n\n@Component({\n  selector: 'app-page-error',\n  templateUrl: './page-error.component.html',\n  styleUrls: ['./page-error.component.scss']\n})\nexport class PageErrorComponent implements OnInit {\n\n  error$= this.store.select(selectError);\n\n  constructor(private store:Store) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-error.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>page-error works!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p>\n\nError Details:\n\n<div>\n    {{ error$ | async | json }}\n</div>\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-b5a0dbf54560bb4e247faf834d5d6e353fe9f6bfdf6e0be062541e309a05cbfa6fe12578783f45ed28992512a181d498ecb400d2c26ee5c80bdf91fcf51670d5",
            "file": "projects/my-lib-display/src/lib/material/paginator/paginator/paginator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-paginator",
            "styleUrls": [
                "./paginator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "enableFirst",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableLast",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableNext",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enablePrev",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "first",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "last",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "next",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                },
                {
                    "name": "prev",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "typeEvent",
                    "defaultValue": "new EventEmitter<TypeEventPagination>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onDestroy",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\r\nimport { Subject, takeUntil, tap } from 'rxjs';\r\n\r\nexport type TypeEventPagination='first' | 'last' | 'prev' | 'next';\r\n\r\n@Component({\r\n  selector: 'app-paginator',\r\n  templateUrl: './paginator.component.html',\r\n  styleUrls: ['./paginator.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaginatorComponent implements OnInit,OnDestroy {\r\n  @Output() next = new EventEmitter();\r\n  @Output() prev = new EventEmitter();\r\n  @Output() first = new EventEmitter();\r\n  @Output() last = new EventEmitter();\r\n\r\n  @Input() enableNext = true;\r\n  @Input() enableFirst = true;\r\n  @Input() enableLast = true;\r\n  @Input() enablePrev = true;\r\n\r\n  @Output() typeEvent = new EventEmitter<TypeEventPagination>();\r\n\r\n  onDestroy= new Subject();\r\n  \r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.typeEvent.pipe(\r\n      tap(type=> {\r\n        switch(type){\r\n          case 'first':\r\n            this.first.emit();\r\n            break;\r\n          case 'last':\r\n            this.last.emit();\r\n            break;\r\n          case 'next':\r\n            this.next.emit();\r\n            break;\r\n          case 'prev':       \r\n          this.prev.emit();\r\n          break;\r\n        }\r\n      }),\r\n      takeUntil(this.onDestroy)\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n///   this.onDestroy.next(true);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container-paginator{\r\n    mat-icon{\r\n    font-size: 3em; \r\n  } \r\n}",
                    "styleUrl": "./paginator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "\r\n<div class=\"container-paginator\">\r\n   <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\" (click)=\"typeEvent.emit('first')\" [disabled]=\"!enableFirst\">\r\n    <mat-icon>first_page</mat-icon>\r\n   </button>\r\n   <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\" (click)=\"typeEvent.emit('prev')\" [disabled]=\"!enablePrev\">\r\n    <mat-icon>chevron_left</mat-icon>\r\n   </button>\r\n   <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\" (click)=\"typeEvent.emit('next')\" [disabled]=\"!enableNext\">\r\n    <mat-icon>chevron_right</mat-icon>\r\n   </button>\r\n   <button mat-icon-button color=\"primary\" aria-label=\"Example icon button with a home icon\" (click)=\"typeEvent.emit('last')\" [disabled]=\"!enableLast\" >\r\n    <mat-icon>last_page</mat-icon>\r\n   </button>\r\n</div>  "
        },
        {
            "name": "SelectFieldComponent",
            "id": "component-SelectFieldComponent-7b63499fbdc71b838e818c15c59dc7a53eb66fe5ec0278dd6821032a067d6e8e129380fdbc6c7a0c43654328a82620cd9502a8aaacb0e4211f3dffb9c6ef103f",
            "file": "projects/my-lib-display/src/lib/fields/components/select-field/select-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: FormField, useExisting: SelectFieldComponent }",
                    "type": "component"
                }
            ],
            "selector": "app-select-field:not([MatField])",
            "styleUrls": [
                "./select-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "listItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Item[] | null",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { FormField } from '../../form-field.directive';\r\n\r\nexport type Item= {value: string, desc:string};\r\n\r\n@Component({\r\n  selector: 'app-select-field:not([MatField])',\r\n  templateUrl: './select-field.component.html',\r\n  styleUrls: ['./select-field.component.scss'],\r\n  providers:[{provide:FormField, useExisting: SelectFieldComponent}],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SelectFieldComponent extends FormField  implements OnInit {\r\n   @Input()\r\n   listItems: Item[]|null=[]; \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select-field.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "FormField",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n    <app-layout-field [parentFormGroup]=\"parentFormGroup\" [labelTop]=\"labelTop\">\r\n      <label>{{ label }}</label>\r\n      <select class=\"custos-select\" [formControlName]=\"name\">\r\n        <option value=\"\" disabled>Choose item...</option>\r\n        <option *ngFor=\"let item of listItems\" [ngValue]=\"item.value\">{{item.desc}}</option>\r\n     </select>\r\n    </app-layout-field>\r\n</ng-container>\r\n  \r\n"
        },
        {
            "name": "SelectFieldMaterialComponent",
            "id": "component-SelectFieldMaterialComponent-749623034a95486c460fa94a31ba81fa9427dbd8685bf816a349adbd66b955cee72c3f9a1899df845dabf75a0d13a5b02e68f4e79232657da04601167fefd6ab",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/select-field-material/select-field-material.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-field[MatField]",
            "styleUrls": [
                "./select-field-material.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-field-material.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "listItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Item[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "SelectFieldComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { SelectFieldComponent } from 'projects/my-lib-display/src/lib/fields/fields.module';\r\n\r\n\r\n@Component({\r\n  selector: 'app-select-field[MatField]',\r\n  templateUrl: './select-field-material.component.html',\r\n  styleUrls: ['./select-field-material.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n\r\n})\r\nexport class SelectFieldMaterialComponent extends SelectFieldComponent implements OnInit {\r\n\r\n \r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select-field-material.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "SelectFieldComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-material-layout-field >\r\n  <label>{{label}}</label>\r\n  <mat-select  [formControl]=\"control\" >\r\n    <mat-option value=\"\" disabled>Choose item...</mat-option>\r\n    <mat-option *ngFor=\"let item of listItems\" [value]=\"item.value\">{{ item.desc }}</mat-option>\r\n  </mat-select>  \r\n</app-material-layout-field>\r\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-db9518706bd0be6e2609f30459c263050bb0a5208fbfe97a7e9c31815ed48fec14b5232ce5d25dcfc755987af62ba355b4960a400b81fc692e3a001d3b8ab8be",
            "file": "projects/my-lib-display/src/lib/material/spinner/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-spinner",
            "styleUrls": [
                "./spinner.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressSpinnerMode",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "value",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressSpinnerMode } from '@angular/material/progress-spinner';\n\n@Component({\n  selector: 'lib-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.css']\n})\nexport class SpinnerComponent implements OnInit {\n\n  color: ThemePalette = 'primary';\n  mode: ProgressSpinnerMode = 'indeterminate';\n  value = 50;\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./spinner.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-progress-spinner class=\"spin\" [color]=\"color\" [mode]=\"mode\"></mat-progress-spinner>\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-f327268fc6e9782ccdfc4117b96250465aaf910c5ef8310a5542f5d0fac3b2ee3c9288f3a50c11aaa75dd424e1ae2be6b2a08644ae9c00a492ff711b10d08bde",
            "file": "projects/my-lib-display/src/lib/tabs/tab/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tplTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'refTab'"
                        }
                    ]
                },
                {
                    "name": "tplTab2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'refTab2'"
                        }
                    ]
                },
                {
                    "name": "tplTabContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tab',\r\n  templateUrl: './tab.component.html',\r\n  styleUrls: ['./tab.component.scss']\r\n})\r\nexport class TabComponent implements OnInit {\r\n  @Input()\r\n  name!:string;\r\n\r\n  @Input()\r\n  value!:string;\r\n\r\n  @ContentChild(TemplateRef)\r\n  tplTabContainer!:TemplateRef<any>;\r\n\r\n  @ViewChild('refTab')\r\n  tplTab!:TemplateRef<any>;\r\n  \r\n  @ViewChild('refTab2')\r\n  tplTab2!:TemplateRef<any>;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tab{\r\n    border: 2px solid lightgrey;\r\n    padding: 30px;\r\n}",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>tab works!</p>\r\n\r\n\r\n<ng-template #refTab let-tpl>\r\n    <div class=\"tab\">\r\n     <h3>Tab marcoa {{value}}:</h3>   \r\n    <ng-container [ngTemplateOutlet]=\"tpl\"></ng-container>\r\n   </div>\r\n</ng-template>\r\n\r\n\r\n<ng-template #refTab2 let-tpl>\r\n    <div class=\"tab\">\r\n     <h3>Tab marcob {{value}}:</h3>   \r\n    <ng-container [ngTemplateOutlet]=\"tpl\"></ng-container>\r\n   </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-0500d1dd577430b80fc66a04b4d9313ed3645b0b50462c9a90c96c1afe7bd3b762bc0c11bd1d13b947b7058d45391241c01fec92546a0e93af978c4e82c3c480",
            "file": "projects/my-lib-display/src/lib/material/table/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "sortCurrent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Sort",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickRow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSort",
                    "defaultValue": "new EventEmitter<Sort>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "expandedElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "msort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "tableInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableInfoComponent",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TableInfoComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "expand",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nameCol",
                    "args": [
                        {
                            "name": "inf",
                            "type": "ColInfoComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inf",
                            "type": "ColInfoComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nameColFromInfo",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatSort, Sort } from '@angular/material/sort';\r\nimport { ColInfoComponent } from '../col-info/col-info.component';\r\nimport { TableInfoComponent } from '../table-info/table-info.component';\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss'],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\r\n      state('expanded', style({height: '*'})),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableComponent implements OnInit {\r\n  @Input()\r\n  dataSource: any;\r\n  @Output()\r\n  onClickRow= new EventEmitter();\r\n\r\n  @ContentChild(TableInfoComponent)\r\n  tableInfo!: TableInfoComponent;\r\n  msort!: MatSort;\r\n  @Output()\r\n  onSort = new EventEmitter<Sort>();\r\n  @Input()\r\n  sortCurrent:Sort;\r\n  @ViewChild(MatSort)\r\n  set matSort(matSort: MatSort) {\r\n    this.msort = matSort;\r\n    this.msort.sortChange.subscribe((s) => {\r\n    this.expandedElement=null;\r\n    this.onSort.emit({\r\n     direction:s.direction,\r\n     active: this.tableInfo.colsInfo.find(c=> this.nameCol(c)===s.active)?.name as string\r\n    })\r\n  });    \r\n  }\r\n  expandedElement:any;\r\n  constructor(private detect:ChangeDetectorRef) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  get displayedColumns() {\r\n    return this.tableInfo.colsInfo.map((c) => this.nameCol(c));\r\n  }\r\n\r\n  nameCol(inf: ColInfoComponent) {\r\n    return `${inf.name}-${inf.typeCell}`;\r\n  }\r\n\r\n  nameColFromInfo(name:string):string{\r\n    if(!name) return ''\r\n    return this.nameCol(this.tableInfo.colsInfo.find(c=> c.name===name))\r\n    \r\n  }\r\n  expand(row:any){\r\n    this.onClickRow.emit(row);\r\n    this.expandedElement=row;\r\n  \r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table {\r\n    width: 100%;\r\n  }\r\n\r\n  table {\r\n    width: 100%;\r\n  }\r\n  \r\n  tr.example-detail-row {\r\n    height: 0;\r\n  }\r\n  \r\n  tr.example-element-row:not(.example-expanded-row):hover {\r\n    background: #f5f5f5;\r\n  }\r\n  \r\n  tr.example-element-row:not(.example-expanded-row):active {\r\n    background: #efefef;\r\n  }\r\n  \r\n  .example-element-row td {\r\n    border-bottom-width: 0;\r\n  }\r\n  \r\n  .example-element-detail {\r\n    overflow: hidden;\r\n    display: flex;\r\n  }\r\n  \r\n  .example-element-diagram {\r\n    min-width: 80px;\r\n    border: 2px solid black;\r\n    padding: 8px;\r\n    font-weight: lighter;\r\n    margin: 8px 0;\r\n    height: 104px;\r\n  }\r\n  \r\n  .example-element-symbol {\r\n    font-weight: bold;\r\n    font-size: 40px;\r\n    line-height: normal;\r\n  }\r\n  \r\n  .example-element-description {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .example-element-description-attribution {\r\n    opacity: 0.5;\r\n  }\r\n  ",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "matSort": {
                    "name": "matSort",
                    "setSignature": {
                        "name": "matSort",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "matSort",
                                "type": "MatSort",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "matSort",
                                "type": "MatSort",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "displayedColumns": {
                    "name": "displayedColumns",
                    "getSignature": {
                        "name": "displayedColumns",
                        "type": "",
                        "returnType": "",
                        "line": 49
                    }
                }
            },
            "templateData": "<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort  multiTemplateDataRows\r\n[matSortActive]=\"nameColFromInfo(sortCurrent?.active)\"  [matSortDirection]=\"sortCurrent?.direction\" matSortDisableClear>\r\n  <!--- Note that these columns can be defined in any order.\r\n          The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n  <!-- Position Column -->\r\n\r\n  <ng-container *ngFor=\"let colInfo of tableInfo.colsInfo\" [matColumnDef]=\"nameCol(colInfo)\">\r\n    <ng-container *ngIf=\"colInfo.sort; else notsort\"\r\n      ><th mat-header-cell *matHeaderCellDef mat-sort-header>{{ colInfo.header }}</th>\r\n    </ng-container>\r\n\r\n    <ng-template #notsort>\r\n      <th mat-header-cell *matHeaderCellDef>{{ colInfo.header }}</th>\r\n    </ng-template>\r\n    <td mat-cell *matCellDef=\"let element\" [ngSwitch]=\"colInfo.typeCell\">\r\n      <ng-container *ngSwitchCase=\"'tpl'\" [ngTemplateOutlet]=\"colInfo.cellRender\" [ngTemplateOutletContext]=\"{ $implicit: element }\"></ng-container>\r\n      <div *ngSwitchCase=\"'normal'\">{{ element[colInfo.name] }}</div>\r\n      <div *ngSwitchCase=\"'extended'\">Extended:{{ element[colInfo.name] }}</div>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr\r\n    mat-row\r\n    *matRowDef=\"let row; columns: displayedColumns\"\r\n    class=\"example-element-row\"\r\n    [class.example-expanded-row]=\"expandedElement === row\"\r\n    (click)=\"expand(row)\"\r\n  ></tr>\r\n  <ng-container *ngIf=\"tableInfo.rowDetailTpl\">\r\n    <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\r\n    <ng-container matColumnDef=\"expandedDetail\">\r\n      <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"tableInfo.colsInfo.length\">\r\n        <!-- <div class=\"example-element-detail\" [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\"> -->\r\n          <div class=\"example-element-detail\" *ngIf=\"element === expandedElement\">\r\n          <ng-container [ngTemplateOutlet]=\"tableInfo.rowDetailTpl\" [ngTemplateOutletContext]=\"{ $implicit: element }\"></ng-container>\r\n        </div>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr>\r\n  </ng-container>\r\n</table>\r\n"
        },
        {
            "name": "TableInfoComponent",
            "id": "component-TableInfoComponent-97acc7386cfcbb749b834c75e531896f3778acb7bca4e3243c463418325338ddbed077cee22a9cffdddb0459fe3e154927fab697a9dfd4ec9df8c70cd61b787e",
            "file": "projects/my-lib-display/src/lib/material/table/table-info/table-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "table-info",
            "styleUrls": [
                "./table-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colsInfoComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ColInfoComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ColInfoComponent"
                        }
                    ]
                },
                {
                    "name": "rowDetailTpl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "RowDetailDirective, {read: TemplateRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, ContentChildren, OnInit, QueryList, TemplateRef } from '@angular/core';\r\nimport { ColInfoComponent } from '../col-info/col-info.component';\r\nimport { RowDetailDirective } from './row-detail.directive';\r\n\r\n@Component({\r\n  selector: 'table-info',\r\n  templateUrl: './table-info.component.html',\r\n  styleUrls: ['./table-info.component.scss']\r\n})\r\nexport class TableInfoComponent implements OnInit {\r\n\r\n  @ContentChildren(ColInfoComponent)\r\n  colsInfoComp!:QueryList<ColInfoComponent> ; \r\n  @ContentChild(RowDetailDirective,{read: TemplateRef})\r\n  rowDetailTpl!:TemplateRef<any>; \r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  get colsInfo(){\r\n    return this.colsInfoComp.toArray();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "colsInfo": {
                    "name": "colsInfo",
                    "getSignature": {
                        "name": "colsInfo",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                }
            },
            "templateData": "<p>table-info works!</p>\r\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-b443d7f86ca9242c18f1af66124aef271805b1cf5576012d0e9bb0556b31e8bbe6592e99ce0abe3d6f2b726b8380c3e7971dec70247479129ef09499a3300858",
            "file": "projects/my-lib-display/src/lib/tabs/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabComponent",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tabsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, ChangeDetectorRef, Component, ContentChildren, OnInit, QueryList } from '@angular/core';\r\nimport { setDelay } from '../../fields/utils';\r\nimport { TabComponent } from '../tab/tab.component';\r\n\r\n@Component({\r\n  selector: 'app-tabs',\r\n  templateUrl: './tabs.component.html',\r\n  styleUrls: ['./tabs.component.scss']\r\n})\r\nexport class TabsComponent implements OnInit,AfterContentInit {\r\n   \r\n  @ContentChildren(TabComponent)\r\n  tabsList!:QueryList<TabComponent>;\r\n\r\n  tabSelected!:TabComponent;\r\n\r\n  constructor(private detect:ChangeDetectorRef) { }\r\n  ngAfterContentInit(): void {\r\n \r\n  setDelay (()=>this.selectTab(this.tabs[0].name))\r\n//  this.detect.detectChanges();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n\r\n get tabs(){\r\n   return this.tabsList?.toArray()\r\n }\r\n\r\nselectTab(name:string){\r\n  this.tabSelected= this.tabs.find(t=>t.name===name) as TabComponent;\r\n}\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "detect",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "accessors": {
                "tabs": {
                    "name": "tabs",
                    "getSignature": {
                        "name": "tabs",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "templateData": "<p>tabs works!</p>\r\n<ul>\r\n    <li *ngFor=\"let tab of tabs\" (click)=\"selectTab(tab.name)\">\r\n       {{tab.name}} \r\n    </li>\r\n</ul>\r\n\r\n<div *ngIf=\"tabSelected\">\r\n    <ng-container [ngTemplateOutlet]=\"tabSelected.tplTab\" [ngTemplateOutletContext]=\"{$implicit: tabSelected.tplTabContainer}\"></ng-container>\r\n    <ng-container [ngTemplateOutlet]=\"tabSelected.tplTab2\" [ngTemplateOutletContext]=\"{$implicit: tabSelected.tplTabContainer}\"></ng-container>\r\n\r\n</div>"
        },
        {
            "name": "TextFieldComponent",
            "id": "component-TextFieldComponent-8af3dc3de2d7b0a8646222021bc49554879642bf9dc585c87a2dd1fa55dba3cb1082872f1a85b5672354a6a5c3d211290e230cb4fe9cf950b4fda5661f4d4242",
            "file": "projects/my-lib-display/src/lib/fields/components/text-field/text-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: FormField, useExisting: TextFieldComponent }",
                    "type": "component"
                }
            ],
            "selector": "app-text-field:not([MatField])",
            "styleUrls": [
                "./text-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormField } from '../../form-field.directive';\r\n\r\n@Component({\r\n  //selector: 'app-text-field:not([MatField]):not([formg])', // for more exceptions \r\n  selector: 'app-text-field:not([MatField])',\r\n  templateUrl: './text-field.component.html',\r\n  styleUrls: ['./text-field.component.scss'],\r\n  providers:[{provide:FormField, useExisting: TextFieldComponent}],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TextFieldComponent  extends FormField implements OnInit {\r\n\r\n // constructor() {super() }\r\n\r\n  override ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./text-field.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "FormField",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n  <app-layout-field [parentFormGroup]=\"parentFormGroup\" [labelTop]=\"labelTop\">\r\n    <label>{{ label }}</label>\r\n    <input type=\"text\" [formControlName]=\"name\" placeholder=\"'Insert ...'\"  />\r\n  </app-layout-field>\r\n</ng-container>\r\n"
        },
        {
            "name": "TextMatFieldComponent",
            "id": "component-TextMatFieldComponent-fc4e4536247dab718f94894cbd1be3feb74e355bbfe45b05cd4108b168d8b9d48174919496bfe289cf5bc0314efba74ac90d1080eea91d4ee6bf2fd93345b653",
            "file": "projects/my-lib-display/src/lib/material/material-fields/components/text-mat-field/text-mat-field.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: FormField, useExisting: TextMatFieldComponent }",
                    "type": "component"
                }
            ],
            "selector": "app-text-field[MatField]",
            "styleUrls": [
                "./text-mat-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-mat-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "labelTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ValidatorFn | ValidatorFn[] | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FormField"
                    }
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FormField"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormField } from '../../../../fields/form-field.directive';\r\n\r\n@Component({\r\n  //selector: 'app-text-field[MatField][formg]', //for  more ibludes\r\n  selector: 'app-text-field[MatField]',\r\n  templateUrl: './text-mat-field.component.html',\r\n  styleUrls: ['./text-mat-field.component.scss'],\r\n  // take care wirh import , it musb realtive import base class\r\n  providers:[{provide:FormField, useExisting: TextMatFieldComponent}],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n  })\r\nexport class TextMatFieldComponent extends FormField  implements OnInit {\r\n\r\n  \r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./text-mat-field.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "FormField",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\" *ngIf=\"parentFormGroup\">\r\n  <app-material-layout-field >\r\n    <label>{{ label }}</label>\r\n    <input matInput [formControl]=\"control\" #con />\r\n   \r\n  </app-material-layout-field>\r\n  \r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "UsersComponent",
            "id": "component-UsersComponent-b063f165248fce27b91ecc43e2dbd3175edd2467c91107c60797ffa91e4caa6c14f3b733da727a64b1cf36e2befa1c4ba5671415c38bbea663847b6a8cf889cb",
            "file": "src/app/users/components/users/users.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-users",
            "styleUrls": [
                "./users.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./users.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./users.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>users works***************!</p>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-0a53e0f8d31ecf7fd2d7e7ed7aec95133b026f89b3cd9c45f5c7e232c0ecbadf297a5540fc4c74c489756ac96cd2b40756aabb5e5cd57f030366b2e8ada85e25",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { ErrorHandler, NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { MyLibDisplayModule } from 'my-lib-display';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { reducers, metaReducers } from './store/reducers';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { environment } from 'src/environments/environment';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { AppEffects } from './store/effects/app.effects';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport * as fromError from './store/reducers/error.reducer';\r\nimport { ErrorEffects } from './store/effects/error.effects';\r\nimport { GlobalErrorHandler } from './services/errorHandler';\nimport { PageErrorComponent } from './page-error/page-error.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    PageErrorComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    MyLibDisplayModule,\r\n    HttpClientModule,\r\n    StoreModule.forRoot(reducers, { metaReducers }),\r\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\r\n    EffectsModule.forRoot([AppEffects,ErrorEffects]),\r\n    StoreModule.forFeature(fromError.errorFeatureKey, fromError.reducer),    \r\n    \r\n  ],\r\n  providers: [{provide:ErrorHandler, useClass:GlobalErrorHandler}],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "PageErrorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "!environment"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "MyLibDisplayModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f02cbb197d63f35a857767ec8ff3a8dba178fe61067824029e48cb5c121b97b2f526dd49f5957e0c620db5c15c5a77beb1acc173f94494e28aaa36757ae53637",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageErrorComponent } from './page-error/page-error.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'demo', loadChildren: () => \"import('./demo-lib/demo-lib.module').then(m => m.DemoLibModule)\"},\r\n  { path: 'posts', loadChildren: () => \"import('./posts/posts.module').then(m => m.PostsModule)\"},\r\n  { path: 'users', loadChildren: () => \"import('./users/users.module').then(m => m.UsersModule)\"},\r\n  { path: 'error', component: PageErrorComponent}\r\n\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-c33c70f05e9898a228b4853c8ebd3da8f4a44dd883f4dc851f6e2e087c53dc8010d081ec5e54c6886f757147b5bc720bdacf0d7ec6152534c305454bb9baf232",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport { ButtonComponent } from './button/button.component';\n\nexport {ButtonComponent};\n@NgModule({\n  declarations: [\n    ButtonComponent\n  ],\n  imports: [\n    CommonModule,\n    MatButtonModule\n  ],\n  exports:[ButtonComponent]\n})\nexport class ButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComplexFieldsModule",
            "id": "module-ComplexFieldsModule-39d839e1ee2cc54a6944b9cbd9667da474ecdc35a83025779d9d445b47510793e02e111666e4ebbc9c0ad2a7b88177f0c8265e3379def18d31e105cea9f817e2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/complex-fields/complex-fields.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Complex2FieldComponent } from './complex2-field/complex2-field.component';\r\nimport { ComplexFieldComponent } from './complex-field/complex-field.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FieldsModule } from '../fields/fields.module';\r\nexport {Complex2FieldComponent,ComplexFieldComponent};\r\n\r\n\r\n@NgModule({\r\n  declarations: [Complex2FieldComponent,ComplexFieldComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FieldsModule\r\n  ],\r\n  exports: [Complex2FieldComponent,ComplexFieldComponent],\r\n})\r\nexport class ComplexFieldsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Complex2FieldComponent"
                        },
                        {
                            "name": "ComplexFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FieldsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Complex2FieldComponent"
                        },
                        {
                            "name": "ComplexFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemoLibModule",
            "id": "module-DemoLibModule-0c7af891ef5c521d299dcb974b65c8073cca5a12b6cecaaec20ce8cc78faef6a62a271dc039d66ccb488bda2b37039c079c5563ad2c280c178e014dee33e41e6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/demo-lib/demo-lib.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ComplexFieldsModule, FieldsModule, FormModule, MaterialFieldsModule, TableModule, TabsModule } from 'my-lib-display';\r\nimport { AppComponentDemo } from './app.component';\r\nimport { DemoLibRoutingModule } from './demo-lib-routing.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [AppComponentDemo],\r\n  imports: [\r\n    CommonModule,\r\n    DemoLibRoutingModule,\r\n    FormModule,\r\n    FieldsModule,\r\n     TableModule,\r\n     TabsModule,\r\n     MaterialFieldsModule,\r\n     ComplexFieldsModule\r\n   // BrowserAnimationsModule\r\n  ]\r\n})\r\nexport class DemoLibModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponentDemo"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ComplexFieldsModule"
                        },
                        {
                            "name": "DemoLibRoutingModule"
                        },
                        {
                            "name": "FieldsModule"
                        },
                        {
                            "name": "FormModule"
                        },
                        {
                            "name": "MaterialFieldsModule"
                        },
                        {
                            "name": "TableModule"
                        },
                        {
                            "name": "TabsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemoLibRoutingModule",
            "id": "module-DemoLibRoutingModule-ea67d3afac6d0447c356e606dda8c97ac854a39e579653d835515fc245541fa52962560551c35b58aeda6fd8f9305546dd0bad061fddb6c69ed8794273ca707d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/demo-lib/demo-lib-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AppComponentDemo } from './app.component';\r\n\r\nconst routes: Routes = [\r\n  {path:'',component: AppComponentDemo}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DemoLibRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogModule",
            "id": "module-DialogModule-98e36b01012e5cec3e179d27190f228606140b8ad0b87768ca64952372dba0953fd9b850d86468803b87d25e8886f6a9283fcc102b5828b866838c2a7a325cf3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/dialog/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { DialogService } from './dialog.service';\nimport { AbstractDialogComponent } from './abstract-dialog/abstract-dialog.component';\n\nexport {DialogService, AbstractDialogComponent};\n\n@NgModule({\n  declarations: [\n    DialogComponent\n  ],\n  imports: [\n    CommonModule,\n    MatDialogModule,\n    MatIconModule\n  ],\n  providers:[DialogService]\n})\nexport class DialogModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FieldsModule",
            "id": "module-FieldsModule-00b3a04db7ae27aaf8b7f2cfa8765b4945f2c7eb12e48fe1e728bb3a2b2f14e4d75b3196b4dd429adf0a611e94404b09ad697748e052f34a31235623064ddf6b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/fields/fields.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { EmailFieldComponent } from './components/email-field/email-field.component';\r\nimport { GroupFieldComponent } from './components/group-field/group-field.component';\r\nimport { LayoutFieldComponent } from './components/layout-field/layout-field.component';\r\nimport { NumberFieldComponent } from './components/number-field/number-field.component';\r\nimport { Item, SelectFieldComponent } from './components/select-field/select-field.component';\r\nimport { TextFieldComponent } from './components/text-field/text-field.component';\r\n\r\n\r\nexport {TextFieldComponent,\r\n  GroupFieldComponent,\r\n  SelectFieldComponent,Item,\r\n  EmailFieldComponent,\r\n  NumberFieldComponent,\r\nLayoutFieldComponent};\r\n\r\n@NgModule({\r\n  declarations: [ \r\n    TextFieldComponent,\r\n    GroupFieldComponent,\r\n    LayoutFieldComponent,\r\n    SelectFieldComponent,\r\n    EmailFieldComponent,\r\n    NumberFieldComponent,\r\n  ],\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  exports: [\r\n    TextFieldComponent,\r\n    GroupFieldComponent,\r\n    SelectFieldComponent,\r\n    EmailFieldComponent,\r\n    NumberFieldComponent,\r\n    LayoutFieldComponent\r\n  ],\r\n})\r\nexport class FieldsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EmailFieldComponent"
                        },
                        {
                            "name": "GroupFieldComponent"
                        },
                        {
                            "name": "LayoutFieldComponent"
                        },
                        {
                            "name": "NumberFieldComponent"
                        },
                        {
                            "name": "SelectFieldComponent"
                        },
                        {
                            "name": "TextFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EmailFieldComponent"
                        },
                        {
                            "name": "GroupFieldComponent"
                        },
                        {
                            "name": "LayoutFieldComponent"
                        },
                        {
                            "name": "NumberFieldComponent"
                        },
                        {
                            "name": "SelectFieldComponent"
                        },
                        {
                            "name": "TextFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormCommentModule",
            "id": "module-FormCommentModule-4374518ecc7e830dcfecdc007fead951aa7ceee0873d187a1f4b59634a7422ce7d223752a656aa261546d33863162bb2e654fff108af0903ac16cf627fa5037b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/posts/components/form-comment/form.comment.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { ButtonModule, DialogModule, FormModule, MaterialFieldsModule } from \"my-lib-display\";\r\nimport { FormCommentComponent } from \"./form-comment.component\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n      FormCommentComponent\r\n    ],\r\n    imports: [\r\n      CommonModule,\r\n      FormModule,\r\n      MaterialFieldsModule,      \r\n      ButtonModule\r\n    ],\r\n    exports:[\r\n        FormCommentComponent\r\n    ]\r\n  })\r\n  export class FormCommentModule { }\r\n  ",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormCommentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "FormModule"
                        },
                        {
                            "name": "MaterialFieldsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormCommentComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormModule",
            "id": "module-FormModule-bd280bad8565967e2730209548a8a594af91aebc3e2d9db59e0eddbb7799bcf8530d7bb12714e394bb13fd283ade71a21c926b4c4886f17d6db066208e296ce4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/form/form.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonModule } from '../button/button.module';\r\nimport { FormComponent } from './components/form.component';\r\nimport { FormgDirective } from './components/formg.directive';\r\n\r\n\r\nexport { FormComponent };\r\nexport { FormgDirective };\r\n@NgModule({\r\n  declarations: [\r\n    FormComponent, FormgDirective,\r\n\r\n  ],\r\n  imports: [CommonModule, ReactiveFormsModule, ButtonModule],\r\n  exports: [\r\n    ReactiveFormsModule,\r\n    FormComponent,\r\n    FormgDirective,\r\n  ],\r\n})\r\nexport class FormModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "FormgDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "FormgDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialFieldsModule",
            "id": "module-MaterialFieldsModule-0dad4ad6855ce9b37187a3e862a2482ce14ce47825270b6749eb93fb2373d65207c37e4c1dd60c1373eb73645374dbf53946a6ecae6192b5bda31b4f838a5492",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/material-fields/material-fields.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatErrorsComponent } from './components/mat-errors/mat-errors.component';\r\nimport { MatFieldDirective } from './components/mat-field.directive';\r\nimport { MaterialLayoutFieldComponent } from './components/material-layout-field/material-layout-field.component';\r\nimport { SelectFieldMaterialComponent } from './components/select-field-material/select-field-material.component';\r\nimport { TextMatFieldComponent } from './components/text-mat-field/text-mat-field.component';\r\n\r\nexport { TextMatFieldComponent, MatFieldDirective, SelectFieldMaterialComponent };\r\n\r\n\r\n@NgModule({\r\n  declarations: [TextMatFieldComponent, MatFieldDirective, SelectFieldMaterialComponent, MatErrorsComponent, MaterialLayoutFieldComponent],\r\n  imports: [CommonModule,ReactiveFormsModule, MatFormFieldModule, MatInputModule, MatSelectModule],\r\n  exports: [TextMatFieldComponent, MatFieldDirective, SelectFieldMaterialComponent],\r\n})\r\nexport class MaterialFieldsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MatErrorsComponent"
                        },
                        {
                            "name": "MatFieldDirective"
                        },
                        {
                            "name": "MaterialLayoutFieldComponent"
                        },
                        {
                            "name": "SelectFieldMaterialComponent"
                        },
                        {
                            "name": "TextMatFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MatFieldDirective"
                        },
                        {
                            "name": "SelectFieldMaterialComponent"
                        },
                        {
                            "name": "TextMatFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MyLibDisplayModule",
            "id": "module-MyLibDisplayModule-acb8b30e1a2fa160d8d697881b40b74b2c3c653905ab15a64aa19a5c5f8df06a42b73cdfc4e88f472a72f6b1d6f1d7d67bef8cadb072fc289e6b345abe00783e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/my-lib-display.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MyLibDisplayComponent } from './my-lib-display.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MyLibDisplayComponent\r\n  ],\r\n  imports: [\r\n    BrowserAnimationsModule,\r\n  ],\r\n  exports: [\r\n    MyLibDisplayComponent\r\n    \r\n  ]\r\n})\r\nexport class MyLibDisplayModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MyLibDisplayComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MyLibDisplayComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaginatorModule",
            "id": "module-PaginatorModule-e7bb2c0502da6df74a6706427b7e0914840465bb3c25fbd3a23501664efc01153b5c50805f224865cca595c18f18857a9771a646afa406b4ffe63c387a7664d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/paginator/paginator.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaginatorComponent, TypeEventPagination } from './paginator/paginator.component';\nimport {MatIconModule} from '@angular/material/icon';\nexport {PaginatorComponent,TypeEventPagination};\n\n@NgModule({\n  declarations: [PaginatorComponent],\n  imports: [\n    CommonModule,\n    MatIconModule\n  ],\n  exports:[PaginatorComponent]\n})\nexport class PaginatorModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostsModule",
            "id": "module-PostsModule-b2539b1bb11c4307a36115c6a5c281c5c65acf3cef6044c21cdd73d44d60930e81bb8da71e8264a465208f4130b2e5ffe7ad7f1b9d5e2ae065cdccf67d8d2c70",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/posts/posts.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { ButtonModule, ComplexFieldsModule, DialogModule, FieldsModule, FormModule, MaterialFieldsModule, PaginatorModule, SpinnerModule, TableModule } from 'my-lib-display';\r\nimport { ListPostsComponent } from './pages/list-posts/list-posts.component';\r\nimport { PostsRoutingModule } from './posts-routing.module';\r\nimport { CommentsService } from './services/comments.service';\r\nimport { PostsService } from './services/posts.service';\r\nimport { PostsEffects } from './store/effects/posts.effects';\r\nimport * as fromIndex from './store/reducers';\r\nimport { ListCommentsComponent } from './pages/list-comments/list-comments.component';\r\nimport { CommentsEffects } from './store/effects/comments.effects';\r\nimport { LoadingEffects } from './store/effects/loading.effects';\r\nimport { FormCommentModule } from './components/form-comment/form.comment.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ListPostsComponent,\r\n    ListCommentsComponent,\r\n  //  FormCommentComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PostsRoutingModule,\r\n    FormModule,\r\n    MaterialFieldsModule,\r\n    TableModule,\r\n    SpinnerModule,\r\n    PaginatorModule,\r\n    ButtonModule,\r\n    DialogModule,\r\n    FormCommentModule,\r\n    StoreModule.forFeature(fromIndex.postsStateFeatureKey, fromIndex.reducers),\r\n    EffectsModule.forFeature([PostsEffects,CommentsEffects,LoadingEffects])\r\n  ],\r\n  providers: [\r\n    PostsService,CommentsService\r\n\r\n  ],\r\n})\r\nexport class PostsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CommentsService"
                        },
                        {
                            "name": "PostsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ListCommentsComponent"
                        },
                        {
                            "name": "ListPostsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DialogModule"
                        },
                        {
                            "name": "FormCommentModule"
                        },
                        {
                            "name": "FormModule"
                        },
                        {
                            "name": "MaterialFieldsModule"
                        },
                        {
                            "name": "PaginatorModule"
                        },
                        {
                            "name": "PostsRoutingModule"
                        },
                        {
                            "name": "SpinnerModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostsRoutingModule",
            "id": "module-PostsRoutingModule-febc98a2ddb1282c0633780399d3c6938134057372c16d8bb0b083ddbf769e9c5b46b0b98715ea487792079515902c5b3bc656cf1f85d67e9c5f590afd6b4c55",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/posts/posts-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ListCommentsComponent } from './pages/list-comments/list-comments.component';\nimport { ListPostsComponent } from './pages/list-posts/list-posts.component';\n\nconst routes: Routes = [\n  {path:'',component: ListPostsComponent},\n  {path:'comments',component: ListCommentsComponent},\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PostsRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpinnerModule",
            "id": "module-SpinnerModule-f11815fe583a6f45be4348d77a3aed7c3b9c6033d4a15e07f970f7f91073b5c48e8f4bbd50ab24c6e8493a7ac43ea4a535e0f7204dd14057c99965fdaff00250",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/spinner/spinner.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpinnerComponent } from './spinner/spinner.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { SpinnerLoadingDirective } from './spinner-loading.directive'\n\nexport {SpinnerComponent,SpinnerLoadingDirective};\n\n@NgModule({\n  declarations: [\n    SpinnerComponent,\n    SpinnerLoadingDirective\n  ],\n  imports: [\n    CommonModule,\n    MatProgressSpinnerModule\n  ],\n  exports:[\n    SpinnerComponent,\n    SpinnerLoadingDirective\n  ]\n})\nexport class SpinnerModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "SpinnerLoadingDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "SpinnerLoadingDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "id": "module-TableModule-339f6660804eb16d9b591ceefdbdfef69902d03ac57fe70d01d6b4c272cd52eec81bf238009439a89744a83b3934a5bb9544e99ef829fccf85364c67d5acd4e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/material/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport { TableComponent } from './table/table.component';\r\nimport { TableInfoComponent } from './table-info/table-info.component';\r\nimport { ColInfoComponent } from './col-info/col-info.component';\r\nimport { CellRenderDirective } from './col-info/cell-render.directive';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { RowDetailDirective } from './table-info/row-detail.directive';\r\n\r\n\r\nexport {TableComponent,TableInfoComponent,\r\n  ColInfoComponent,CellRenderDirective,RowDetailDirective};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TableComponent,\r\n    TableInfoComponent,\r\n    ColInfoComponent,\r\n    CellRenderDirective,\r\n    RowDetailDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatSortModule,\r\n    MatTableModule\r\n  ],\r\n  exports:[TableComponent,TableInfoComponent,\r\n    ColInfoComponent,CellRenderDirective,RowDetailDirective]\r\n})\r\nexport class TableModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CellRenderDirective"
                        },
                        {
                            "name": "ColInfoComponent"
                        },
                        {
                            "name": "RowDetailDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableInfoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CellRenderDirective"
                        },
                        {
                            "name": "ColInfoComponent"
                        },
                        {
                            "name": "RowDetailDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableInfoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsModule",
            "id": "module-TabsModule-f8a5563ad11a531e17a6ce8c81d70222a7966f534a6fbff7fb0eebac2866028d7d9e75592423e9d8b9cb4149db87ff486f2e1e2eb19be19d9700c5bf6d03c537",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/my-lib-display/src/lib/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TabComponent } from './tab/tab.component';\r\nimport { TabsComponent } from './tabs/tabs.component';\r\n\r\nexport { TabComponent,\r\n  TabsComponent};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TabComponent,\r\n    TabsComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports:[\r\n    TabComponent,\r\n    TabsComponent\r\n  ]\r\n})\r\nexport class TabsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersModule",
            "id": "module-UsersModule-14613ca018a1429f1039e410235b96a18a228959696b79ac47d44dea53bdca0d30a64ebd70e4007e9f9fbda8e951a9f8fa27010e870980187e56c34fae40831d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/users/users.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UsersRoutingModule } from './users-routing.module';\r\nimport { UsersComponent } from './components/users/users.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UsersComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    UsersRoutingModule\r\n  ]\r\n})\r\nexport class UsersModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UsersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UsersRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersRoutingModule",
            "id": "module-UsersRoutingModule-3308a527682fb23478c0303079bd5dbe3fc2199cbd896d9edca2b0e66e2b5b6e07b54c190825da8c1a6f72dce93f5df8181c46d329ad3234c35b52c13686a0f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/users/users-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UsersComponent } from './components/users/users.component';\r\n\r\nconst routes: Routes = [\r\n  {path:'',component:UsersComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/my-lib-display/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ELEMENT_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/demo-lib/app.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PeriodicElement[]",
                "defaultValue": "[\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n]"
            },
            {
                "name": "Enabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/main/app-form-comment.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Enabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  urlHostApi: 'http://localhost:5000',\r\n  urlHostCalendarApi: 'http://localhost:8000',\r\n  pathMonthDays:'month/formatbydays',\r\n  pathIssues:'issue',\r\n  pathWork:'month/work',\r\n  pathWorkTask:'month/work/task',\r\n  pathHollidays:'hollidays',\r\n  pathContents: '/confluence/content/search',\r\n  pathContent: '/confluence/content',\r\n  urlApiLogin: '/login',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "errorFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/error.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'error'"
            },
            {
                "name": "errorGeneral",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Error] Error general',\n  ({error}:ErrorAction)=> ({error,general:true}) \n)"
            },
            {
                "name": "errorHandlerAngular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Error] Error Handler Angular',\n  ({error}:ErrorAction)=> ({error}) \n)"
            },
            {
                "name": "errorHttp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Error] Error Http',\n  ({error}:ErrorAction)=> ({error}) \n)"
            },
            {
                "name": "extraComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Comments] Extra Comments',\n  props<{data : string}>()\n)"
            },
            {
                "name": "filterComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Comments] Filter Comments',\n  props<{filter:FilterComment}>()\n)"
            },
            {
                "name": "filterPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Posts] Filter Posts',\r\n  props<{filter:FilterPost}>()\r\n)"
            },
            {
                "name": "FormFieldsAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "hideLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/loading.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Loading] Hide Loading',\n  props<{ actionHide :string, idGroupLoading: string,   idLoading?: string  }>()\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/error.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StateError",
                "defaultValue": "{\n  \n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/loading.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  stack:[]\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/comments.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StateComments",
                "defaultValue": "{\n  extra:{\n    data:'Hola'\n  },\n  data: [],\n  loading:false,\n  filterListInfo: {\n    page: {\n      pageSize: 4,\n      pageIndex: 1\n    }\n  }\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/posts.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StateList",
                "defaultValue": "{\n  data: [],\n  loading: false,\n  filterListInfo: {\n    page: {\n      pageSize: 4,\n      pageIndex: 1\n    }\n  }\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Comments] Load Commentss', \n  (data:LoadInfo<FilterComment>)=>({...data,SHOW_LOADING: 'SHOW_LOADING'})  \n)"
            },
            {
                "name": "loadCommentssFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Comments] Load Commentss Failure',\n  props<{ error: any }>()             \n)"
            },
            {
                "name": "loadCommentssSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Comments] Load Commentss Success',\n  props<LoadInfoSuccces<FilterComment,Comment>>()\n)"
            },
            {
                "name": "loadErrorsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Error] Load Errors Failure',\n  props<{ error: any }>()\n)"
            },
            {
                "name": "loadingFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/loading.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'loading'"
            },
            {
                "name": "loadInitComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Comments] Load Init Comments'\n)"
            },
            {
                "name": "loadInitPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MyAction",
                "defaultValue": "createAction(\r\n  '[Posts] Load Init Posts'\r\n)"
            },
            {
                "name": "loadLoadingsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/loading.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Loading] Load Loadings Failure',\n  props<{ error: any }>()\n)"
            },
            {
                "name": "loadPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Posts] Load Postss', \r\n  (data:LoadInfo<FilterPost>)=>({...data,SHOW_LOADING: 'SHOW_LOADING'})  \r\n)"
            },
            {
                "name": "loadPostssFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Posts] Load Postss Failure',\r\n  props<{ error: any }>()\r\n)"
            },
            {
                "name": "loadPostssSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MyActionExact",
                "defaultValue": "createAction(\r\n  '[Posts] Load Postss Success',\r\n // props<{ data: Post[],link:string,filter:FilterPost,sortInfo:SortInfo,pageRequest:PageRequest }>()\r\n props<LoadInfoSuccces<FilterPost,Post>>()\r\n)"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mapNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/utils/logger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<string, number>",
                "defaultValue": "new Map()"
            },
            {
                "name": "mapNamesLevels",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/utils/logger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<string, Level[]>",
                "defaultValue": "new Map()"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production ? [] : []"
            },
            {
                "name": "paginationComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Comments] Pagination Comments',\n  props<{typeEventPagination :TypeEventPagination}>()\n)"
            },
            {
                "name": "paginationPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Posts] Pagination Posts',\r\n  props<{typeEventPagination :TypeEventPagination}>()\r\n)"
            },
            {
                "name": "PaginatorEnable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "postsFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/comments.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'posts'"
            },
            {
                "name": "postsFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/posts.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'posts'"
            },
            {
                "name": "postsStateFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'postsState'"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "queryBegin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Comments] Query begin',\n  props<{data : string}>()\n)"
            },
            {
                "name": "queryEnd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Comments] Query end',\n  props<{data : string}>()\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/error.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(ErrorActions.errorGeneral, (state, {error}) => ({...state,error })),\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/loading.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(LoadingActions.showLoading, (state, action) => {\n    const inf= state.stack.find(l=> l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading )\n    if(!inf){\n      return  {stack: [...state.stack,{idLoading:action.idLoading, idGroupLoading: action.idGroupLoading, actionSource: action.actionSource} ]}\n    }\n    return {...state};\n  }),\n  on(LoadingActions.hideLoading, (state, action) => {\n      return  {stack: state.stack.filter(l=> !(l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading))}\n     }),\n\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/comments.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducerList(initialState,CommentsActions.loadComments,CommentsActions.loadCommentssSuccess,CommentsActions.loadCommentssFailure,\n  on(CommentsActions.extraComments, (state:any, action) => ({...state,extra:action.data}))  \n  )"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/posts.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducerList(initialState,PostsActions.loadPosts,PostsActions.loadPostssSuccess,PostsActions.loadPostssFailure)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\r\n  loading: fromLoading.reducer,\r\n  error: fromError.reducer\r\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  posts: fromPosts.reducer,\r\n  comments: fromComments.reducer\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/my-lib-display/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectCommentsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/comments.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCommentsStateAll,\r\n  (state)=> state.comments\r\n)"
            },
            {
                "name": "selectCommentsStateAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/comments.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromIndex.AppState>(\r\n  fromIndex.postsStateFeatureKey\r\n)"
            },
            {
                "name": "selectError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/error.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectErrorState,\n  (state)=> state.error )"
            },
            {
                "name": "selectErrorState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/error.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromError.StateError>(\n  fromError.errorFeatureKey\n)"
            },
            {
                "name": "selectLoadingState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/loading.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromLoading.State>(\n  fromLoading.loadingFeatureKey\n)"
            },
            {
                "name": "selectorLoadingComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/comments.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelectorLoading('loadComments')"
            },
            {
                "name": "selectorLoadingPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/posts.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelectorLoading('loadPost')"
            },
            {
                "name": "selectorLoadingQuery",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/comments.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelectorLoadingGroup('querytest')"
            },
            {
                "name": "selectorsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/comments.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelectorsList(selectCommentsState)"
            },
            {
                "name": "selectorsList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/posts.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelectorsList(selectPostsState)"
            },
            {
                "name": "selectPostsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/posts.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectPostsStateAll,\n  (state)=> state.posts\n)"
            },
            {
                "name": "selectPostsStateAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/selectors/posts.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromIndex.AppState>(\n  fromIndex.postsStateFeatureKey\n)"
            },
            {
                "name": "showLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/loading.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Loading] Show Loading',\n  props<{ actionSource: string, idGroupLoading: string,   idLoading?: string  }>()\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "sortComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/comments.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Comments] Sort Comments',\n  props<{sortInfo: SortInfo}>()\n)"
            },
            {
                "name": "sortPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Posts] Sort Posts',\r\n  props<{sortInfo: SortInfo}>()\r\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  component: Button,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  component: Header,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  component: Page,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/main/app-form-comment.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormCommentComponent>",
                "defaultValue": "(args: FormCommentComponent) => ({\r\n  component:FormCommentComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n  component: ButtonComponent,\r\n  props: {\r\n    label: 'Button Library',   \r\n    ...args\r\n  },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormFieldsComponent>",
                "defaultValue": "(args: FormFieldsComponent) => ({\r\n  component: FormFieldsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/library/lib-Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PaginatorComponent>",
                "defaultValue": "(args: PaginatorComponent) => ({\r\n  component: PaginatorComponent,\r\n  props: args,\r\n})"
            }
        ],
        "functions": [
            {
                "name": "addError",
                "file": "src/app/demo-lib/validatosapp.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "err",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errors_",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "err",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errors_",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "clearError",
                "file": "src/app/demo-lib/validatosapp.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "err",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errors_",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "err",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errors_",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createData",
                "file": "src/app/demo-lib/app.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "DataSelect[]"
            },
            {
                "name": "createData",
                "file": "projects/my-lib-display/src/lib/fields/components/data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "DataSelect[]"
            },
            {
                "name": "createReducerList",
                "file": "src/app/services/base/reducer.list.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "initS",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadAction",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadSuccess",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadFailure",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ons",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "initS",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadAction",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadSuccess",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadFailure",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ons",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createSelectorLoading",
                "file": "src/app/store/selectors/loading.selectors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "idGroupLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "idLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "idGroupLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "idLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createSelectorLoadingGroup",
                "file": "src/app/store/selectors/loading.selectors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "idGroupLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "idGroupLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createSelectorsList",
                "file": "src/app/services/base/selectors.list.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "selectListState",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "selectListState",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dev",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "mes",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "mes",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "filterLoadingId",
                "file": "src/app/store/selectors/loading.selectors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "obsLoading",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "idLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<boolean>",
                "jsdoctags": [
                    {
                        "name": "obsLoading",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "idLoading",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getActions",
                "file": "src/app/services/base/abstractNgRx.loading.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getActions",
                "file": "src/app/posts/store/effects/loading.effects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFilterListInfo",
                "file": "src/app/services/base/reducer.list.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "action",
                        "type": "LoadInfoSuccces",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "FilterListInfo",
                "jsdoctags": [
                    {
                        "name": "action",
                        "type": "LoadInfoSuccces",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLoadingInfo",
                "file": "src/app/services/base/abstractNgRx.loading.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionLoadingInfo",
                "jsdoctags": [
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLoadingInfo",
                "file": "src/app/posts/store/effects/loading.effects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionLoadingInfo",
                "jsdoctags": [
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionsLoading",
                        "type": "ActionsLoading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLogger",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "IConsole",
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNameLevels",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Level[]",
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNameLog",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getUrlLink",
                "file": "src/app/services/base/reducer.list.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "link",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 866,
                            "end": 870,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "link"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 860,
                            "end": 865,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Helper to get partial url</p>\n"
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "indicate",
                "file": "src/app/services/utils/indicate.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "indicator",
                        "type": "Subject",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "indicator",
                        "type": "Subject",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "NameLog",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "nameLog",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "nameLog",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "prepare",
                "file": "src/app/services/utils/indicate.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "callback",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "callback",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "refreshNamesLevels",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "rxDelay",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "time",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<any>",
                "jsdoctags": [
                    {
                        "name": "time",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxend",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "this",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "enable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "this",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "enable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxErrorRest",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "enable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "returnType": "Observable<any>",
                "jsdoctags": [
                    {
                        "name": "enable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxFilterNE",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "enable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "returnType": "Observable<any>",
                "jsdoctags": [
                    {
                        "name": "enable",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxinfo",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "this",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "this",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxlog",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "this",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "this",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rxwarn",
                "file": "src/app/services/utils/opersrx.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "this",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "this",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setDelay",
                "file": "projects/my-lib-display/src/lib/fields/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "fn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setNamesLevels",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "names",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "names",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortList",
                "file": "src/app/demo-lib/app.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "asc",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "updateLevelLog",
                "file": "src/app/services/utils/logger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [
            {
                "name": "ActionLoadingInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/services/base/abstractNgRx.loading.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ActionLoadingInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/posts/store/effects/loading.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "ActionsLoading",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type[]",
                "file": "src/app/services/base/abstractNgRx.loading.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "ActionsLoading",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type[]",
                "file": "src/app/posts/store/effects/loading.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "ErrorAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/store/actions/error.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IResponseComments",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/posts/models/comment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IResponseData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/services/models/filter.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "IResponsePosts",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/posts/models/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Item",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/my-lib-display/src/lib/fields/components/select-field/select-field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "LoadingInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/store/reducers/loading.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "MyActinFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FunctionWithParametersType< | >",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "MyAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ActionCreator<any | TypedAction<any>>",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "MyActionExact",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ActionCreator<any | >",
                "file": "src/app/posts/store/actions/posts.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "NameLevels",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/services/utils/logger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "TypeCell",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"normal\" | \"extended\" | \"tpl\"",
                "file": "projects/my-lib-display/src/lib/material/table/col-info/col-info.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "TypeEventPagination",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"first\" | \"last\" | \"prev\" | \"next\"",
                "file": "projects/my-lib-display/src/lib/material/paginator/paginator/paginator.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [
            {
                "name": "NamesLog",
                "childs": [
                    {
                        "name": "UserStoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "logged"
                    },
                    {
                        "name": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PostsService"
                    },
                    {
                        "name": "CommentsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CommentsService"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/utils/names-classes.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/my-lib-display/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/my-lib-display/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/my-lib-display/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/library/lib-Button.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Enabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n  component: ButtonComponent,\r\n  props: {\r\n    label: 'Button Library',   \r\n    ...args\r\n  },\r\n})"
                }
            ],
            "src/app/demo-lib/app.component.ts": [
                {
                    "name": "ELEMENT_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/demo-lib/app.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PeriodicElement[]",
                    "defaultValue": "[\r\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\r\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\r\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\r\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\r\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\r\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\r\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\r\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\r\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\r\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\r\n]"
                }
            ],
            "src/stories/main/app-form-comment.stories.ts": [
                {
                    "name": "Enabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/main/app-form-comment.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/main/app-form-comment.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormCommentComponent>",
                    "defaultValue": "(args: FormCommentComponent) => ({\r\n  component:FormCommentComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  urlHostApi: 'http://localhost:5000',\r\n  urlHostCalendarApi: 'http://localhost:8000',\r\n  pathMonthDays:'month/formatbydays',\r\n  pathIssues:'issue',\r\n  pathWork:'month/work',\r\n  pathWorkTask:'month/work/task',\r\n  pathHollidays:'hollidays',\r\n  pathContents: '/confluence/content/search',\r\n  pathContent: '/confluence/content',\r\n  urlApiLogin: '/login',\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/app/store/reducers/error.reducer.ts": [
                {
                    "name": "errorFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/error.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'error'"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/error.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateError",
                    "defaultValue": "{\n  \n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/error.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(ErrorActions.errorGeneral, (state, {error}) => ({...state,error })),\n)"
                }
            ],
            "src/app/store/actions/error.actions.ts": [
                {
                    "name": "errorGeneral",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Error] Error general',\n  ({error}:ErrorAction)=> ({error,general:true}) \n)"
                },
                {
                    "name": "errorHandlerAngular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Error] Error Handler Angular',\n  ({error}:ErrorAction)=> ({error}) \n)"
                },
                {
                    "name": "errorHttp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Error] Error Http',\n  ({error}:ErrorAction)=> ({error}) \n)"
                },
                {
                    "name": "loadErrorsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Error] Load Errors Failure',\n  props<{ error: any }>()\n)"
                }
            ],
            "src/app/posts/store/actions/comments.actions.ts": [
                {
                    "name": "extraComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Comments] Extra Comments',\n  props<{data : string}>()\n)"
                },
                {
                    "name": "filterComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Comments] Filter Comments',\n  props<{filter:FilterComment}>()\n)"
                },
                {
                    "name": "loadComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Comments] Load Commentss', \n  (data:LoadInfo<FilterComment>)=>({...data,SHOW_LOADING: 'SHOW_LOADING'})  \n)"
                },
                {
                    "name": "loadCommentssFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Comments] Load Commentss Failure',\n  props<{ error: any }>()             \n)"
                },
                {
                    "name": "loadCommentssSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Comments] Load Commentss Success',\n  props<LoadInfoSuccces<FilterComment,Comment>>()\n)"
                },
                {
                    "name": "loadInitComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Comments] Load Init Comments'\n)"
                },
                {
                    "name": "paginationComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Comments] Pagination Comments',\n  props<{typeEventPagination :TypeEventPagination}>()\n)"
                },
                {
                    "name": "queryBegin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Comments] Query begin',\n  props<{data : string}>()\n)"
                },
                {
                    "name": "queryEnd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Comments] Query end',\n  props<{data : string}>()\n)"
                },
                {
                    "name": "sortComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/comments.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Comments] Sort Comments',\n  props<{sortInfo: SortInfo}>()\n)"
                }
            ],
            "src/app/posts/store/actions/posts.actions.ts": [
                {
                    "name": "filterPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Posts] Filter Posts',\r\n  props<{filter:FilterPost}>()\r\n)"
                },
                {
                    "name": "loadInitPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyAction",
                    "defaultValue": "createAction(\r\n  '[Posts] Load Init Posts'\r\n)"
                },
                {
                    "name": "loadPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Posts] Load Postss', \r\n  (data:LoadInfo<FilterPost>)=>({...data,SHOW_LOADING: 'SHOW_LOADING'})  \r\n)"
                },
                {
                    "name": "loadPostssFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Posts] Load Postss Failure',\r\n  props<{ error: any }>()\r\n)"
                },
                {
                    "name": "loadPostssSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyActionExact",
                    "defaultValue": "createAction(\r\n  '[Posts] Load Postss Success',\r\n // props<{ data: Post[],link:string,filter:FilterPost,sortInfo:SortInfo,pageRequest:PageRequest }>()\r\n props<LoadInfoSuccces<FilterPost,Post>>()\r\n)"
                },
                {
                    "name": "paginationPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Posts] Pagination Posts',\r\n  props<{typeEventPagination :TypeEventPagination}>()\r\n)"
                },
                {
                    "name": "sortPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Posts] Sort Posts',\r\n  props<{sortInfo: SortInfo}>()\r\n)"
                }
            ],
            "src/stories/library/lib-Form.stories.ts": [
                {
                    "name": "FormFieldsAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormFieldsComponent>",
                    "defaultValue": "(args: FormFieldsComponent) => ({\r\n  component: FormFieldsComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/actions/loading.actions.ts": [
                {
                    "name": "hideLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/loading.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Loading] Hide Loading',\n  props<{ actionHide :string, idGroupLoading: string,   idLoading?: string  }>()\n)"
                },
                {
                    "name": "loadLoadingsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/loading.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Loading] Load Loadings Failure',\n  props<{ error: any }>()\n)"
                },
                {
                    "name": "showLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/loading.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Loading] Show Loading',\n  props<{ actionSource: string, idGroupLoading: string,   idLoading?: string  }>()\n)"
                }
            ],
            "src/app/store/reducers/loading.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/loading.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  stack:[]\n}"
                },
                {
                    "name": "loadingFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/loading.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'loading'"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/loading.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(LoadingActions.showLoading, (state, action) => {\n    const inf= state.stack.find(l=> l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading )\n    if(!inf){\n      return  {stack: [...state.stack,{idLoading:action.idLoading, idGroupLoading: action.idGroupLoading, actionSource: action.actionSource} ]}\n    }\n    return {...state};\n  }),\n  on(LoadingActions.hideLoading, (state, action) => {\n      return  {stack: state.stack.filter(l=> !(l.idGroupLoading===action.idGroupLoading && action.idLoading===l.idLoading))}\n     }),\n\n)"
                }
            ],
            "src/app/posts/store/reducers/comments.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/comments.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateComments",
                    "defaultValue": "{\n  extra:{\n    data:'Hola'\n  },\n  data: [],\n  loading:false,\n  filterListInfo: {\n    page: {\n      pageSize: 4,\n      pageIndex: 1\n    }\n  }\n}"
                },
                {
                    "name": "postsFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/comments.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'posts'"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/comments.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducerList(initialState,CommentsActions.loadComments,CommentsActions.loadCommentssSuccess,CommentsActions.loadCommentssFailure,\n  on(CommentsActions.extraComments, (state:any, action) => ({...state,extra:action.data}))  \n  )"
                }
            ],
            "src/app/posts/store/reducers/posts.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/posts.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StateList",
                    "defaultValue": "{\n  data: [],\n  loading: false,\n  filterListInfo: {\n    page: {\n      pageSize: 4,\n      pageIndex: 1\n    }\n  }\n}"
                },
                {
                    "name": "postsFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/posts.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'posts'"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/posts.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducerList(initialState,PostsActions.loadPosts,PostsActions.loadPostssSuccess,PostsActions.loadPostssFailure)"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  component: Button,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  component: Header,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  component: Page,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/services/utils/logger.ts": [
                {
                    "name": "mapNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/utils/logger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string, number>",
                    "defaultValue": "new Map()"
                },
                {
                    "name": "mapNamesLevels",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/utils/logger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string, Level[]>",
                    "defaultValue": "new Map()"
                }
            ],
            "src/app/store/reducers/index.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production ? [] : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\r\n  loading: fromLoading.reducer,\r\n  error: fromError.reducer\r\n}"
                }
            ],
            "src/stories/library/lib-Paginator.stories.ts": [
                {
                    "name": "PaginatorEnable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/library/lib-Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PaginatorComponent>",
                    "defaultValue": "(args: PaginatorComponent) => ({\r\n  component: PaginatorComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/posts/store/reducers/index.ts": [
                {
                    "name": "postsStateFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'postsState'"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  posts: fromPosts.reducer,\r\n  comments: fromComments.reducer\r\n}"
                }
            ],
            "src/app/posts/store/selectors/comments.selectors.ts": [
                {
                    "name": "selectCommentsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/comments.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCommentsStateAll,\r\n  (state)=> state.comments\r\n)"
                },
                {
                    "name": "selectCommentsStateAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/comments.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromIndex.AppState>(\r\n  fromIndex.postsStateFeatureKey\r\n)"
                },
                {
                    "name": "selectorLoadingComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/comments.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelectorLoading('loadComments')"
                },
                {
                    "name": "selectorLoadingQuery",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/comments.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelectorLoadingGroup('querytest')"
                },
                {
                    "name": "selectorsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/comments.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelectorsList(selectCommentsState)"
                }
            ],
            "src/app/store/selectors/error.selectors.ts": [
                {
                    "name": "selectError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/error.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectErrorState,\n  (state)=> state.error )"
                },
                {
                    "name": "selectErrorState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/error.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromError.StateError>(\n  fromError.errorFeatureKey\n)"
                }
            ],
            "src/app/store/selectors/loading.selectors.ts": [
                {
                    "name": "selectLoadingState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/loading.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromLoading.State>(\n  fromLoading.loadingFeatureKey\n)"
                }
            ],
            "src/app/posts/store/selectors/posts.selectors.ts": [
                {
                    "name": "selectorLoadingPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/posts.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelectorLoading('loadPost')"
                },
                {
                    "name": "selectorsList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/posts.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelectorsList(selectPostsState)"
                },
                {
                    "name": "selectPostsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/posts.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectPostsStateAll,\n  (state)=> state.posts\n)"
                },
                {
                    "name": "selectPostsStateAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/store/selectors/posts.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromIndex.AppState>(\n  fromIndex.postsStateFeatureKey\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/demo-lib/validatosapp.ts": [
                {
                    "name": "addError",
                    "file": "src/app/demo-lib/validatosapp.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "err",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errors_",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errors_",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearError",
                    "file": "src/app/demo-lib/validatosapp.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "err",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errors_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errors_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/demo-lib/app.component.ts": [
                {
                    "name": "createData",
                    "file": "src/app/demo-lib/app.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "DataSelect[]"
                },
                {
                    "name": "sortList",
                    "file": "src/app/demo-lib/app.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "asc",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "asc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/my-lib-display/src/lib/fields/components/data.ts": [
                {
                    "name": "createData",
                    "file": "projects/my-lib-display/src/lib/fields/components/data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "DataSelect[]"
                }
            ],
            "src/app/services/base/reducer.list.ts": [
                {
                    "name": "createReducerList",
                    "file": "src/app/services/base/reducer.list.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "initS",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadAction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadSuccess",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadFailure",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ons",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "initS",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadAction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadSuccess",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadFailure",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ons",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFilterListInfo",
                    "file": "src/app/services/base/reducer.list.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "action",
                            "type": "LoadInfoSuccces",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "FilterListInfo",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "LoadInfoSuccces",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUrlLink",
                    "file": "src/app/services/base/reducer.list.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 866,
                                "end": 870,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "link"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 860,
                                "end": 865,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Helper to get partial url</p>\n"
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/selectors/loading.selectors.ts": [
                {
                    "name": "createSelectorLoading",
                    "file": "src/app/store/selectors/loading.selectors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "idGroupLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "idLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "idGroupLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSelectorLoadingGroup",
                    "file": "src/app/store/selectors/loading.selectors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "idGroupLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "idGroupLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterLoadingId",
                    "file": "src/app/store/selectors/loading.selectors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "obsLoading",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<boolean>",
                    "jsdoctags": [
                        {
                            "name": "obsLoading",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idLoading",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/base/selectors.list.ts": [
                {
                    "name": "createSelectorsList",
                    "file": "src/app/services/base/selectors.list.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "selectListState",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectListState",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/utils/opersrx.ts": [
                {
                    "name": "dev",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "mes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "mes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxDelay",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<any>",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxend",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "this",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "this",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxErrorRest",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "enable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "returnType": "Observable<any>",
                    "jsdoctags": [
                        {
                            "name": "enable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxFilterNE",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "enable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "returnType": "Observable<any>",
                    "jsdoctags": [
                        {
                            "name": "enable",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxinfo",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "this",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "this",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxlog",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "this",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "this",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rxwarn",
                    "file": "src/app/services/utils/opersrx.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "this",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "this",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/base/abstractNgRx.loading.ts": [
                {
                    "name": "getActions",
                    "file": "src/app/services/base/abstractNgRx.loading.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoadingInfo",
                    "file": "src/app/services/base/abstractNgRx.loading.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionLoadingInfo",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/posts/store/effects/loading.effects.ts": [
                {
                    "name": "getActions",
                    "file": "src/app/posts/store/effects/loading.effects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoadingInfo",
                    "file": "src/app/posts/store/effects/loading.effects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionLoadingInfo",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionsLoading",
                            "type": "ActionsLoading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/services/utils/logger.ts": [
                {
                    "name": "getLogger",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IConsole",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNameLevels",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Level[]",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNameLog",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "NameLog",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "nameLog",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "nameLog",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshNamesLevels",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "setNamesLevels",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "names",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "names",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLevelLog",
                    "file": "src/app/services/utils/logger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/services/utils/indicate.ts": [
                {
                    "name": "indicate",
                    "file": "src/app/services/utils/indicate.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "indicator",
                            "type": "Subject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "indicator",
                            "type": "Subject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepare",
                    "file": "src/app/services/utils/indicate.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "callback",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "callback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/my-lib-display/src/lib/fields/utils.ts": [
                {
                    "name": "setDelay",
                    "file": "projects/my-lib-display/src/lib/fields/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/services/utils/names-classes.ts": [
                {
                    "name": "NamesLog",
                    "childs": [
                        {
                            "name": "UserStoreService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "logged"
                        },
                        {
                            "name": "PostsService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PostsService"
                        },
                        {
                            "name": "CommentsService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CommentsService"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/utils/names-classes.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/services/base/abstractNgRx.loading.ts": [
                {
                    "name": "ActionLoadingInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/services/base/abstractNgRx.loading.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "ActionsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type[]",
                    "file": "src/app/services/base/abstractNgRx.loading.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ],
            "src/app/posts/store/effects/loading.effects.ts": [
                {
                    "name": "ActionLoadingInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/posts/store/effects/loading.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "ActionsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type[]",
                    "file": "src/app/posts/store/effects/loading.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ],
            "src/app/store/actions/error.actions.ts": [
                {
                    "name": "ErrorAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/store/actions/error.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/posts/models/comment.ts": [
                {
                    "name": "IResponseComments",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/posts/models/comment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/services/models/filter.model.ts": [
                {
                    "name": "IResponseData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/services/models/filter.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/posts/models/models.ts": [
                {
                    "name": "IResponsePosts",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/posts/models/models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/my-lib-display/src/lib/fields/components/select-field/select-field.component.ts": [
                {
                    "name": "Item",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/my-lib-display/src/lib/fields/components/select-field/select-field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/store/reducers/loading.reducer.ts": [
                {
                    "name": "LoadingInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/store/reducers/loading.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/app/posts/store/actions/posts.actions.ts": [
                {
                    "name": "MyActinFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FunctionWithParametersType< | >",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "MyAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ActionCreator<any | TypedAction<any>>",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "MyActionExact",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ActionCreator<any | >",
                    "file": "src/app/posts/store/actions/posts.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/services/utils/logger.ts": [
                {
                    "name": "NameLevels",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/services/utils/logger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/my-lib-display/src/lib/material/table/col-info/col-info.component.ts": [
                {
                    "name": "TypeCell",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"normal\" | \"extended\" | \"tpl\"",
                    "file": "projects/my-lib-display/src/lib/material/table/col-info/col-info.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/my-lib-display/src/lib/material/paginator/paginator/paginator.component.ts": [
                {
                    "name": "TypeEventPagination",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"first\" | \"last\" | \"prev\" | \"next\"",
                    "file": "projects/my-lib-display/src/lib/material/paginator/paginator/paginator.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "demo",
                        "loadChildren": "./demo-lib/demo-lib.module#DemoLibModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/demo-lib/demo-lib-routing.module.ts",
                                        "module": "DemoLibRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AppComponentDemo"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DemoLibModule"
                            }
                        ]
                    },
                    {
                        "path": "posts",
                        "loadChildren": "./posts/posts.module#PostsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/posts/posts-routing.module.ts",
                                        "module": "PostsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ListPostsComponent"
                                            },
                                            {
                                                "path": "comments",
                                                "component": "ListCommentsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "PostsModule"
                            }
                        ]
                    },
                    {
                        "path": "users",
                        "loadChildren": "./users/users.module#UsersModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/users/users-routing.module.ts",
                                        "module": "UsersRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "UsersComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UsersModule"
                            }
                        ]
                    },
                    {
                        "path": "error",
                        "component": "PageErrorComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/my-lib-display/src/lib/complex-fields/complex-field/complex-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComplexFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/complex-fields/complex2-field/complex2-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Complex2FieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSelect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/data.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/email-field/email-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmailFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/group-field/group-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/layout-field/layout-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/number-field/number-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/select-field/select-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/components/text-field/text-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/form-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormField",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/fields/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setDelay",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/button/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/dialog/abstract-dialog/abstract-dialog.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AbstractDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/dialog/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/dialog/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/form/components/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/form/components/formg.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormgDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/mat-errors/mat-errors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatErrorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/mat-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MatFieldDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/material-layout-field/material-layout-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MaterialLayoutFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/select-field-material/select-field-material.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectFieldMaterialComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/material-fields/components/text-mat-field/text-mat-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextMatFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/paginator/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/spinner/spinner-loading.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SpinnerLoadingDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/spinner/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/table/col-info/cell-render.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CellRenderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/table/col-info/col-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/table/table-info/row-detail.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RowDetailDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/table/table-info/table-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/material/table/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/my-lib-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyLibDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/my-lib-display.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyLibDisplayService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/tabs/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/lib/tabs/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/my-lib-display/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponentDemo",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSelect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PeriodicElement",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ELEMENT_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/validatosapp.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ValidatorsApp",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/validatosapp.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo-lib/validatosapp.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "clearError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/page-error/page-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/components/form-comment/form-comment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormCommentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/comment.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Comment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/comment.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterComment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterPost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/models/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Post",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/pages/list-comments/list-comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListCommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/pages/list-posts/list-posts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListPostsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/services/comments.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommentsService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/services/posts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostsService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "extraComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCommentssFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCommentssSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadInitComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paginationComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "queryBegin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "queryEnd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/comments.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadInitPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPostssFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPostssSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paginationPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/actions/posts.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/effects/comments.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommentsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/effects/loading.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/effects/loading.effects.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/effects/loading.effects.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getLoadingInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/effects/posts.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/comments.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateComments",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/comments.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/comments.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postsFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/comments.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postsStateFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/posts.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/posts.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postsFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/reducers/posts.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/comments.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCommentsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/comments.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCommentsStateAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/comments.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectorLoadingComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/comments.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectorLoadingQuery",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/comments.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectorsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/posts.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectorLoadingPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/posts.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectorsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/posts.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/store/selectors/posts.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostsStateAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstract.entity.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractEntityService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstract.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AbstractService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstractNgRx.loading.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AbstractLoadingEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstractNgRx.loading.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstractNgRx.loading.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getLoadingInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/abstractNgRx.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AbstractListNgRxService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/reducer.list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/reducer.list.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createReducerList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/reducer.list.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFilterListInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/reducer.list.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getUrlLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/base/selectors.list.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createSelectorsList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/errorHandler.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalErrorHandler",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterListInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectorsList",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadInfoSuccces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageInfo",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageRequest",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/models/filter.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortInfo",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/services/models/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Entity",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/indicate.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "indicate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/indicate.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "prepare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConsoleApp",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConsole",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getLogger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getNameLevels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getNameLog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "NameLog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "refreshNamesLevels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setNamesLevels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "updateLevelLog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/logger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapNamesLevels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dev",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxDelay",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxend",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxErrorRest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxFilterNE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxinfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxlog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/utils/opersrx.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rxwarn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/base/abstract-app.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractApp",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/error.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorGeneral",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/error.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorHandlerAngular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/error.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorHttp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/error.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadErrorsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/loading.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hideLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/loading.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadLoadingsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/loading.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "showLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/app.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/error.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/loading.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/error.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateError",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/error.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/error.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/error.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/loading.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/loading.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/loading.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadingFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/loading.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/error.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/error.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/loading.selectors.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createSelectorLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/loading.selectors.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createSelectorLoadingGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/loading.selectors.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "filterLoadingId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/loading.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoadingState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/users/components/users/users.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/formfields.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldsComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/stories/library/lib-Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Enabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormFieldsAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PaginatorEnable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/library/lib-Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/main/app-form-comment.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Enabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/main/app-form-comment.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}